
CAN_Test_STM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002660  08002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002670  08002670  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002670  08002670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002678  08002678  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  0800268c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  0800268c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005eab  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000011a5  00000000  00000000  00025ee7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000550  00000000  00000000  00027090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004b8  00000000  00000000  000275e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f251  00000000  00000000  00027a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004b64  00000000  00000000  00046ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bdede  00000000  00000000  0004b84d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010972b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001454  00000000  00000000  001097a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002648 	.word	0x08002648

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002648 	.word	0x08002648

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fa88 	bl	80009e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f83a 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8d8 	bl	8000688 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004d8:	f000 f8a0 	bl	800061c <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  //define CAN header
  pTxHeader.DLC = 1; // 1 byte of data
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <main+0x74>)
 80004de:	2201      	movs	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
  pTxHeader.IDE = CAN_ID_STD; //standard identifier type
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <main+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  pTxHeader.RTR = CAN_RTR_DATA; //data frame to be transmitted
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <main+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  pTxHeader.StdId = 0x244; //set standard identifier. (anywhere from 0x0 to 0x7FF, set at 0x245 for STM2)
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <main+0x74>)
 80004f0:	f44f 7211 	mov.w	r2, #580	; 0x244
 80004f4:	601a      	str	r2, [r3, #0]

  //define CAN filter
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <main+0x78>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterIdHigh = 0x245<<5; //must be shifted 5 bits to the left according to reference manual, set at 0x244 for STM2
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <main+0x78>)
 80004fe:	f644 02a0 	movw	r2, #18592	; 0x48a0
 8000502:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0;
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <main+0x78>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0;
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <main+0x78>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0;
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <main+0x78>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; //32 bit scale
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <main+0x78>)
 8000518:	2201      	movs	r2, #1
 800051a:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE; //enable activation
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <main+0x78>)
 800051e:	2201      	movs	r2, #1
 8000520:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig); //config CAN filter
 8000522:	4907      	ldr	r1, [pc, #28]	; (8000540 <main+0x78>)
 8000524:	4807      	ldr	r0, [pc, #28]	; (8000544 <main+0x7c>)
 8000526:	f000 fbc9 	bl	8000cbc <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1); //start CAN
 800052a:	4806      	ldr	r0, [pc, #24]	; (8000544 <main+0x7c>)
 800052c:	f000 fca6 	bl	8000e7c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING); //interrupt on message pending
 8000530:	2102      	movs	r1, #2
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <main+0x7c>)
 8000534:	f000 fed3 	bl	80012de <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x70>
 800053a:	bf00      	nop
 800053c:	20000054 	.word	0x20000054
 8000540:	20000028 	.word	0x20000028
 8000544:	2000008c 	.word	0x2000008c

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f002 f86e 	bl	8002638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fbe0 	bl	8001d94 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005da:	f000 f8cd 	bl	8000778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fe39 	bl	8002274 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000608:	f000 f8b6 	bl	8000778 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000620:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_CAN1_Init+0x64>)
 8000622:	4a18      	ldr	r2, [pc, #96]	; (8000684 <MX_CAN1_Init+0x68>)
 8000624:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_CAN1_Init+0x64>)
 8000628:	2215      	movs	r2, #21
 800062a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800062c:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_CAN1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000632:	4b13      	ldr	r3, [pc, #76]	; (8000680 <MX_CAN1_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_CAN1_Init+0x64>)
 800063a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800063e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_CAN1_Init+0x64>)
 8000642:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000646:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <MX_CAN1_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_CAN1_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <MX_CAN1_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_CAN1_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <MX_CAN1_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_CAN1_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <MX_CAN1_Init+0x64>)
 800066e:	f000 fa29 	bl	8000ac4 <HAL_CAN_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000678:	f000 f87e 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000008c 	.word	0x2000008c
 8000684:	40006400 	.word	0x40006400

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b31      	ldr	r3, [pc, #196]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a30      	ldr	r2, [pc, #192]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a29      	ldr	r2, [pc, #164]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b27      	ldr	r3, [pc, #156]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b23      	ldr	r3, [pc, #140]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a22      	ldr	r2, [pc, #136]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a1b      	ldr	r2, [pc, #108]	; (8000768 <MX_GPIO_Init+0xe0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_GPIO_Init+0xe0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000714:	4815      	ldr	r0, [pc, #84]	; (800076c <MX_GPIO_Init+0xe4>)
 8000716:	f001 faff 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800071a:	2301      	movs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_GPIO_Init+0xe8>)
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	4811      	ldr	r0, [pc, #68]	; (8000774 <MX_GPIO_Init+0xec>)
 800072e:	f001 f941 	bl	80019b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000732:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <MX_GPIO_Init+0xe4>)
 800074c:	f001 f932 	bl	80019b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8000750:	2201      	movs	r2, #1
 8000752:	2100      	movs	r1, #0
 8000754:	2006      	movs	r0, #6
 8000756:	f001 f8f6 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800075a:	2006      	movs	r0, #6
 800075c:	f001 f90f 	bl	800197e <HAL_NVIC_EnableIRQ>

}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020c00 	.word	0x40020c00
 8000770:	10110000 	.word	0x10110000
 8000774:	40020000 	.word	0x40020000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077e:	e7fe      	b.n	800077e <Error_Handler+0x6>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007be:	2007      	movs	r0, #7
 80007c0:	f001 f8b6 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <HAL_CAN_MspInit+0x94>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d134      	bne.n	800085c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_CAN_MspInit+0x98>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <HAL_CAN_MspInit+0x98>)
 80007fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <HAL_CAN_MspInit+0x98>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_CAN_MspInit+0x98>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a14      	ldr	r2, [pc, #80]	; (8000868 <HAL_CAN_MspInit+0x98>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_CAN_MspInit+0x98>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800082a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800082e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800083c:	2309      	movs	r3, #9
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4809      	ldr	r0, [pc, #36]	; (800086c <HAL_CAN_MspInit+0x9c>)
 8000848:	f001 f8b4 	bl	80019b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 800084c:	2202      	movs	r2, #2
 800084e:	2100      	movs	r1, #0
 8000850:	2014      	movs	r0, #20
 8000852:	f001 f878 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000856:	2014      	movs	r0, #20
 8000858:	f001 f891 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40006400 	.word	0x40006400
 8000868:	40023800 	.word	0x40023800
 800086c:	40020400 	.word	0x40020400

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f8e2 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
for (int n=0;n<1000000;n++);
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	e002      	b.n	80008d6 <EXTI0_IRQHandler+0x12>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3301      	adds	r3, #1
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <EXTI0_IRQHandler+0x50>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	ddf8      	ble.n	80008d0 <EXTI0_IRQHandler+0xc>
if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 80008de:	2101      	movs	r1, #1
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <EXTI0_IRQHandler+0x54>)
 80008e2:	f001 fa01 	bl	8001ce8 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d00b      	beq.n	8000904 <EXTI0_IRQHandler+0x40>
{
	//increase a variable and transmit it through CAN
	a++;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <EXTI0_IRQHandler+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <EXTI0_IRQHandler+0x58>)
 80008f6:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, &a, &pTxMailbox);
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <EXTI0_IRQHandler+0x5c>)
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <EXTI0_IRQHandler+0x58>)
 80008fc:	4909      	ldr	r1, [pc, #36]	; (8000924 <EXTI0_IRQHandler+0x60>)
 80008fe:	480a      	ldr	r0, [pc, #40]	; (8000928 <EXTI0_IRQHandler+0x64>)
 8000900:	f000 fb00 	bl	8000f04 <HAL_CAN_AddTxMessage>
}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000904:	2001      	movs	r0, #1
 8000906:	f001 fa21 	bl	8001d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	000f423f 	.word	0x000f423f
 8000918:	40020000 	.word	0x40020000
 800091c:	200000b4 	.word	0x200000b4
 8000920:	20000050 	.word	0x20000050
 8000924:	20000054 	.word	0x20000054
 8000928:	2000008c 	.word	0x2000008c

0800092c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <CAN1_RX0_IRQHandler+0x24>)
 8000932:	f000 fcfa 	bl	800132a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &r); //receive byte
 8000936:	4b07      	ldr	r3, [pc, #28]	; (8000954 <CAN1_RX0_IRQHandler+0x28>)
 8000938:	4a07      	ldr	r2, [pc, #28]	; (8000958 <CAN1_RX0_IRQHandler+0x2c>)
 800093a:	2100      	movs	r1, #0
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <CAN1_RX0_IRQHandler+0x24>)
 800093e:	f000 fbbc 	bl	80010ba <HAL_CAN_GetRxMessage>
  GPIOD->ODR = r<<12; //output received byte, starting at Pin D12
 8000942:	4b04      	ldr	r3, [pc, #16]	; (8000954 <CAN1_RX0_IRQHandler+0x28>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	031a      	lsls	r2, r3, #12
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <CAN1_RX0_IRQHandler+0x30>)
 800094a:	615a      	str	r2, [r3, #20]
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000008c 	.word	0x2000008c
 8000954:	2000006c 	.word	0x2000006c
 8000958:	20000070 	.word	0x20000070
 800095c:	40020c00 	.word	0x40020c00

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <SystemInit+0x28>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a07      	ldr	r2, [pc, #28]	; (8000988 <SystemInit+0x28>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SystemInit+0x28>)
 8000976:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800097a:	609a      	str	r2, [r3, #8]
#endif
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800098c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000990:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000992:	e003      	b.n	800099c <LoopCopyDataInit>

08000994 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000996:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000998:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800099a:	3104      	adds	r1, #4

0800099c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009a4:	d3f6      	bcc.n	8000994 <CopyDataInit>
  ldr  r2, =_sbss
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009a8:	e002      	b.n	80009b0 <LoopFillZerobss>

080009aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009ac:	f842 3b04 	str.w	r3, [r2], #4

080009b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009b4:	d3f9      	bcc.n	80009aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009b6:	f7ff ffd3 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ba:	f001 fe19 	bl	80025f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009be:	f7ff fd83 	bl	80004c8 <main>
  bx  lr    
 80009c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009c8:	08002680 	.word	0x08002680
  ldr  r0, =_sdata
 80009cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009d0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80009d4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80009d8:	200000bc 	.word	0x200000bc

080009dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC_IRQHandler>
	...

080009e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <HAL_Init+0x40>)
 80009ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <HAL_Init+0x40>)
 80009f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <HAL_Init+0x40>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	; (8000a20 <HAL_Init+0x40>)
 8000a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 ff91 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff feb4 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023c00 	.word	0x40023c00

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 ffa9 	bl	800199a <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 ff71 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	200000b8 	.word	0x200000b8

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	200000b8 	.word	0x200000b8

08000ac4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e0ed      	b.n	8000cb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff fe74 	bl	80007d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f022 0202 	bic.w	r2, r2, #2
 8000af6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000af8:	f7ff ffd8 	bl	8000aac <HAL_GetTick>
 8000afc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000afe:	e012      	b.n	8000b26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b00:	f7ff ffd4 	bl	8000aac <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b0a      	cmp	r3, #10
 8000b0c:	d90b      	bls.n	8000b26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e0c5      	b.n	8000cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1e5      	bne.n	8000b00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f042 0201 	orr.w	r2, r2, #1
 8000b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b44:	f7ff ffb2 	bl	8000aac <HAL_GetTick>
 8000b48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b4a:	e012      	b.n	8000b72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b4c:	f7ff ffae 	bl	8000aac <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b0a      	cmp	r3, #10
 8000b58:	d90b      	bls.n	8000b72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2205      	movs	r2, #5
 8000b6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e09f      	b.n	8000cb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0e5      	beq.n	8000b4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7e1b      	ldrb	r3, [r3, #24]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d108      	bne.n	8000b9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	e007      	b.n	8000baa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7e5b      	ldrb	r3, [r3, #25]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d108      	bne.n	8000bc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e007      	b.n	8000bd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7e9b      	ldrb	r3, [r3, #26]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d108      	bne.n	8000bee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0220 	orr.w	r2, r2, #32
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	e007      	b.n	8000bfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f022 0220 	bic.w	r2, r2, #32
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7edb      	ldrb	r3, [r3, #27]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d108      	bne.n	8000c18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0210 	bic.w	r2, r2, #16
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e007      	b.n	8000c28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0210 	orr.w	r2, r2, #16
 8000c26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7f1b      	ldrb	r3, [r3, #28]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d108      	bne.n	8000c42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0208 	orr.w	r2, r2, #8
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0208 	bic.w	r2, r2, #8
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7f5b      	ldrb	r3, [r3, #29]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d108      	bne.n	8000c6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0204 	orr.w	r2, r2, #4
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0204 	bic.w	r2, r2, #4
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	431a      	orrs	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	ea42 0103 	orr.w	r1, r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cd4:	7cfb      	ldrb	r3, [r7, #19]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d003      	beq.n	8000ce2 <HAL_CAN_ConfigFilter+0x26>
 8000cda:	7cfb      	ldrb	r3, [r7, #19]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	f040 80be 	bne.w	8000e5e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ce2:	4b65      	ldr	r3, [pc, #404]	; (8000e78 <HAL_CAN_ConfigFilter+0x1bc>)
 8000ce4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cec:	f043 0201 	orr.w	r2, r3, #1
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cfc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	431a      	orrs	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	2201      	movs	r2, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	43db      	mvns	r3, r3
 8000d34:	401a      	ands	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d123      	bne.n	8000d8c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	68db      	ldr	r3, [r3, #12]
 8000d5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d62:	683a      	ldr	r2, [r7, #0]
 8000d64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	3248      	adds	r2, #72	; 0x48
 8000d6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d82:	6979      	ldr	r1, [r7, #20]
 8000d84:	3348      	adds	r3, #72	; 0x48
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	440b      	add	r3, r1
 8000d8a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	69db      	ldr	r3, [r3, #28]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d122      	bne.n	8000dda <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000db4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3248      	adds	r2, #72	; 0x48
 8000dba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dd0:	6979      	ldr	r1, [r7, #20]
 8000dd2:	3348      	adds	r3, #72	; 0x48
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d109      	bne.n	8000df6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	401a      	ands	r2, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000df4:	e007      	b.n	8000e06 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	431a      	orrs	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d109      	bne.n	8000e22 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	401a      	ands	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000e20:	e007      	b.n	8000e32 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d107      	bne.n	8000e4a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	431a      	orrs	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e50:	f023 0201 	bic.w	r2, r3, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e006      	b.n	8000e6c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
  }
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	371c      	adds	r7, #28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40006400 	.word	0x40006400

08000e7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d12e      	bne.n	8000eee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2202      	movs	r2, #2
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ea8:	f7ff fe00 	bl	8000aac <HAL_GetTick>
 8000eac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000eae:	e012      	b.n	8000ed6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000eb0:	f7ff fdfc 	bl	8000aac <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b0a      	cmp	r3, #10
 8000ebc:	d90b      	bls.n	8000ed6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2205      	movs	r2, #5
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e012      	b.n	8000efc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1e5      	bne.n	8000eb0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e006      	b.n	8000efc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
  }
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f22:	7ffb      	ldrb	r3, [r7, #31]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d003      	beq.n	8000f30 <HAL_CAN_AddTxMessage+0x2c>
 8000f28:	7ffb      	ldrb	r3, [r7, #31]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	f040 80b8 	bne.w	80010a0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 80a0 	beq.w	8001090 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	0e1b      	lsrs	r3, r3, #24
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d907      	bls.n	8000f70 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e09e      	b.n	80010ae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000f70:	2201      	movs	r2, #1
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	409a      	lsls	r2, r3
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10d      	bne.n	8000f9e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	6809      	ldr	r1, [r1, #0]
 8000f90:	431a      	orrs	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3318      	adds	r3, #24
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	440b      	add	r3, r1
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e00f      	b.n	8000fbe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fa8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000fb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3318      	adds	r3, #24
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	440b      	add	r3, r1
 8000fbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6819      	ldr	r1, [r3, #0]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3318      	adds	r3, #24
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	440b      	add	r3, r1
 8000fce:	3304      	adds	r3, #4
 8000fd0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	7d1b      	ldrb	r3, [r3, #20]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d111      	bne.n	8000ffe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3318      	adds	r3, #24
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	6811      	ldr	r1, [r2, #0]
 8000fee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3304      	adds	r3, #4
 8000ffc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3307      	adds	r3, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	061a      	lsls	r2, r3, #24
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3306      	adds	r3, #6
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3305      	adds	r3, #5
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	4313      	orrs	r3, r2
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	3204      	adds	r2, #4
 800101e:	7812      	ldrb	r2, [r2, #0]
 8001020:	4610      	mov	r0, r2
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	6811      	ldr	r1, [r2, #0]
 8001026:	ea43 0200 	orr.w	r2, r3, r0
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	011b      	lsls	r3, r3, #4
 800102e:	440b      	add	r3, r1
 8001030:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001034:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3303      	adds	r3, #3
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	061a      	lsls	r2, r3, #24
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3302      	adds	r3, #2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	041b      	lsls	r3, r3, #16
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3301      	adds	r3, #1
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	4313      	orrs	r3, r2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	4610      	mov	r0, r2
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	6811      	ldr	r1, [r2, #0]
 800105c:	ea43 0200 	orr.w	r2, r3, r0
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	440b      	add	r3, r1
 8001066:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800106a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3318      	adds	r3, #24
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	6811      	ldr	r1, [r2, #0]
 800107e:	f043 0201 	orr.w	r2, r3, #1
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	3318      	adds	r3, #24
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	440b      	add	r3, r1
 800108a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	e00e      	b.n	80010ae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001094:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e006      	b.n	80010ae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
  }
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010ba:	b480      	push	{r7}
 80010bc:	b087      	sub	sp, #28
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d003      	beq.n	80010de <HAL_CAN_GetRxMessage+0x24>
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	f040 80f3 	bne.w	80012c4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d10e      	bne.n	8001102 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d116      	bne.n	8001120 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e0e7      	b.n	80012d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d107      	bne.n	8001120 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0d8      	b.n	80012d2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	331b      	adds	r3, #27
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	4413      	add	r3, r2
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0204 	and.w	r2, r3, #4
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	331b      	adds	r3, #27
 8001146:	011b      	lsls	r3, r3, #4
 8001148:	4413      	add	r3, r2
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0d5b      	lsrs	r3, r3, #21
 800114e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	e00b      	b.n	8001170 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	331b      	adds	r3, #27
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	4413      	add	r3, r2
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	08db      	lsrs	r3, r3, #3
 8001168:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	331b      	adds	r3, #27
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0202 	and.w	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	331b      	adds	r3, #27
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	3304      	adds	r3, #4
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 020f 	and.w	r2, r3, #15
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	331b      	adds	r3, #27
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	3304      	adds	r3, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	0a1b      	lsrs	r3, r3, #8
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	331b      	adds	r3, #27
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4413      	add	r3, r2
 80011c2:	3304      	adds	r3, #4
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0c1b      	lsrs	r3, r3, #16
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4413      	add	r3, r2
 80011ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	0a1a      	lsrs	r2, r3, #8
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	0c1a      	lsrs	r2, r3, #16
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	3302      	adds	r3, #2
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	4413      	add	r3, r2
 8001222:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0e1a      	lsrs	r2, r3, #24
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	3303      	adds	r3, #3
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3304      	adds	r3, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	4413      	add	r3, r2
 8001254:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0a1a      	lsrs	r2, r3, #8
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	3305      	adds	r3, #5
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4413      	add	r3, r2
 800126e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	0c1a      	lsrs	r2, r3, #16
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3306      	adds	r3, #6
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	011b      	lsls	r3, r3, #4
 8001286:	4413      	add	r3, r2
 8001288:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	0e1a      	lsrs	r2, r3, #24
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	3307      	adds	r3, #7
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d108      	bne.n	80012b0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0220 	orr.w	r2, r2, #32
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	e007      	b.n	80012c0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0220 	orr.w	r2, r2, #32
 80012be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e006      	b.n	80012d2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
  }
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d002      	beq.n	80012fc <HAL_CAN_ActivateNotification+0x1e>
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d109      	bne.n	8001310 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6959      	ldr	r1, [r3, #20]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	430a      	orrs	r2, r1
 800130a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	e006      	b.n	800131e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
  }
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b08a      	sub	sp, #40	; 0x28
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d07c      	beq.n	800146a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d023      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2201      	movs	r2, #1
 8001380:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f97d 	bl	800168c <HAL_CAN_TxMailbox0CompleteCallback>
 8001392:	e016      	b.n	80013c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	f003 0304 	and.w	r3, r3, #4
 800139a:	2b00      	cmp	r3, #0
 800139c:	d004      	beq.n	80013a8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	e00c      	b.n	80013c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ba:	e002      	b.n	80013c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f983 	bl	80016c8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d024      	beq.n	8001416 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f95d 	bl	80016a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80013e6:	e016      	b.n	8001416 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	e00c      	b.n	8001416 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	e002      	b.n	8001416 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f963 	bl	80016dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d024      	beq.n	800146a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001428:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f93d 	bl	80016b4 <HAL_CAN_TxMailbox2CompleteCallback>
 800143a:	e016      	b.n	800146a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d004      	beq.n	8001450 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
 800144e:	e00c      	b.n	800146a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
 8001462:	e002      	b.n	800146a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f943 	bl	80016f0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00c      	beq.n	800148e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001484:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2210      	movs	r2, #16
 800148c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00b      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2208      	movs	r2, #8
 80014a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f934 	bl	8001718 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d002      	beq.n	80014ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f91b 	bl	8001704 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00c      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d007      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2210      	movs	r2, #16
 80014f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f003 0320 	and.w	r3, r3, #32
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00b      	beq.n	8001514 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2208      	movs	r2, #8
 800150c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f916 	bl	8001740 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b00      	cmp	r3, #0
 800152a:	d002      	beq.n	8001532 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f8fd 	bl	800172c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00b      	beq.n	8001554 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2210      	movs	r2, #16
 800154c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f900 	bl	8001754 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2208      	movs	r2, #8
 800156e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f8f9 	bl	8001768 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d075      	beq.n	800166c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	d06c      	beq.n	8001664 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d03d      	beq.n	8001664 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d038      	beq.n	8001664 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015f8:	2b30      	cmp	r3, #48	; 0x30
 80015fa:	d017      	beq.n	800162c <HAL_CAN_IRQHandler+0x302>
 80015fc:	2b30      	cmp	r3, #48	; 0x30
 80015fe:	d804      	bhi.n	800160a <HAL_CAN_IRQHandler+0x2e0>
 8001600:	2b10      	cmp	r3, #16
 8001602:	d009      	beq.n	8001618 <HAL_CAN_IRQHandler+0x2ee>
 8001604:	2b20      	cmp	r3, #32
 8001606:	d00c      	beq.n	8001622 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001608:	e024      	b.n	8001654 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800160a:	2b50      	cmp	r3, #80	; 0x50
 800160c:	d018      	beq.n	8001640 <HAL_CAN_IRQHandler+0x316>
 800160e:	2b60      	cmp	r3, #96	; 0x60
 8001610:	d01b      	beq.n	800164a <HAL_CAN_IRQHandler+0x320>
 8001612:	2b40      	cmp	r3, #64	; 0x40
 8001614:	d00f      	beq.n	8001636 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001616:	e01d      	b.n	8001654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001620:	e018      	b.n	8001654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800162a:	e013      	b.n	8001654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	f043 0320 	orr.w	r3, r3, #32
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001634:	e00e      	b.n	8001654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800163e:	e009      	b.n	8001654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001648:	e004      	b.n	8001654 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001652:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001662:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2204      	movs	r2, #4
 800166a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f87c 	bl	800177c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	; 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	e16b      	b.n	8001ca8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d0:	2201      	movs	r2, #1
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 815a 	bne.w	8001ca2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d00b      	beq.n	8001a0e <HAL_GPIO_Init+0x5a>
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d007      	beq.n	8001a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a02:	2b11      	cmp	r3, #17
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0xfc>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b12      	cmp	r3, #18
 8001aae:	d123      	bne.n	8001af8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	08da      	lsrs	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3208      	adds	r2, #8
 8001ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0203 	and.w	r2, r3, #3
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 80b4 	beq.w	8001ca2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b5f      	ldr	r3, [pc, #380]	; (8001cbc <HAL_GPIO_Init+0x308>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a5e      	ldr	r2, [pc, #376]	; (8001cbc <HAL_GPIO_Init+0x308>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b5c      	ldr	r3, [pc, #368]	; (8001cbc <HAL_GPIO_Init+0x308>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b56:	4a5a      	ldr	r2, [pc, #360]	; (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	089b      	lsrs	r3, r3, #2
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_GPIO_Init+0x310>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d02b      	beq.n	8001bda <HAL_GPIO_Init+0x226>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a50      	ldr	r2, [pc, #320]	; (8001cc8 <HAL_GPIO_Init+0x314>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d025      	beq.n	8001bd6 <HAL_GPIO_Init+0x222>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4f      	ldr	r2, [pc, #316]	; (8001ccc <HAL_GPIO_Init+0x318>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01f      	beq.n	8001bd2 <HAL_GPIO_Init+0x21e>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4e      	ldr	r2, [pc, #312]	; (8001cd0 <HAL_GPIO_Init+0x31c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0x21a>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4d      	ldr	r2, [pc, #308]	; (8001cd4 <HAL_GPIO_Init+0x320>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0x216>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4c      	ldr	r2, [pc, #304]	; (8001cd8 <HAL_GPIO_Init+0x324>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00d      	beq.n	8001bc6 <HAL_GPIO_Init+0x212>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4b      	ldr	r2, [pc, #300]	; (8001cdc <HAL_GPIO_Init+0x328>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x20e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4a      	ldr	r2, [pc, #296]	; (8001ce0 <HAL_GPIO_Init+0x32c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d101      	bne.n	8001bbe <HAL_GPIO_Init+0x20a>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e00e      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x228>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4934      	ldr	r1, [pc, #208]	; (8001cc0 <HAL_GPIO_Init+0x30c>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1e:	4a31      	ldr	r2, [pc, #196]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c24:	4b2f      	ldr	r3, [pc, #188]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c48:	4a26      	ldr	r2, [pc, #152]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4e:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c72:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_GPIO_Init+0x330>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f ae90 	bls.w	80019d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3724      	adds	r7, #36	; 0x24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40013800 	.word	0x40013800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020c00 	.word	0x40020c00
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40021400 	.word	0x40021400
 8001cdc:	40021800 	.word	0x40021800
 8001ce0:	40021c00 	.word	0x40021c00
 8001ce4:	40013c00 	.word	0x40013c00

08001ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	887b      	ldrh	r3, [r7, #2]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
 8001d04:	e001      	b.n	8001d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d56:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d62:	4a05      	ldr	r2, [pc, #20]	; (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f806 	bl	8001d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e25b      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d075      	beq.n	8001e9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001db2:	4ba3      	ldr	r3, [pc, #652]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dbe:	4ba0      	ldr	r3, [pc, #640]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d112      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4b9d      	ldr	r3, [pc, #628]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	4b99      	ldr	r3, [pc, #612]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05b      	beq.n	8001e9c <HAL_RCC_OscConfig+0x108>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d157      	bne.n	8001e9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e236      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x74>
 8001dfa:	4b91      	ldr	r3, [pc, #580]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a90      	ldr	r2, [pc, #576]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e01d      	b.n	8001e44 <HAL_RCC_OscConfig+0xb0>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x98>
 8001e12:	4b8b      	ldr	r3, [pc, #556]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a8a      	ldr	r2, [pc, #552]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b88      	ldr	r3, [pc, #544]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a87      	ldr	r2, [pc, #540]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0xb0>
 8001e2c:	4b84      	ldr	r3, [pc, #528]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a83      	ldr	r2, [pc, #524]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b81      	ldr	r3, [pc, #516]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a80      	ldr	r2, [pc, #512]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7fe fe2e 	bl	8000aac <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e54:	f7fe fe2a 	bl	8000aac <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1fb      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b76      	ldr	r3, [pc, #472]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0xc0>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7fe fe1a 	bl	8000aac <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7fe fe16 	bl	8000aac <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	; 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e1e7      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	4b6c      	ldr	r3, [pc, #432]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0xe8>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d063      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eaa:	4b65      	ldr	r3, [pc, #404]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb6:	4b62      	ldr	r3, [pc, #392]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d11c      	bne.n	8001efc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec2:	4b5f      	ldr	r3, [pc, #380]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d116      	bne.n	8001efc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ece:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x152>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d001      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e1bb      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b56      	ldr	r3, [pc, #344]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4952      	ldr	r1, [pc, #328]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efa:	e03a      	b.n	8001f72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d020      	beq.n	8001f46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f04:	4b4f      	ldr	r3, [pc, #316]	; (8002044 <HAL_RCC_OscConfig+0x2b0>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7fe fdcf 	bl	8000aac <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f12:	f7fe fdcb 	bl	8000aac <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e19c      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f30:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4940      	ldr	r1, [pc, #256]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f46:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <HAL_RCC_OscConfig+0x2b0>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7fe fdae 	bl	8000aac <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f54:	f7fe fdaa 	bl	8000aac <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e17b      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f66:	4b36      	ldr	r3, [pc, #216]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0308 	and.w	r3, r3, #8
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d030      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f86:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_RCC_OscConfig+0x2b4>)
 8001f88:	2201      	movs	r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7fe fd8e 	bl	8000aac <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f94:	f7fe fd8a 	bl	8000aac <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e15b      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x200>
 8001fb2:	e015      	b.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb4:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_RCC_OscConfig+0x2b4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7fe fd77 	bl	8000aac <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc2:	f7fe fd73 	bl	8000aac <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e144      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	4b1a      	ldr	r3, [pc, #104]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80a0 	beq.w	800212e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10f      	bne.n	800201e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_RCC_OscConfig+0x2ac>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201a:	2301      	movs	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_OscConfig+0x2b8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d121      	bne.n	800206e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_RCC_OscConfig+0x2b8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a07      	ldr	r2, [pc, #28]	; (800204c <HAL_RCC_OscConfig+0x2b8>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002036:	f7fe fd39 	bl	8000aac <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	e011      	b.n	8002062 <HAL_RCC_OscConfig+0x2ce>
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	42470000 	.word	0x42470000
 8002048:	42470e80 	.word	0x42470e80
 800204c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002050:	f7fe fd2c 	bl	8000aac <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e0fd      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002062:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_RCC_OscConfig+0x4d4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d106      	bne.n	8002084 <HAL_RCC_OscConfig+0x2f0>
 8002076:	4b7d      	ldr	r3, [pc, #500]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a7c      	ldr	r2, [pc, #496]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
 8002082:	e01c      	b.n	80020be <HAL_RCC_OscConfig+0x32a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b05      	cmp	r3, #5
 800208a:	d10c      	bne.n	80020a6 <HAL_RCC_OscConfig+0x312>
 800208c:	4b77      	ldr	r3, [pc, #476]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	4a76      	ldr	r2, [pc, #472]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6713      	str	r3, [r2, #112]	; 0x70
 8002098:	4b74      	ldr	r3, [pc, #464]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a73      	ldr	r2, [pc, #460]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
 80020a4:	e00b      	b.n	80020be <HAL_RCC_OscConfig+0x32a>
 80020a6:	4b71      	ldr	r3, [pc, #452]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020aa:	4a70      	ldr	r2, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6713      	str	r3, [r2, #112]	; 0x70
 80020b2:	4b6e      	ldr	r3, [pc, #440]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 80020b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b6:	4a6d      	ldr	r2, [pc, #436]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d015      	beq.n	80020f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c6:	f7fe fcf1 	bl	8000aac <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7fe fced 	bl	8000aac <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0bc      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e4:	4b61      	ldr	r3, [pc, #388]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0ee      	beq.n	80020ce <HAL_RCC_OscConfig+0x33a>
 80020f0:	e014      	b.n	800211c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f2:	f7fe fcdb 	bl	8000aac <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f8:	e00a      	b.n	8002110 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fa:	f7fe fcd7 	bl	8000aac <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0a6      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	4b56      	ldr	r3, [pc, #344]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ee      	bne.n	80020fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d105      	bne.n	800212e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002122:	4b52      	ldr	r3, [pc, #328]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a51      	ldr	r2, [pc, #324]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 8002128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8092 	beq.w	800225c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002138:	4b4c      	ldr	r3, [pc, #304]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d05c      	beq.n	80021fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d141      	bne.n	80021d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800214c:	4b48      	ldr	r3, [pc, #288]	; (8002270 <HAL_RCC_OscConfig+0x4dc>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002152:	f7fe fcab 	bl	8000aac <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215a:	f7fe fca7 	bl	8000aac <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e078      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216c:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f0      	bne.n	800215a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	019b      	lsls	r3, r3, #6
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	085b      	lsrs	r3, r3, #1
 8002190:	3b01      	subs	r3, #1
 8002192:	041b      	lsls	r3, r3, #16
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	061b      	lsls	r3, r3, #24
 800219c:	4933      	ldr	r1, [pc, #204]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a2:	4b33      	ldr	r3, [pc, #204]	; (8002270 <HAL_RCC_OscConfig+0x4dc>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7fe fc80 	bl	8000aac <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fc7c 	bl	8000aac <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e04d      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x41c>
 80021ce:	e045      	b.n	800225c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <HAL_RCC_OscConfig+0x4dc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7fe fc69 	bl	8000aac <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe fc65 	bl	8000aac <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e036      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f0:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x44a>
 80021fc:	e02e      	b.n	800225c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e029      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <HAL_RCC_OscConfig+0x4d8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	429a      	cmp	r2, r3
 800221c:	d11c      	bne.n	8002258 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d115      	bne.n	8002258 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002232:	4013      	ands	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002238:	4293      	cmp	r3, r2
 800223a:	d10d      	bne.n	8002258 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d106      	bne.n	8002258 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40007000 	.word	0x40007000
 800226c:	40023800 	.word	0x40023800
 8002270:	42470060 	.word	0x42470060

08002274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0cc      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b68      	ldr	r3, [pc, #416]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d90c      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b65      	ldr	r3, [pc, #404]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0b8      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d020      	beq.n	80022fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c8:	4b59      	ldr	r3, [pc, #356]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a58      	ldr	r2, [pc, #352]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a52      	ldr	r2, [pc, #328]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	494d      	ldr	r1, [pc, #308]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d044      	beq.n	8002394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d107      	bne.n	8002322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d119      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b02      	cmp	r3, #2
 8002328:	d003      	beq.n	8002332 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800232e:	2b03      	cmp	r3, #3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002332:	4b3f      	ldr	r3, [pc, #252]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e067      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4934      	ldr	r1, [pc, #208]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002364:	f7fe fba2 	bl	8000aac <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe fb9e 	bl	8000aac <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04f      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002394:	4b25      	ldr	r3, [pc, #148]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d20c      	bcs.n	80023bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e032      	b.n	8002422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4916      	ldr	r1, [pc, #88]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	490e      	ldr	r1, [pc, #56]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023fa:	f000 f821 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023fe:	4601      	mov	r1, r0
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	5cd3      	ldrb	r3, [r2, r3]
 800240e:	fa21 f303 	lsr.w	r3, r1, r3
 8002412:	4a09      	ldr	r2, [pc, #36]	; (8002438 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fb02 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40023c00 	.word	0x40023c00
 8002430:	40023800 	.word	0x40023800
 8002434:	08002660 	.word	0x08002660
 8002438:	20000000 	.word	0x20000000
 800243c:	20000004 	.word	0x20000004

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d007      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0x32>
 8002462:	2b08      	cmp	r3, #8
 8002464:	d008      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x38>
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 80b4 	bne.w	80025d4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800246c:	4b5e      	ldr	r3, [pc, #376]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800246e:	60bb      	str	r3, [r7, #8]
       break;
 8002470:	e0b3      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002472:	4b5e      	ldr	r3, [pc, #376]	; (80025ec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002474:	60bb      	str	r3, [r7, #8]
      break;
 8002476:	e0b0      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002478:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002480:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002482:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d04a      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800248e:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	099b      	lsrs	r3, r3, #6
 8002494:	f04f 0400 	mov.w	r4, #0
 8002498:	f240 11ff 	movw	r1, #511	; 0x1ff
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	ea03 0501 	and.w	r5, r3, r1
 80024a4:	ea04 0602 	and.w	r6, r4, r2
 80024a8:	4629      	mov	r1, r5
 80024aa:	4632      	mov	r2, r6
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	f04f 0400 	mov.w	r4, #0
 80024b4:	0154      	lsls	r4, r2, #5
 80024b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024ba:	014b      	lsls	r3, r1, #5
 80024bc:	4619      	mov	r1, r3
 80024be:	4622      	mov	r2, r4
 80024c0:	1b49      	subs	r1, r1, r5
 80024c2:	eb62 0206 	sbc.w	r2, r2, r6
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	f04f 0400 	mov.w	r4, #0
 80024ce:	0194      	lsls	r4, r2, #6
 80024d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024d4:	018b      	lsls	r3, r1, #6
 80024d6:	1a5b      	subs	r3, r3, r1
 80024d8:	eb64 0402 	sbc.w	r4, r4, r2
 80024dc:	f04f 0100 	mov.w	r1, #0
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	00e2      	lsls	r2, r4, #3
 80024e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024ea:	00d9      	lsls	r1, r3, #3
 80024ec:	460b      	mov	r3, r1
 80024ee:	4614      	mov	r4, r2
 80024f0:	195b      	adds	r3, r3, r5
 80024f2:	eb44 0406 	adc.w	r4, r4, r6
 80024f6:	f04f 0100 	mov.w	r1, #0
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	0262      	lsls	r2, r4, #9
 8002500:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002504:	0259      	lsls	r1, r3, #9
 8002506:	460b      	mov	r3, r1
 8002508:	4614      	mov	r4, r2
 800250a:	4618      	mov	r0, r3
 800250c:	4621      	mov	r1, r4
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f04f 0400 	mov.w	r4, #0
 8002514:	461a      	mov	r2, r3
 8002516:	4623      	mov	r3, r4
 8002518:	f7fd fe56 	bl	80001c8 <__aeabi_uldivmod>
 800251c:	4603      	mov	r3, r0
 800251e:	460c      	mov	r4, r1
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e049      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002524:	4b2f      	ldr	r3, [pc, #188]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	f04f 0400 	mov.w	r4, #0
 800252e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	ea03 0501 	and.w	r5, r3, r1
 800253a:	ea04 0602 	and.w	r6, r4, r2
 800253e:	4629      	mov	r1, r5
 8002540:	4632      	mov	r2, r6
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	f04f 0400 	mov.w	r4, #0
 800254a:	0154      	lsls	r4, r2, #5
 800254c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002550:	014b      	lsls	r3, r1, #5
 8002552:	4619      	mov	r1, r3
 8002554:	4622      	mov	r2, r4
 8002556:	1b49      	subs	r1, r1, r5
 8002558:	eb62 0206 	sbc.w	r2, r2, r6
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	f04f 0400 	mov.w	r4, #0
 8002564:	0194      	lsls	r4, r2, #6
 8002566:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800256a:	018b      	lsls	r3, r1, #6
 800256c:	1a5b      	subs	r3, r3, r1
 800256e:	eb64 0402 	sbc.w	r4, r4, r2
 8002572:	f04f 0100 	mov.w	r1, #0
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	00e2      	lsls	r2, r4, #3
 800257c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002580:	00d9      	lsls	r1, r3, #3
 8002582:	460b      	mov	r3, r1
 8002584:	4614      	mov	r4, r2
 8002586:	195b      	adds	r3, r3, r5
 8002588:	eb44 0406 	adc.w	r4, r4, r6
 800258c:	f04f 0100 	mov.w	r1, #0
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	02a2      	lsls	r2, r4, #10
 8002596:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800259a:	0299      	lsls	r1, r3, #10
 800259c:	460b      	mov	r3, r1
 800259e:	4614      	mov	r4, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	4621      	mov	r1, r4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f04f 0400 	mov.w	r4, #0
 80025aa:	461a      	mov	r2, r3
 80025ac:	4623      	mov	r3, r4
 80025ae:	f7fd fe0b 	bl	80001c8 <__aeabi_uldivmod>
 80025b2:	4603      	mov	r3, r0
 80025b4:	460c      	mov	r4, r1
 80025b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	0c1b      	lsrs	r3, r3, #16
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	3301      	adds	r3, #1
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d0:	60bb      	str	r3, [r7, #8]
      break;
 80025d2:	e002      	b.n	80025da <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025d6:	60bb      	str	r3, [r7, #8]
      break;
 80025d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025da:	68bb      	ldr	r3, [r7, #8]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e4:	40023800 	.word	0x40023800
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	007a1200 	.word	0x007a1200

080025f0 <__libc_init_array>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	4e0d      	ldr	r6, [pc, #52]	; (8002628 <__libc_init_array+0x38>)
 80025f4:	4c0d      	ldr	r4, [pc, #52]	; (800262c <__libc_init_array+0x3c>)
 80025f6:	1ba4      	subs	r4, r4, r6
 80025f8:	10a4      	asrs	r4, r4, #2
 80025fa:	2500      	movs	r5, #0
 80025fc:	42a5      	cmp	r5, r4
 80025fe:	d109      	bne.n	8002614 <__libc_init_array+0x24>
 8002600:	4e0b      	ldr	r6, [pc, #44]	; (8002630 <__libc_init_array+0x40>)
 8002602:	4c0c      	ldr	r4, [pc, #48]	; (8002634 <__libc_init_array+0x44>)
 8002604:	f000 f820 	bl	8002648 <_init>
 8002608:	1ba4      	subs	r4, r4, r6
 800260a:	10a4      	asrs	r4, r4, #2
 800260c:	2500      	movs	r5, #0
 800260e:	42a5      	cmp	r5, r4
 8002610:	d105      	bne.n	800261e <__libc_init_array+0x2e>
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002618:	4798      	blx	r3
 800261a:	3501      	adds	r5, #1
 800261c:	e7ee      	b.n	80025fc <__libc_init_array+0xc>
 800261e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002622:	4798      	blx	r3
 8002624:	3501      	adds	r5, #1
 8002626:	e7f2      	b.n	800260e <__libc_init_array+0x1e>
 8002628:	08002678 	.word	0x08002678
 800262c:	08002678 	.word	0x08002678
 8002630:	08002678 	.word	0x08002678
 8002634:	0800267c 	.word	0x0800267c

08002638 <memset>:
 8002638:	4402      	add	r2, r0
 800263a:	4603      	mov	r3, r0
 800263c:	4293      	cmp	r3, r2
 800263e:	d100      	bne.n	8002642 <memset+0xa>
 8002640:	4770      	bx	lr
 8002642:	f803 1b01 	strb.w	r1, [r3], #1
 8002646:	e7f9      	b.n	800263c <memset+0x4>

08002648 <_init>:
 8002648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264a:	bf00      	nop
 800264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264e:	bc08      	pop	{r3}
 8002650:	469e      	mov	lr, r3
 8002652:	4770      	bx	lr

08002654 <_fini>:
 8002654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002656:	bf00      	nop
 8002658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265a:	bc08      	pop	{r3}
 800265c:	469e      	mov	lr, r3
 800265e:	4770      	bx	lr
