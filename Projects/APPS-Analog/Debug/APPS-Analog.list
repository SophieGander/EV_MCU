
APPS-Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a15c  0800a15c  0001a15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b4  0800a1b4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b4  0800a1b4  0001a1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1bc  0800a1bc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1c0  0800a1c0  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000090  0800a254  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  0800a254  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dee2  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000415c  00000000  00000000  0003dfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001428  00000000  00000000  00042100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  00043528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266f8  00000000  00000000  000447c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adc3  00000000  00000000  0006aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d67a3  00000000  00000000  00085c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c41e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a40  00000000  00000000  0015c474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a144 	.word	0x0800a144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800a144 	.word	0x0800a144

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	0000      	movs	r0, r0
	...

08000e68 <demanded_torque_calculator_step>:
RT_MODEL_demanded_torque_calc_T *const demanded_torque_calculator_M =
  &demanded_torque_calculator_M_;

/* Model step function */
void demanded_torque_calculator_step(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* MATLAB Function: '<S1>/forward_torque_throttle_map' incorporates:
   *  Inport: '<Root>/max_torque'
   *  Inport: '<Root>/regen_percentage'
   *  Inport: '<Root>/throttle'
   */
  if ((demanded_torque_calculator_U.throttle <= 5) &&
 8000e6e:	4b70      	ldr	r3, [pc, #448]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000e70:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000e74:	f04f 0200 	mov.w	r2, #0
 8000e78:	4b6e      	ldr	r3, [pc, #440]	; (8001034 <demanded_torque_calculator_step+0x1cc>)
 8000e7a:	f7ff fe39 	bl	8000af0 <__aeabi_dcmple>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d012      	beq.n	8000eaa <demanded_torque_calculator_step+0x42>
      (demanded_torque_calculator_U.throttle >= 0)) {
 8000e84:	4b6a      	ldr	r3, [pc, #424]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000e86:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
  if ((demanded_torque_calculator_U.throttle <= 5) &&
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	f04f 0300 	mov.w	r3, #0
 8000e92:	f7ff fe37 	bl	8000b04 <__aeabi_dcmpge>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <demanded_torque_calculator_step+0x42>
    rtb_torque = 0;
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	e9c7 2300 	strd	r2, r3, [r7]
 8000ea8:	e080      	b.n	8000fac <demanded_torque_calculator_step+0x144>
  } else if (demanded_torque_calculator_U.regen_percentage == 0) {
 8000eaa:	4b61      	ldr	r3, [pc, #388]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000eac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eb0:	f04f 0200 	mov.w	r2, #0
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	f7ff fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d03a      	beq.n	8000f38 <demanded_torque_calculator_step+0xd0>
    if (demanded_torque_calculator_U.throttle - 5 < 0) {
 8000ec2:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000ec4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	4b59      	ldr	r3, [pc, #356]	; (8001034 <demanded_torque_calculator_step+0x1cc>)
 8000ece:	f7ff f9db 	bl	8000288 <__aeabi_dsub>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	f7ff fdfb 	bl	8000adc <__aeabi_dcmplt>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <demanded_torque_calculator_step+0x92>
      rtb_torque = 0;
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	e9c7 2300 	strd	r2, r3, [r7]
 8000ef8:	e058      	b.n	8000fac <demanded_torque_calculator_step+0x144>
    } else {
      rtb_torque = (demanded_torque_calculator_U.throttle - 5) / 95 *
 8000efa:	4b4d      	ldr	r3, [pc, #308]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000efc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f00:	f04f 0200 	mov.w	r2, #0
 8000f04:	4b4b      	ldr	r3, [pc, #300]	; (8001034 <demanded_torque_calculator_step+0x1cc>)
 8000f06:	f7ff f9bf 	bl	8000288 <__aeabi_dsub>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	a345      	add	r3, pc, #276	; (adr r3, 8001028 <demanded_torque_calculator_step+0x1c0>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fc98 	bl	800084c <__aeabi_ddiv>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
        demanded_torque_calculator_U.max_torque;
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000f26:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
      rtb_torque = (demanded_torque_calculator_U.throttle - 5) / 95 *
 8000f2a:	f7ff fb65 	bl	80005f8 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	e9c7 2300 	strd	r2, r3, [r7]
 8000f36:	e039      	b.n	8000fac <demanded_torque_calculator_step+0x144>
    }
  } else if (demanded_torque_calculator_U.throttle - 10 < 0) {
 8000f38:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000f3a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <demanded_torque_calculator_step+0x1d0>)
 8000f44:	f7ff f9a0 	bl	8000288 <__aeabi_dsub>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	f7ff fdc0 	bl	8000adc <__aeabi_dcmplt>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <demanded_torque_calculator_step+0x108>
    rtb_torque = 0;
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	e9c7 2300 	strd	r2, r3, [r7]
 8000f6e:	e01d      	b.n	8000fac <demanded_torque_calculator_step+0x144>
  } else {
    rtb_torque = (demanded_torque_calculator_U.throttle - 10) / 90 *
 8000f70:	4b2f      	ldr	r3, [pc, #188]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000f72:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000f76:	f04f 0200 	mov.w	r2, #0
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <demanded_torque_calculator_step+0x1d0>)
 8000f7c:	f7ff f984 	bl	8000288 <__aeabi_dsub>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <demanded_torque_calculator_step+0x1d4>)
 8000f8e:	f7ff fc5d 	bl	800084c <__aeabi_ddiv>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	4610      	mov	r0, r2
 8000f98:	4619      	mov	r1, r3
      demanded_torque_calculator_U.max_torque;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000f9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    rtb_torque = (demanded_torque_calculator_U.throttle - 10) / 90 *
 8000fa0:	f7ff fb2a 	bl	80005f8 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  if (rtb_torque < 0) {
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fb8:	f7ff fd90 	bl	8000adc <__aeabi_dcmplt>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <demanded_torque_calculator_step+0x168>
    rtb_torque = 0;
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
 8000fce:	e00e      	b.n	8000fee <demanded_torque_calculator_step+0x186>
  } else {
    if (rtb_torque > 240.0) {
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <demanded_torque_calculator_step+0x1d8>)
 8000fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fda:	f7ff fd9d 	bl	8000b18 <__aeabi_dcmpgt>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d004      	beq.n	8000fee <demanded_torque_calculator_step+0x186>
      rtb_torque = 240.0;
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <demanded_torque_calculator_step+0x1d8>)
 8000fea:	e9c7 2300 	strd	r2, r3, [r7]

  /* Switch: '<S2>/Switch2' incorporates:
   *  Inport: '<Root>/max_torque'
   *  RelationalOperator: '<S2>/LowerRelop1'
   */
  if (rtb_torque > demanded_torque_calculator_U.max_torque) {
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8000ff0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ff8:	f7ff fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <demanded_torque_calculator_step+0x1a8>
    /* Outport: '<Root>/demanded_torque' */
    demanded_torque_calculator_Y.demanded_torque =
      demanded_torque_calculator_U.max_torque;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <demanded_torque_calculator_step+0x1c8>)
 8001004:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    demanded_torque_calculator_Y.demanded_torque =
 8001008:	490e      	ldr	r1, [pc, #56]	; (8001044 <demanded_torque_calculator_step+0x1dc>)
 800100a:	e9c1 2300 	strd	r2, r3, [r1]
     */
    demanded_torque_calculator_Y.demanded_torque = rtb_torque;
  }

  /* End of Switch: '<S2>/Switch2' */
}
 800100e:	e004      	b.n	800101a <demanded_torque_calculator_step+0x1b2>
    demanded_torque_calculator_Y.demanded_torque = rtb_torque;
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <demanded_torque_calculator_step+0x1dc>)
 8001012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001016:	e9c1 2300 	strd	r2, r3, [r1]
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	00000000 	.word	0x00000000
 800102c:	4057c000 	.word	0x4057c000
 8001030:	200000d0 	.word	0x200000d0
 8001034:	40140000 	.word	0x40140000
 8001038:	40240000 	.word	0x40240000
 800103c:	40568000 	.word	0x40568000
 8001040:	406e0000 	.word	0x406e0000
 8001044:	200000c8 	.word	0x200000c8

08001048 <demanded_torque_calculator_initialize>:

/* Model initialize function */
void demanded_torque_calculator_initialize(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize error status */
  rtmSetErrorStatus(demanded_torque_calculator_M, (NULL));
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <demanded_torque_calculator_initialize+0x28>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]

  /* external inputs */
  (void)memset(&demanded_torque_calculator_U, 0, sizeof
 8001052:	2218      	movs	r2, #24
 8001054:	2100      	movs	r1, #0
 8001056:	4807      	ldr	r0, [pc, #28]	; (8001074 <demanded_torque_calculator_initialize+0x2c>)
 8001058:	f008 fbf8 	bl	800984c <memset>
               (ExtU_demanded_torque_calculat_T));

  /* external outputs */
  demanded_torque_calculator_Y.demanded_torque = 0.0;
 800105c:	4906      	ldr	r1, [pc, #24]	; (8001078 <demanded_torque_calculator_initialize+0x30>)
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	e9c1 2300 	strd	r2, r3, [r1]
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200000ac 	.word	0x200000ac
 8001074:	200000d0 	.word	0x200000d0
 8001078:	200000c8 	.word	0x200000c8

0800107c <calculate_max_torque.11221>:

  // TEMP VALUESSS
  max_cnt_pwr = 100;
  mtr_spd = 0;

  uint16_t calculate_max_torque(){
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4663      	mov	r3, ip
 8001084:	f8c7 c004 	str.w	ip, [r7, #4]
	  if (mtr_spd == 0){
 8001088:	885a      	ldrh	r2, [r3, #2]
 800108a:	2a00      	cmp	r2, #0
 800108c:	d101      	bne.n	8001092 <calculate_max_torque.11221+0x16>
		  return 240;
 800108e:	23f0      	movs	r3, #240	; 0xf0
 8001090:	e004      	b.n	800109c <calculate_max_torque.11221+0x20>
	  }

	  return max_cnt_pwr / mtr_spd;
 8001092:	881a      	ldrh	r2, [r3, #0]
 8001094:	885b      	ldrh	r3, [r3, #2]
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
  }
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <main>:
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
int main(void)
 80010ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b2:	617b      	str	r3, [r7, #20]
  HAL_Init();
 80010b4:	f000 fd7c 	bl	8001bb0 <HAL_Init>
  SystemClock_Config();
 80010b8:	f000 f89a 	bl	80011f0 <SystemClock_Config>
  MX_GPIO_Init();
 80010bc:	f000 fa2a 	bl	8001514 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010c0:	f000 f96a 	bl	8001398 <MX_I2C1_Init>
  MX_I2S3_Init();
 80010c4:	f000 f996 	bl	80013f4 <MX_I2S3_Init>
  MX_SPI1_Init();
 80010c8:	f000 f9c4 	bl	8001454 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80010cc:	f008 f87a 	bl	80091c4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80010d0:	f000 f910 	bl	80012f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80010d4:	f000 f9f4 	bl	80014c0 <MX_USART2_UART_Init>
  max_cnt_pwr = 100;
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	823b      	strh	r3, [r7, #16]
  mtr_spd = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	827b      	strh	r3, [r7, #18]


  /** Initialize torque calculator object  **/
  demanded_torque_calculator_initialize();
 80010e0:	f7ff ffb2 	bl	8001048 <demanded_torque_calculator_initialize>

  while (1)
  {

	  /** Get ADC value **/
	  HAL_ADC_Start(&hadc1);
 80010e4:	483c      	ldr	r0, [pc, #240]	; (80011d8 <main+0x130>)
 80010e6:	f000 fe3d 	bl	8001d64 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010ea:	f04f 31ff 	mov.w	r1, #4294967295
 80010ee:	483a      	ldr	r0, [pc, #232]	; (80011d8 <main+0x130>)
 80010f0:	f000 fefe 	bl	8001ef0 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80010f4:	4838      	ldr	r0, [pc, #224]	; (80011d8 <main+0x130>)
 80010f6:	f000 ff7f 	bl	8001ff8 <HAL_ADC_GetValue>
 80010fa:	4603      	mov	r3, r0
 80010fc:	83fb      	strh	r3, [r7, #30]


	  /** Convert [sensor voltage] -> [% throttle activated] **/
	  percent = round((raw/4095.0)*100.0);
 80010fe:	8bfb      	ldrh	r3, [r7, #30]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa0f 	bl	8000524 <__aeabi_i2d>
 8001106:	a332      	add	r3, pc, #200	; (adr r3, 80011d0 <main+0x128>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fb9e 	bl	800084c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <main+0x134>)
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	ec43 2b17 	vmov	d7, r2, r3
 800112a:	eeb0 0a47 	vmov.f32	s0, s14
 800112e:	eef0 0a67 	vmov.f32	s1, s15
 8001132:	f008 ffc1 	bl	800a0b8 <round>
 8001136:	ec53 2b10 	vmov	r2, r3, d0
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fcf5 	bl	8000b2c <__aeabi_d2uiz>
 8001142:	4603      	mov	r3, r0
 8001144:	83bb      	strh	r3, [r7, #28]
	  percent = 100 - percent;
 8001146:	8bbb      	ldrh	r3, [r7, #28]
 8001148:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800114c:	83bb      	strh	r3, [r7, #28]


	  /** Set inputs for torque_calculator **/
	  demanded_torque_calculator_U.regen_percentage = 0; // regen not yet implemented
 800114e:	4924      	ldr	r1, [pc, #144]	; (80011e0 <main+0x138>)
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9c1 2300 	strd	r2, r3, [r1]
	  demanded_torque_calculator_U.throttle = percent;
 800115c:	8bbb      	ldrh	r3, [r7, #28]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9d0 	bl	8000504 <__aeabi_ui2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	491d      	ldr	r1, [pc, #116]	; (80011e0 <main+0x138>)
 800116a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  demanded_torque_calculator_U.max_torque = calculate_max_torque();
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	469c      	mov	ip, r3
 8001174:	f7ff ff82 	bl	800107c <calculate_max_torque.11221>
 8001178:	4603      	mov	r3, r0
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f9c2 	bl	8000504 <__aeabi_ui2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4916      	ldr	r1, [pc, #88]	; (80011e0 <main+0x138>)
 8001186:	e9c1 2304 	strd	r2, r3, [r1, #16]


	  /** Step (calculate model outputs from inputs) **/
	  demanded_torque_calculator_step();
 800118a:	f7ff fe6d 	bl	8000e68 <demanded_torque_calculator_step>


	  /** Get outputs from torque_calculator object **/
	  dmd_trq = demanded_torque_calculator_Y.demanded_torque;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <main+0x13c>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fcc8 	bl	8000b2c <__aeabi_d2uiz>
 800119c:	4603      	mov	r3, r0
 800119e:	837b      	strh	r3, [r7, #26]


	  /** Convert to string and print to serial **/
	  sprintf(msg, "%hu\r\n", dmd_trq); // [percent] or [dmd_trq]
 80011a0:	8b7a      	ldrh	r2, [r7, #26]
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4910      	ldr	r1, [pc, #64]	; (80011e8 <main+0x140>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f008 fc12 	bl	80099d0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff f80e 	bl	80001d0 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	1d39      	adds	r1, r7, #4
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <main+0x144>)
 80011c0:	f004 fd41 	bl	8005c46 <HAL_UART_Transmit>


	  /** Pretend we have something else to do for a while **/
	  HAL_Delay(1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 fd65 	bl	8001c94 <HAL_Delay>




    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011ca:	f008 f821 	bl	8009210 <MX_USB_HOST_Process>
	  HAL_ADC_Start(&hadc1);
 80011ce:	e789      	b.n	80010e4 <main+0x3c>
 80011d0:	00000000 	.word	0x00000000
 80011d4:	40affe00 	.word	0x40affe00
 80011d8:	2000013c 	.word	0x2000013c
 80011dc:	40590000 	.word	0x40590000
 80011e0:	200000d0 	.word	0x200000d0
 80011e4:	200000c8 	.word	0x200000c8
 80011e8:	0800a15c 	.word	0x0800a15c
 80011ec:	200001dc 	.word	0x200001dc

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b098      	sub	sp, #96	; 0x60
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f008 fb24 	bl	800984c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b31      	ldr	r3, [pc, #196]	; (80012ec <SystemClock_Config+0xfc>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a30      	ldr	r2, [pc, #192]	; (80012ec <SystemClock_Config+0xfc>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <SystemClock_Config+0xfc>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <SystemClock_Config+0x100>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <SystemClock_Config+0x100>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <SystemClock_Config+0x100>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125a:	2301      	movs	r3, #1
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001268:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800126e:	2308      	movs	r3, #8
 8001270:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001272:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001276:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001278:	2302      	movs	r3, #2
 800127a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800127c:	2307      	movs	r3, #7
 800127e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001284:	4618      	mov	r0, r3
 8001286:	f003 fe81 	bl	8004f8c <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001290:	f000 fa30 	bl	80016f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001294:	230f      	movs	r3, #15
 8001296:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	2105      	movs	r1, #5
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f8da 	bl	800546c <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80012be:	f000 fa19 	bl	80016f4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80012c2:	2301      	movs	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012c6:	23c0      	movs	r3, #192	; 0xc0
 80012c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80012ca:	2302      	movs	r3, #2
 80012cc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4618      	mov	r0, r3
 80012d4:	f004 fac6 	bl	8005864 <HAL_RCCEx_PeriphCLKConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80012de:	f000 fa09 	bl	80016f4 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3760      	adds	r7, #96	; 0x60
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_ADC1_Init+0x98>)
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <MX_ADC1_Init+0x9c>)
 800130a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_ADC1_Init+0x98>)
 800130e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001312:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_ADC1_Init+0x98>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_ADC1_Init+0x98>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001320:	4b1a      	ldr	r3, [pc, #104]	; (800138c <MX_ADC1_Init+0x98>)
 8001322:	2200      	movs	r2, #0
 8001324:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <MX_ADC1_Init+0x98>)
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <MX_ADC1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <MX_ADC1_Init+0x98>)
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <MX_ADC1_Init+0xa0>)
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_ADC1_Init+0x98>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <MX_ADC1_Init+0x98>)
 8001342:	2201      	movs	r2, #1
 8001344:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_ADC1_Init+0x98>)
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_ADC1_Init+0x98>)
 8001350:	2201      	movs	r2, #1
 8001352:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <MX_ADC1_Init+0x98>)
 8001356:	f000 fcc1 	bl	8001cdc <HAL_ADC_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001360:	f000 f9c8 	bl	80016f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001364:	2300      	movs	r3, #0
 8001366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001368:	2301      	movs	r3, #1
 800136a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_ADC1_Init+0x98>)
 8001376:	f000 fe4d 	bl	8002014 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001380:	f000 f9b8 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000013c 	.word	0x2000013c
 8001390:	40012000 	.word	0x40012000
 8001394:	0f000001 	.word	0x0f000001

08001398 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <MX_I2C1_Init+0x50>)
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <MX_I2C1_Init+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_I2C1_Init+0x58>)
 80013a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a8:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013be:	2200      	movs	r2, #0
 80013c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d4:	4804      	ldr	r0, [pc, #16]	; (80013e8 <MX_I2C1_Init+0x50>)
 80013d6:	f002 fff5 	bl	80043c4 <HAL_I2C_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e0:	f000 f988 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200000e8 	.word	0x200000e8
 80013ec:	40005400 	.word	0x40005400
 80013f0:	000186a0 	.word	0x000186a0

080013f4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_I2S3_Init+0x54>)
 80013fa:	4a14      	ldr	r2, [pc, #80]	; (800144c <MX_I2S3_Init+0x58>)
 80013fc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_I2S3_Init+0x54>)
 8001400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001404:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_I2S3_Init+0x54>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <MX_I2S3_Init+0x54>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <MX_I2S3_Init+0x54>)
 8001414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001418:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800141a:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_I2S3_Init+0x54>)
 800141c:	4a0c      	ldr	r2, [pc, #48]	; (8001450 <MX_I2S3_Init+0x5c>)
 800141e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <MX_I2S3_Init+0x54>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_I2S3_Init+0x54>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_I2S3_Init+0x54>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_I2S3_Init+0x54>)
 8001434:	f003 f90a 	bl	800464c <HAL_I2S_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800143e:	f000 f959 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000021c 	.word	0x2000021c
 800144c:	40003c00 	.word	0x40003c00
 8001450:	00017700 	.word	0x00017700

08001454 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_SPI1_Init+0x64>)
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <MX_SPI1_Init+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001464:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_SPI1_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_SPI1_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001484:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <MX_SPI1_Init+0x64>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_SPI1_Init+0x64>)
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001498:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <MX_SPI1_Init+0x64>)
 800149a:	2200      	movs	r2, #0
 800149c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_SPI1_Init+0x64>)
 80014a0:	220a      	movs	r2, #10
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <MX_SPI1_Init+0x64>)
 80014a6:	f004 fb1d 	bl	8005ae4 <HAL_SPI_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014b0:	f000 f920 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000184 	.word	0x20000184
 80014bc:	40013000 	.word	0x40013000

080014c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <MX_USART2_UART_Init+0x50>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_USART2_UART_Init+0x4c>)
 80014f8:	f004 fb58 	bl	8005bac <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001502:	f000 f8f7 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200001dc 	.word	0x200001dc
 8001510:	40004400 	.word	0x40004400

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	; 0x30
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <MX_GPIO_Init+0x1c8>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a6a      	ldr	r2, [pc, #424]	; (80016dc <MX_GPIO_Init+0x1c8>)
 8001534:	f043 0310 	orr.w	r3, r3, #16
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b68      	ldr	r3, [pc, #416]	; (80016dc <MX_GPIO_Init+0x1c8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	4b64      	ldr	r3, [pc, #400]	; (80016dc <MX_GPIO_Init+0x1c8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a63      	ldr	r2, [pc, #396]	; (80016dc <MX_GPIO_Init+0x1c8>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b61      	ldr	r3, [pc, #388]	; (80016dc <MX_GPIO_Init+0x1c8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <MX_GPIO_Init+0x1c8>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	4a5c      	ldr	r2, [pc, #368]	; (80016dc <MX_GPIO_Init+0x1c8>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001570:	6313      	str	r3, [r2, #48]	; 0x30
 8001572:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <MX_GPIO_Init+0x1c8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b56      	ldr	r3, [pc, #344]	; (80016dc <MX_GPIO_Init+0x1c8>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a55      	ldr	r2, [pc, #340]	; (80016dc <MX_GPIO_Init+0x1c8>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b53      	ldr	r3, [pc, #332]	; (80016dc <MX_GPIO_Init+0x1c8>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <MX_GPIO_Init+0x1c8>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a4e      	ldr	r2, [pc, #312]	; (80016dc <MX_GPIO_Init+0x1c8>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <MX_GPIO_Init+0x1c8>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b48      	ldr	r3, [pc, #288]	; (80016dc <MX_GPIO_Init+0x1c8>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a47      	ldr	r2, [pc, #284]	; (80016dc <MX_GPIO_Init+0x1c8>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b45      	ldr	r3, [pc, #276]	; (80016dc <MX_GPIO_Init+0x1c8>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2108      	movs	r1, #8
 80015d6:	4842      	ldr	r0, [pc, #264]	; (80016e0 <MX_GPIO_Init+0x1cc>)
 80015d8:	f001 f9e8 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	2101      	movs	r1, #1
 80015e0:	4840      	ldr	r0, [pc, #256]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 80015e2:	f001 f9e3 	bl	80029ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015e6:	2200      	movs	r2, #0
 80015e8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80015ec:	483e      	ldr	r0, [pc, #248]	; (80016e8 <MX_GPIO_Init+0x1d4>)
 80015ee:	f001 f9dd 	bl	80029ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80015f2:	2308      	movs	r3, #8
 80015f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4835      	ldr	r0, [pc, #212]	; (80016e0 <MX_GPIO_Init+0x1cc>)
 800160a:	f001 f833 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800160e:	2301      	movs	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	4619      	mov	r1, r3
 8001624:	482f      	ldr	r0, [pc, #188]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001626:	f001 f825 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800162a:	2308      	movs	r3, #8
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800163a:	2305      	movs	r3, #5
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 031c 	add.w	r3, r7, #28
 8001642:	4619      	mov	r1, r3
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <MX_GPIO_Init+0x1d0>)
 8001646:	f001 f815 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800164a:	2304      	movs	r3, #4
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4823      	ldr	r0, [pc, #140]	; (80016ec <MX_GPIO_Init+0x1d8>)
 800165e:	f001 f809 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001674:	2305      	movs	r3, #5
 8001676:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	4619      	mov	r1, r3
 800167e:	481b      	ldr	r0, [pc, #108]	; (80016ec <MX_GPIO_Init+0x1d8>)
 8001680:	f000 fff8 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001684:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001688:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168a:	2301      	movs	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4812      	ldr	r0, [pc, #72]	; (80016e8 <MX_GPIO_Init+0x1d4>)
 800169e:	f000 ffe9 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80016a2:	2320      	movs	r3, #32
 80016a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <MX_GPIO_Init+0x1d4>)
 80016b6:	f000 ffdd 	bl	8002674 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_GPIO_Init+0x1dc>)
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	4804      	ldr	r0, [pc, #16]	; (80016e0 <MX_GPIO_Init+0x1cc>)
 80016ce:	f000 ffd1 	bl	8002674 <HAL_GPIO_Init>

}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	; 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020c00 	.word	0x40020c00
 80016ec:	40020400 	.word	0x40020400
 80016f0:	10120000 	.word	0x10120000

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	607b      	str	r3, [r7, #4]
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <HAL_MspInit+0x4c>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	603b      	str	r3, [r7, #0]
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_MspInit+0x4c>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6413      	str	r3, [r2, #64]	; 0x40
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001742:	2007      	movs	r0, #7
 8001744:	f000 ff54 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_ADC_MspInit+0x7c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d127      	bne.n	80017c6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_ADC_MspInit+0x80>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_ADC_MspInit+0x80>)
 8001780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <HAL_ADC_MspInit+0x80>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_ADC_MspInit+0x80>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_ADC_MspInit+0x80>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_ADC_MspInit+0x80>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ae:	2301      	movs	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b2:	2303      	movs	r3, #3
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_ADC_MspInit+0x84>)
 80017c2:	f000 ff57 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40012000 	.word	0x40012000
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020000 	.word	0x40020000

080017dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a19      	ldr	r2, [pc, #100]	; (8001860 <HAL_I2C_MspInit+0x84>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d12c      	bne.n	8001858 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	613b      	str	r3, [r7, #16]
 8001818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800181a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001820:	2312      	movs	r3, #18
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001824:	2301      	movs	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182c:	2304      	movs	r3, #4
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	480c      	ldr	r0, [pc, #48]	; (8001868 <HAL_I2C_MspInit+0x8c>)
 8001838:	f000 ff1c 	bl	8002674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_I2C_MspInit+0x88>)
 8001846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_I2C_MspInit+0x88>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40005400 	.word	0x40005400
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400

0800186c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a28      	ldr	r2, [pc, #160]	; (800192c <HAL_I2S_MspInit+0xc0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d14a      	bne.n	8001924 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_I2S_MspInit+0xc4>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a26      	ldr	r2, [pc, #152]	; (8001930 <HAL_I2S_MspInit+0xc4>)
 8001898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b24      	ldr	r3, [pc, #144]	; (8001930 <HAL_I2S_MspInit+0xc4>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_I2S_MspInit+0xc4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a1f      	ldr	r2, [pc, #124]	; (8001930 <HAL_I2S_MspInit+0xc4>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_I2S_MspInit+0xc4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_I2S_MspInit+0xc4>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a18      	ldr	r2, [pc, #96]	; (8001930 <HAL_I2S_MspInit+0xc4>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_I2S_MspInit+0xc4>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80018e2:	2310      	movs	r3, #16
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018f2:	2306      	movs	r3, #6
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <HAL_I2S_MspInit+0xc8>)
 80018fe:	f000 feb9 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001902:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001914:	2306      	movs	r3, #6
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <HAL_I2S_MspInit+0xcc>)
 8001920:	f000 fea8 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	3728      	adds	r7, #40	; 0x28
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40003c00 	.word	0x40003c00
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000
 8001938:	40020800 	.word	0x40020800

0800193c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_SPI_MspInit+0x84>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d12b      	bne.n	80019b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a10      	ldr	r2, [pc, #64]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_SPI_MspInit+0x88>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001996:	23e0      	movs	r3, #224	; 0xe0
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a6:	2305      	movs	r3, #5
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_SPI_MspInit+0x8c>)
 80019b2:	f000 fe5f 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3728      	adds	r7, #40	; 0x28
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40013000 	.word	0x40013000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000

080019cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_UART_MspInit+0x84>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d12b      	bne.n	8001a46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_UART_MspInit+0x88>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a17      	ldr	r2, [pc, #92]	; (8001a54 <HAL_UART_MspInit+0x88>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_UART_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <HAL_UART_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a10      	ldr	r2, [pc, #64]	; (8001a54 <HAL_UART_MspInit+0x88>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_UART_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a26:	230c      	movs	r3, #12
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a36:	2307      	movs	r3, #7
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_UART_MspInit+0x8c>)
 8001a42:	f000 fe17 	bl	8002674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40004400 	.word	0x40004400
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 f8d4 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <OTG_FS_IRQHandler+0x10>)
 8001ab6:	f001 fa21 	bl	8002efc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000640 	.word	0x20000640

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f007 fe70 	bl	80097d8 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	200000b0 	.word	0x200000b0
 8001b2c:	20000918 	.word	0x20000918

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <SystemInit+0x28>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <SystemInit+0x28>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <SystemInit+0x28>)
 8001b46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b62:	e003      	b.n	8001b6c <LoopCopyDataInit>

08001b64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b6a:	3104      	adds	r1, #4

08001b6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b74:	d3f6      	bcc.n	8001b64 <CopyDataInit>
  ldr  r2, =_sbss
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b78:	e002      	b.n	8001b80 <LoopFillZerobss>

08001b7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b7c:	f842 3b04 	str.w	r3, [r2], #4

08001b80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b84:	d3f9      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b86:	f7ff ffd3 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f007 fe2b 	bl	80097e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7ff fa8b 	bl	80010a8 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b98:	0800a1c4 	.word	0x0800a1c4
  ldr  r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ba0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001ba4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001ba8:	20000914 	.word	0x20000914

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 fd09 	bl	80025f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fd8e 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fd21 	bl	800265a <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 fce9 	bl	8002606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000008 	.word	0x20000008
 8001c50:	20000004 	.word	0x20000004

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20000008 	.word	0x20000008
 8001c78:	20000264 	.word	0x20000264

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000264 	.word	0x20000264

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000008 	.word	0x20000008

08001cdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e033      	b.n	8001d5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fd2a 	bl	8001754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d22:	f023 0302 	bic.w	r3, r3, #2
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fa92 	bl	8002258 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
 8001d4a:	e001      	b.n	8001d50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d101      	bne.n	8001d7e <HAL_ADC_Start+0x1a>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e0a5      	b.n	8001eca <HAL_ADC_Start+0x166>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d018      	beq.n	8001dc6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001da4:	4b4c      	ldr	r3, [pc, #304]	; (8001ed8 <HAL_ADC_Start+0x174>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a4c      	ldr	r2, [pc, #304]	; (8001edc <HAL_ADC_Start+0x178>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0c9a      	lsrs	r2, r3, #18
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d179      	bne.n	8001ec8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d007      	beq.n	8001e06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e12:	d106      	bne.n	8001e22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	f023 0206 	bic.w	r2, r3, #6
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
 8001e20:	e002      	b.n	8001e28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e30:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_ADC_Start+0x17c>)
 8001e32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d12a      	bne.n	8001ea0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <HAL_ADC_Start+0x180>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d015      	beq.n	8001e80 <HAL_ADC_Start+0x11c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a23      	ldr	r2, [pc, #140]	; (8001ee8 <HAL_ADC_Start+0x184>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d105      	bne.n	8001e6a <HAL_ADC_Start+0x106>
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_ADC_Start+0x17c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 031f 	and.w	r3, r3, #31
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_ADC_Start+0x188>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d129      	bne.n	8001ec8 <HAL_ADC_Start+0x164>
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_ADC_Start+0x17c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d123      	bne.n	8001ec8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d11c      	bne.n	8001ec8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	e013      	b.n	8001ec8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_ADC_Start+0x180>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_ADC_Start+0x164>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d107      	bne.n	8001ec8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ec6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	431bde83 	.word	0x431bde83
 8001ee0:	40012300 	.word	0x40012300
 8001ee4:	40012000 	.word	0x40012000
 8001ee8:	40012100 	.word	0x40012100
 8001eec:	40012200 	.word	0x40012200

08001ef0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0c:	d113      	bne.n	8001f36 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1c:	d10b      	bne.n	8001f36 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f043 0220 	orr.w	r2, r3, #32
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e05c      	b.n	8001ff0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001f36:	f7ff fea1 	bl	8001c7c <HAL_GetTick>
 8001f3a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f3c:	e01a      	b.n	8001f74 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d016      	beq.n	8001f74 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d007      	beq.n	8001f5c <HAL_ADC_PollForConversion+0x6c>
 8001f4c:	f7ff fe96 	bl	8001c7c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d20b      	bcs.n	8001f74 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e03d      	b.n	8001ff0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d1dd      	bne.n	8001f3e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f06f 0212 	mvn.w	r2, #18
 8001f8a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d123      	bne.n	8001fee <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d11f      	bne.n	8001fee <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d111      	bne.n	8001fee <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
	...

08002014 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_ADC_ConfigChannel+0x1c>
 800202c:	2302      	movs	r3, #2
 800202e:	e105      	b.n	800223c <HAL_ADC_ConfigChannel+0x228>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b09      	cmp	r3, #9
 800203e:	d925      	bls.n	800208c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68d9      	ldr	r1, [r3, #12]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	3b1e      	subs	r3, #30
 8002056:	2207      	movs	r2, #7
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43da      	mvns	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	400a      	ands	r2, r1
 8002064:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68d9      	ldr	r1, [r3, #12]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	4618      	mov	r0, r3
 8002078:	4603      	mov	r3, r0
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4403      	add	r3, r0
 800207e:	3b1e      	subs	r3, #30
 8002080:	409a      	lsls	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	e022      	b.n	80020d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6919      	ldr	r1, [r3, #16]
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	b29b      	uxth	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	2207      	movs	r2, #7
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	400a      	ands	r2, r1
 80020ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6919      	ldr	r1, [r3, #16]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	4403      	add	r3, r0
 80020c8:	409a      	lsls	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d824      	bhi.n	8002124 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	3b05      	subs	r3, #5
 80020ec:	221f      	movs	r2, #31
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43da      	mvns	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	400a      	ands	r2, r1
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	b29b      	uxth	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b05      	subs	r3, #5
 8002116:	fa00 f203 	lsl.w	r2, r0, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	635a      	str	r2, [r3, #52]	; 0x34
 8002122:	e04c      	b.n	80021be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b0c      	cmp	r3, #12
 800212a:	d824      	bhi.n	8002176 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	3b23      	subs	r3, #35	; 0x23
 800213e:	221f      	movs	r2, #31
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43da      	mvns	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	400a      	ands	r2, r1
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3b23      	subs	r3, #35	; 0x23
 8002168:	fa00 f203 	lsl.w	r2, r0, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
 8002174:	e023      	b.n	80021be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	3b41      	subs	r3, #65	; 0x41
 8002188:	221f      	movs	r2, #31
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	400a      	ands	r2, r1
 8002196:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3b41      	subs	r3, #65	; 0x41
 80021b2:	fa00 f203 	lsl.w	r2, r0, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_ADC_ConfigChannel+0x234>)
 80021c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a21      	ldr	r2, [pc, #132]	; (800224c <HAL_ADC_ConfigChannel+0x238>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d109      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x1cc>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b12      	cmp	r3, #18
 80021d2:	d105      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a19      	ldr	r2, [pc, #100]	; (800224c <HAL_ADC_ConfigChannel+0x238>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d123      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x21e>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d003      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x1e6>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b11      	cmp	r3, #17
 80021f8:	d11b      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b10      	cmp	r3, #16
 800220c:	d111      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_ADC_ConfigChannel+0x23c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_ADC_ConfigChannel+0x240>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	0c9a      	lsrs	r2, r3, #18
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002224:	e002      	b.n	800222c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3b01      	subs	r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f9      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40012300 	.word	0x40012300
 800224c:	40012000 	.word	0x40012000
 8002250:	20000000 	.word	0x20000000
 8002254:	431bde83 	.word	0x431bde83

08002258 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002260:	4b79      	ldr	r3, [pc, #484]	; (8002448 <ADC_Init+0x1f0>)
 8002262:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800228c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	021a      	lsls	r2, r3, #8
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	430a      	orrs	r2, r1
 80022a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6899      	ldr	r1, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	4a58      	ldr	r2, [pc, #352]	; (800244c <ADC_Init+0x1f4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d022      	beq.n	8002336 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6899      	ldr	r1, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	e00f      	b.n	8002356 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002354:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0202 	bic.w	r2, r2, #2
 8002364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6899      	ldr	r1, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7e1b      	ldrb	r3, [r3, #24]
 8002370:	005a      	lsls	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01b      	beq.n	80023bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002392:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	3b01      	subs	r3, #1
 80023b0:	035a      	lsls	r2, r3, #13
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	e007      	b.n	80023cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	051a      	lsls	r2, r3, #20
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800240e:	025a      	lsls	r2, r3, #9
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	430a      	orrs	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002426:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6899      	ldr	r1, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	029a      	lsls	r2, r3, #10
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
}
 800243c:	bf00      	nop
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40012300 	.word	0x40012300
 800244c:	0f000001 	.word	0x0f000001

08002450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002460:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800246c:	4013      	ands	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800247c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <__NVIC_SetPriorityGrouping+0x44>)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	60d3      	str	r3, [r2, #12]
}
 8002488:	bf00      	nop
 800248a:	3714      	adds	r7, #20
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <__NVIC_GetPriorityGrouping+0x18>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	f003 0307 	and.w	r3, r3, #7
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000ed00 	.word	0xe000ed00

080024b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	db0b      	blt.n	80024de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4907      	ldr	r1, [pc, #28]	; (80024ec <__NVIC_EnableIRQ+0x38>)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	095b      	lsrs	r3, r3, #5
 80024d4:	2001      	movs	r0, #1
 80024d6:	fa00 f202 	lsl.w	r2, r0, r2
 80024da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	; (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025bc:	d301      	bcc.n	80025c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025be:	2301      	movs	r3, #1
 80025c0:	e00f      	b.n	80025e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <SysTick_Config+0x40>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ca:	210f      	movs	r1, #15
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f7ff ff8e 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <SysTick_Config+0x40>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025da:	4b04      	ldr	r3, [pc, #16]	; (80025ec <SysTick_Config+0x40>)
 80025dc:	2207      	movs	r2, #7
 80025de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff29 	bl	8002450 <__NVIC_SetPriorityGrouping>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002606:	b580      	push	{r7, lr}
 8002608:	b086      	sub	sp, #24
 800260a:	af00      	add	r7, sp, #0
 800260c:	4603      	mov	r3, r0
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002618:	f7ff ff3e 	bl	8002498 <__NVIC_GetPriorityGrouping>
 800261c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	6978      	ldr	r0, [r7, #20]
 8002624:	f7ff ff8e 	bl	8002544 <NVIC_EncodePriority>
 8002628:	4602      	mov	r2, r0
 800262a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff5d 	bl	80024f0 <__NVIC_SetPriority>
}
 8002636:	bf00      	nop
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff31 	bl	80024b4 <__NVIC_EnableIRQ>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff ffa2 	bl	80025ac <SysTick_Config>
 8002668:	4603      	mov	r3, r0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e16b      	b.n	8002968 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f040 815a 	bne.w	8002962 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d00b      	beq.n	80026ce <HAL_GPIO_Init+0x5a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c2:	2b11      	cmp	r3, #17
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d130      	bne.n	8002730 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	2203      	movs	r2, #3
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 0201 	and.w	r2, r3, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0xfc>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b12      	cmp	r3, #18
 800276e:	d123      	bne.n	80027b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80b4 	beq.w	8002962 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b60      	ldr	r3, [pc, #384]	; (8002980 <HAL_GPIO_Init+0x30c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a5f      	ldr	r2, [pc, #380]	; (8002980 <HAL_GPIO_Init+0x30c>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <HAL_GPIO_Init+0x30c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002816:	4a5b      	ldr	r2, [pc, #364]	; (8002984 <HAL_GPIO_Init+0x310>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a52      	ldr	r2, [pc, #328]	; (8002988 <HAL_GPIO_Init+0x314>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02b      	beq.n	800289a <HAL_GPIO_Init+0x226>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a51      	ldr	r2, [pc, #324]	; (800298c <HAL_GPIO_Init+0x318>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d025      	beq.n	8002896 <HAL_GPIO_Init+0x222>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a50      	ldr	r2, [pc, #320]	; (8002990 <HAL_GPIO_Init+0x31c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01f      	beq.n	8002892 <HAL_GPIO_Init+0x21e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4f      	ldr	r2, [pc, #316]	; (8002994 <HAL_GPIO_Init+0x320>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0x21a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4e      	ldr	r2, [pc, #312]	; (8002998 <HAL_GPIO_Init+0x324>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x216>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4d      	ldr	r2, [pc, #308]	; (800299c <HAL_GPIO_Init+0x328>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x212>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4c      	ldr	r2, [pc, #304]	; (80029a0 <HAL_GPIO_Init+0x32c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4b      	ldr	r2, [pc, #300]	; (80029a4 <HAL_GPIO_Init+0x330>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x20a>
 800287a:	2307      	movs	r3, #7
 800287c:	e00e      	b.n	800289c <HAL_GPIO_Init+0x228>
 800287e:	2308      	movs	r3, #8
 8002880:	e00c      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002882:	2306      	movs	r3, #6
 8002884:	e00a      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002886:	2305      	movs	r3, #5
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288a:	2304      	movs	r3, #4
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x228>
 800289a:	2300      	movs	r3, #0
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ac:	4935      	ldr	r1, [pc, #212]	; (8002984 <HAL_GPIO_Init+0x310>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ba:	4b3b      	ldr	r3, [pc, #236]	; (80029a8 <HAL_GPIO_Init+0x334>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028de:	4a32      	ldr	r2, [pc, #200]	; (80029a8 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028e4:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <HAL_GPIO_Init+0x334>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002908:	4a27      	ldr	r2, [pc, #156]	; (80029a8 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800290e:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <HAL_GPIO_Init+0x334>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002932:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <HAL_GPIO_Init+0x334>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <HAL_GPIO_Init+0x334>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800295c:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <HAL_GPIO_Init+0x334>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	f67f ae90 	bls.w	8002690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	; 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40013800 	.word	0x40013800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40021400 	.word	0x40021400
 80029a0:	40021800 	.word	0x40021800
 80029a4:	40021c00 	.word	0x40021c00
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	807b      	strh	r3, [r7, #2]
 80029b8:	4613      	mov	r3, r2
 80029ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029bc:	787b      	ldrb	r3, [r7, #1]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029c8:	e003      	b.n	80029d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ca:	887b      	ldrh	r3, [r7, #2]
 80029cc:	041a      	lsls	r2, r3, #16
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	619a      	str	r2, [r3, #24]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80029de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e0:	b08f      	sub	sp, #60	; 0x3c
 80029e2:	af0a      	add	r7, sp, #40	; 0x28
 80029e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e054      	b.n	8002a9a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f006 fc38 	bl	8009280 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2203      	movs	r2, #3
 8002a14:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d102      	bne.n	8002a2a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fdfa 	bl	8006628 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	687e      	ldr	r6, [r7, #4]
 8002a3c:	466d      	mov	r5, sp
 8002a3e:	f106 0410 	add.w	r4, r6, #16
 8002a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a52:	1d33      	adds	r3, r6, #4
 8002a54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a56:	6838      	ldr	r0, [r7, #0]
 8002a58:	f003 fd74 	bl	8006544 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 fdf1 	bl	800664a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	603b      	str	r3, [r7, #0]
 8002a6e:	687e      	ldr	r6, [r7, #4]
 8002a70:	466d      	mov	r5, sp
 8002a72:	f106 0410 	add.w	r4, r6, #16
 8002a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a82:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a86:	1d33      	adds	r3, r6, #4
 8002a88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8a:	6838      	ldr	r0, [r7, #0]
 8002a8c:	f003 ff04 	bl	8006898 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aa2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002aa2:	b590      	push	{r4, r7, lr}
 8002aa4:	b089      	sub	sp, #36	; 0x24
 8002aa6:	af04      	add	r7, sp, #16
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	4608      	mov	r0, r1
 8002aac:	4611      	mov	r1, r2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	70fb      	strb	r3, [r7, #3]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	70bb      	strb	r3, [r7, #2]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_HCD_HC_Init+0x28>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e07f      	b.n	8002bca <HAL_HCD_HC_Init+0x128>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	333d      	adds	r3, #61	; 0x3d
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	3338      	adds	r3, #56	; 0x38
 8002af6:	787a      	ldrb	r2, [r7, #1]
 8002af8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3340      	adds	r3, #64	; 0x40
 8002b0a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b0c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3339      	adds	r3, #57	; 0x39
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002b22:	78fa      	ldrb	r2, [r7, #3]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	333f      	adds	r3, #63	; 0x3f
 8002b32:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002b38:	78fa      	ldrb	r2, [r7, #3]
 8002b3a:	78bb      	ldrb	r3, [r7, #2]
 8002b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b40:	b2d8      	uxtb	r0, r3
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	333a      	adds	r3, #58	; 0x3a
 8002b50:	4602      	mov	r2, r0
 8002b52:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002b54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	da0a      	bge.n	8002b72 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	333b      	adds	r3, #59	; 0x3b
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
 8002b70:	e009      	b.n	8002b86 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	440b      	add	r3, r1
 8002b80:	333b      	adds	r3, #59	; 0x3b
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	333c      	adds	r3, #60	; 0x3c
 8002b96:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b9a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	787c      	ldrb	r4, [r7, #1]
 8002ba2:	78ba      	ldrb	r2, [r7, #2]
 8002ba4:	78f9      	ldrb	r1, [r7, #3]
 8002ba6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ba8:	9302      	str	r3, [sp, #8]
 8002baa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002bae:	9301      	str	r3, [sp, #4]
 8002bb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	4623      	mov	r3, r4
 8002bb8:	f003 fff0 	bl	8006b9c <USB_HC_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd90      	pop	{r4, r7, pc}

08002bd2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_HCD_HC_Halt+0x1e>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e00f      	b.n	8002c10 <HAL_HCD_HC_Halt+0x3e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 fa2a 	bl	800705a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	70fb      	strb	r3, [r7, #3]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	70bb      	strb	r3, [r7, #2]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	333b      	adds	r3, #59	; 0x3b
 8002c42:	78ba      	ldrb	r2, [r7, #2]
 8002c44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	333f      	adds	r3, #63	; 0x3f
 8002c56:	787a      	ldrb	r2, [r7, #1]
 8002c58:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002c5a:	7c3b      	ldrb	r3, [r7, #16]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d114      	bne.n	8002c8a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3342      	adds	r3, #66	; 0x42
 8002c70:	2203      	movs	r2, #3
 8002c72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	333d      	adds	r3, #61	; 0x3d
 8002c84:	7f3a      	ldrb	r2, [r7, #28]
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e009      	b.n	8002c9e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	3342      	adds	r3, #66	; 0x42
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c9e:	787b      	ldrb	r3, [r7, #1]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	f200 80d6 	bhi.w	8002e52 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002ca6:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cac:	08002cbd 	.word	0x08002cbd
 8002cb0:	08002e3d 	.word	0x08002e3d
 8002cb4:	08002d29 	.word	0x08002d29
 8002cb8:	08002db3 	.word	0x08002db3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002cbc:	7c3b      	ldrb	r3, [r7, #16]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	f040 80c9 	bne.w	8002e56 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002cc4:	78bb      	ldrb	r3, [r7, #2]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 80c5 	bne.w	8002e56 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002ccc:	8b3b      	ldrh	r3, [r7, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	440b      	add	r3, r1
 8002ce0:	3351      	adds	r3, #81	; 0x51
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3351      	adds	r3, #81	; 0x51
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3342      	adds	r3, #66	; 0x42
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d10:	e0a1      	b.n	8002e56 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3342      	adds	r3, #66	; 0x42
 8002d22:	2202      	movs	r2, #2
 8002d24:	701a      	strb	r2, [r3, #0]
      break;
 8002d26:	e096      	b.n	8002e56 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002d28:	78bb      	ldrb	r3, [r7, #2]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d120      	bne.n	8002d70 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3351      	adds	r3, #81	; 0x51
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d10a      	bne.n	8002d5a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	440b      	add	r3, r1
 8002d52:	3342      	adds	r3, #66	; 0x42
 8002d54:	2200      	movs	r2, #0
 8002d56:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002d58:	e07e      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	440b      	add	r3, r1
 8002d68:	3342      	adds	r3, #66	; 0x42
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	701a      	strb	r2, [r3, #0]
      break;
 8002d6e:	e073      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3350      	adds	r3, #80	; 0x50
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	440b      	add	r3, r1
 8002d94:	3342      	adds	r3, #66	; 0x42
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
      break;
 8002d9a:	e05d      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	3342      	adds	r3, #66	; 0x42
 8002dac:	2202      	movs	r2, #2
 8002dae:	701a      	strb	r2, [r3, #0]
      break;
 8002db0:	e052      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002db2:	78bb      	ldrb	r3, [r7, #2]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d120      	bne.n	8002dfa <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3351      	adds	r3, #81	; 0x51
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	3342      	adds	r3, #66	; 0x42
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002de2:	e039      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	3342      	adds	r3, #66	; 0x42
 8002df4:	2202      	movs	r2, #2
 8002df6:	701a      	strb	r2, [r3, #0]
      break;
 8002df8:	e02e      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	3350      	adds	r3, #80	; 0x50
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	4413      	add	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3342      	adds	r3, #66	; 0x42
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
      break;
 8002e24:	e018      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	3342      	adds	r3, #66	; 0x42
 8002e36:	2202      	movs	r2, #2
 8002e38:	701a      	strb	r2, [r3, #0]
      break;
 8002e3a:	e00d      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	440b      	add	r3, r1
 8002e4a:	3342      	adds	r3, #66	; 0x42
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
      break;
 8002e50:	e002      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002e56:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	440b      	add	r3, r1
 8002e66:	3344      	adds	r3, #68	; 0x44
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	8b39      	ldrh	r1, [r7, #24]
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4403      	add	r3, r0
 8002e7c:	3348      	adds	r3, #72	; 0x48
 8002e7e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	335c      	adds	r3, #92	; 0x5c
 8002e90:	2200      	movs	r2, #0
 8002e92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	334c      	adds	r3, #76	; 0x4c
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3339      	adds	r3, #57	; 0x39
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ebc:	78fa      	ldrb	r2, [r7, #3]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	335d      	adds	r3, #93	; 0x5d
 8002ecc:	2200      	movs	r2, #0
 8002ece:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6818      	ldr	r0, [r3, #0]
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	3338      	adds	r3, #56	; 0x38
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	18d1      	adds	r1, r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	f003 ff60 	bl	8006db0 <USB_HC_StartXfer>
 8002ef0:	4603      	mov	r3, r0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop

08002efc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 fc7d 	bl	8006812 <USB_GetMode>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	f040 80ef 	bne.w	80030fe <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f003 fc61 	bl	80067ec <USB_ReadInterrupts>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80e5 	beq.w	80030fc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fc58 	bl	80067ec <USB_ReadInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f46:	d104      	bne.n	8002f52 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 fc48 	bl	80067ec <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f66:	d104      	bne.n	8002f72 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 fc38 	bl	80067ec <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f86:	d104      	bne.n	8002f92 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fc28 	bl	80067ec <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d103      	bne.n	8002fae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2202      	movs	r2, #2
 8002fac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fc1a 	bl	80067ec <USB_ReadInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc2:	d115      	bne.n	8002ff0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002fcc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d108      	bne.n	8002ff0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f006 f9cc 	bl	800937c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f003 fd10 	bl	8006a10 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f003 fbf9 	bl	80067ec <USB_ReadInterrupts>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003000:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003004:	d102      	bne.n	800300c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f001 f968 	bl	80042dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f003 fbeb 	bl	80067ec <USB_ReadInterrupts>
 8003016:	4603      	mov	r3, r0
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b08      	cmp	r3, #8
 800301e:	d106      	bne.n	800302e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f006 f98f 	bl	8009344 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2208      	movs	r2, #8
 800302c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f003 fbda 	bl	80067ec <USB_ReadInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003042:	d138      	bne.n	80030b6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fff5 	bl	8007038 <USB_HC_ReadInterrupt>
 800304e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	e025      	b.n	80030a2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d018      	beq.n	800309c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003080:	d106      	bne.n	8003090 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	4619      	mov	r1, r3
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f8cf 	bl	800322c <HCD_HC_IN_IRQHandler>
 800308e:	e005      	b.n	800309c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	4619      	mov	r1, r3
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fcfd 	bl	8003a96 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	3301      	adds	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d3d4      	bcc.n	8003056 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 fb96 	bl	80067ec <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d101      	bne.n	80030ce <HAL_HCD_IRQHandler+0x1d2>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_HCD_IRQHandler+0x1d4>
 80030ce:	2300      	movs	r3, #0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d014      	beq.n	80030fe <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	699a      	ldr	r2, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0210 	bic.w	r2, r2, #16
 80030e2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f001 f84b 	bl	8004180 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0210 	orr.w	r2, r2, #16
 80030f8:	619a      	str	r2, [r3, #24]
 80030fa:	e000      	b.n	80030fe <HAL_HCD_IRQHandler+0x202>
      return;
 80030fc:	bf00      	nop
    }
  }
}
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_HCD_Start+0x16>
 8003116:	2302      	movs	r3, #2
 8003118:	e013      	b.n	8003142 <HAL_HCD_Start+0x3e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fa6d 	bl	8006606 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	4618      	mov	r0, r3
 8003134:	f003 fcd0 	bl	8006ad8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b082      	sub	sp, #8
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_HCD_Stop+0x16>
 800315c:	2302      	movs	r3, #2
 800315e:	e00d      	b.n	800317c <HAL_HCD_Stop+0x32>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f004 f8af 	bl	80072d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f003 fc77 	bl	8006a84 <USB_ResetPort>
 8003196:	4603      	mov	r3, r0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	440b      	add	r3, r1
 80031ba:	335c      	adds	r3, #92	; 0x5c
 80031bc:	781b      	ldrb	r3, [r3, #0]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
 80031d2:	460b      	mov	r3, r1
 80031d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	440b      	add	r3, r1
 80031e4:	334c      	adds	r3, #76	; 0x4c
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f003 fcb9 	bl	8006b78 <USB_GetCurrentFrame>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f003 fc94 	bl	8006b4a <USB_GetHostSpeed>
 8003222:	4603      	mov	r3, r0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4413      	add	r3, r2
 800324e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d119      	bne.n	8003290 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4413      	add	r3, r2
 8003264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003268:	461a      	mov	r2, r3
 800326a:	2304      	movs	r3, #4
 800326c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	0151      	lsls	r1, r2, #5
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	440a      	add	r2, r1
 8003284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003288:	f043 0302 	orr.w	r3, r3, #2
 800328c:	60d3      	str	r3, [r2, #12]
 800328e:	e0ce      	b.n	800342e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a6:	d12c      	bne.n	8003302 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b4:	461a      	mov	r2, r3
 80032b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	335d      	adds	r3, #93	; 0x5d
 80032cc:	2207      	movs	r2, #7
 80032ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	0151      	lsls	r1, r2, #5
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	440a      	add	r2, r1
 80032e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032ea:	f043 0302 	orr.w	r3, r3, #2
 80032ee:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 fead 	bl	800705a <USB_HC_Halt>
 8003300:	e095      	b.n	800342e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b20      	cmp	r3, #32
 8003316:	d109      	bne.n	800332c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003324:	461a      	mov	r2, r3
 8003326:	2320      	movs	r3, #32
 8003328:	6093      	str	r3, [r2, #8]
 800332a:	e080      	b.n	800342e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b08      	cmp	r3, #8
 8003340:	d134      	bne.n	80033ac <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	4413      	add	r3, r2
 800334a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	0151      	lsls	r1, r2, #5
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	440a      	add	r2, r1
 8003358:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	335d      	adds	r3, #93	; 0x5d
 8003372:	2205      	movs	r2, #5
 8003374:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003382:	461a      	mov	r2, r3
 8003384:	2310      	movs	r3, #16
 8003386:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4413      	add	r3, r2
 8003390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003394:	461a      	mov	r2, r3
 8003396:	2308      	movs	r3, #8
 8003398:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 fe58 	bl	800705a <USB_HC_Halt>
 80033aa:	e040      	b.n	800342e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d134      	bne.n	800342e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	0151      	lsls	r1, r2, #5
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	440a      	add	r2, r1
 80033da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f003 fe33 	bl	800705a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	461a      	mov	r2, r3
 8003402:	2310      	movs	r3, #16
 8003404:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	440b      	add	r3, r1
 8003414:	335d      	adds	r3, #93	; 0x5d
 8003416:	2208      	movs	r2, #8
 8003418:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	461a      	mov	r2, r3
 8003428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003444:	d122      	bne.n	800348c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	0151      	lsls	r1, r2, #5
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	440a      	add	r2, r1
 800345c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f003 fdf2 	bl	800705a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	461a      	mov	r2, r3
 8003484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003488:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800348a:	e300      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	f040 80fd 	bne.w	800369e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	440b      	add	r3, r1
 80034ba:	3348      	adds	r3, #72	; 0x48
 80034bc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	0159      	lsls	r1, r3, #5
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	440b      	add	r3, r1
 80034c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80034d0:	1ad1      	subs	r1, r2, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4403      	add	r3, r0
 80034e0:	334c      	adds	r3, #76	; 0x4c
 80034e2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	440b      	add	r3, r1
 80034f2:	335d      	adds	r3, #93	; 0x5d
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	3358      	adds	r3, #88	; 0x58
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	461a      	mov	r2, r3
 800351a:	2301      	movs	r3, #1
 800351c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	440b      	add	r3, r1
 800352c:	333f      	adds	r3, #63	; 0x3f
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	440b      	add	r3, r1
 8003542:	333f      	adds	r3, #63	; 0x3f
 8003544:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003546:	2b02      	cmp	r3, #2
 8003548:	d121      	bne.n	800358e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	0151      	lsls	r1, r2, #5
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	440a      	add	r2, r1
 8003560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003564:	f043 0302 	orr.w	r3, r3, #2
 8003568:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f003 fd70 	bl	800705a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4413      	add	r3, r2
 8003582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003586:	461a      	mov	r2, r3
 8003588:	2310      	movs	r3, #16
 800358a:	6093      	str	r3, [r2, #8]
 800358c:	e070      	b.n	8003670 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	333f      	adds	r3, #63	; 0x3f
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d12a      	bne.n	80035fa <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	0151      	lsls	r1, r2, #5
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	440a      	add	r2, r1
 80035ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	335c      	adds	r3, #92	; 0x5c
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	b2d8      	uxtb	r0, r3
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	440b      	add	r3, r1
 80035ea:	335c      	adds	r3, #92	; 0x5c
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4601      	mov	r1, r0
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f005 fed0 	bl	8009398 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035f8:	e03a      	b.n	8003670 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	440b      	add	r3, r1
 8003608:	333f      	adds	r3, #63	; 0x3f
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d12f      	bne.n	8003670 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	440b      	add	r3, r1
 800361e:	335c      	adds	r3, #92	; 0x5c
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4613      	mov	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	440b      	add	r3, r1
 8003632:	3350      	adds	r3, #80	; 0x50
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	f083 0301 	eor.w	r3, r3, #1
 800363a:	b2d8      	uxtb	r0, r3
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	3350      	adds	r3, #80	; 0x50
 800364c:	4602      	mov	r2, r0
 800364e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	b2d8      	uxtb	r0, r3
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	335c      	adds	r3, #92	; 0x5c
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4601      	mov	r1, r0
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f005 fe94 	bl	8009398 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	3350      	adds	r3, #80	; 0x50
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	f083 0301 	eor.w	r3, r3, #1
 8003686:	b2d8      	uxtb	r0, r3
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	440b      	add	r3, r1
 8003696:	3350      	adds	r3, #80	; 0x50
 8003698:	4602      	mov	r2, r0
 800369a:	701a      	strb	r2, [r3, #0]
}
 800369c:	e1f7      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	f040 811a 	bne.w	80038ea <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d0:	f023 0302 	bic.w	r3, r3, #2
 80036d4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	440b      	add	r3, r1
 80036e4:	335d      	adds	r3, #93	; 0x5d
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10a      	bne.n	8003702 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	440b      	add	r3, r1
 80036fa:	335c      	adds	r3, #92	; 0x5c
 80036fc:	2201      	movs	r2, #1
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e0d9      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	335d      	adds	r3, #93	; 0x5d
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d10a      	bne.n	800372e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	335c      	adds	r3, #92	; 0x5c
 8003728:	2205      	movs	r2, #5
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e0c3      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	440b      	add	r3, r1
 800373c:	335d      	adds	r3, #93	; 0x5d
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b06      	cmp	r3, #6
 8003742:	d00a      	beq.n	800375a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	440b      	add	r3, r1
 8003752:	335d      	adds	r3, #93	; 0x5d
 8003754:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003756:	2b08      	cmp	r3, #8
 8003758:	d156      	bne.n	8003808 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	440b      	add	r3, r1
 8003768:	3358      	adds	r3, #88	; 0x58
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	1c59      	adds	r1, r3, #1
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4403      	add	r3, r0
 800377c:	3358      	adds	r3, #88	; 0x58
 800377e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	440b      	add	r3, r1
 800378e:	3358      	adds	r3, #88	; 0x58
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b03      	cmp	r3, #3
 8003794:	d914      	bls.n	80037c0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	440b      	add	r3, r1
 80037a4:	3358      	adds	r3, #88	; 0x58
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	440b      	add	r3, r1
 80037b8:	335c      	adds	r3, #92	; 0x5c
 80037ba:	2204      	movs	r2, #4
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e009      	b.n	80037d4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	335c      	adds	r3, #92	; 0x5c
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	461a      	mov	r2, r3
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e056      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	440b      	add	r3, r1
 8003816:	335d      	adds	r3, #93	; 0x5d
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2b03      	cmp	r3, #3
 800381c:	d123      	bne.n	8003866 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	440b      	add	r3, r1
 800382c:	335c      	adds	r3, #92	; 0x5c
 800382e:	2202      	movs	r2, #2
 8003830:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4413      	add	r3, r2
 800383a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003848:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003850:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	e027      	b.n	80038b6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	335d      	adds	r3, #93	; 0x5d
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b07      	cmp	r3, #7
 800387a:	d11c      	bne.n	80038b6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	440b      	add	r3, r1
 800388a:	3358      	adds	r3, #88	; 0x58
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	1c59      	adds	r1, r3, #1
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4403      	add	r3, r0
 800389e:	3358      	adds	r3, #88	; 0x58
 80038a0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	335c      	adds	r3, #92	; 0x5c
 80038b2:	2204      	movs	r2, #4
 80038b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	015a      	lsls	r2, r3, #5
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	4413      	add	r3, r2
 80038be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c2:	461a      	mov	r2, r3
 80038c4:	2302      	movs	r3, #2
 80038c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	b2d8      	uxtb	r0, r3
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	335c      	adds	r3, #92	; 0x5c
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	4601      	mov	r1, r0
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f005 fd58 	bl	8009398 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038e8:	e0d1      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d13e      	bne.n	800397e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	440a      	add	r2, r1
 8003916:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	440b      	add	r3, r1
 800392e:	3358      	adds	r3, #88	; 0x58
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	1c59      	adds	r1, r3, #1
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4403      	add	r3, r0
 8003942:	3358      	adds	r3, #88	; 0x58
 8003944:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	440b      	add	r3, r1
 8003954:	335d      	adds	r3, #93	; 0x5d
 8003956:	2206      	movs	r2, #6
 8003958:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f003 fb78 	bl	800705a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4413      	add	r3, r2
 8003972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003976:	461a      	mov	r2, r3
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	6093      	str	r3, [r2, #8]
}
 800397c:	e087      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4413      	add	r3, r2
 8003986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b10      	cmp	r3, #16
 8003992:	d17c      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4613      	mov	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	440b      	add	r3, r1
 80039a2:	333f      	adds	r3, #63	; 0x3f
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d122      	bne.n	80039f0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	3358      	adds	r3, #88	; 0x58
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	0151      	lsls	r1, r2, #5
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	440a      	add	r2, r1
 80039d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f003 fb36 	bl	800705a <USB_HC_Halt>
 80039ee:	e045      	b.n	8003a7c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	440b      	add	r3, r1
 80039fe:	333f      	adds	r3, #63	; 0x3f
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	440b      	add	r3, r1
 8003a14:	333f      	adds	r3, #63	; 0x3f
 8003a16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d12f      	bne.n	8003a7c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	440b      	add	r3, r1
 8003a2a:	3358      	adds	r3, #88	; 0x58
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d121      	bne.n	8003a7c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	335d      	adds	r3, #93	; 0x5d
 8003a48:	2203      	movs	r2, #3
 8003a4a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	0151      	lsls	r1, r2, #5
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	440a      	add	r2, r1
 8003a62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a66:	f043 0302 	orr.w	r3, r3, #2
 8003a6a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 faef 	bl	800705a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2310      	movs	r3, #16
 8003a8c:	6093      	str	r3, [r2, #8]
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d119      	bne.n	8003afa <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003af8:	e33e      	b.n	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d141      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2320      	movs	r3, #32
 8003b20:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	333d      	adds	r3, #61	; 0x3d
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	f040 831f 	bne.w	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	440b      	add	r3, r1
 8003b48:	333d      	adds	r3, #61	; 0x3d
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	440b      	add	r3, r1
 8003b5c:	335c      	adds	r3, #92	; 0x5c
 8003b5e:	2202      	movs	r2, #2
 8003b60:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f003 fa64 	bl	800705a <USB_HC_Halt>
}
 8003b92:	e2f1      	b.n	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d13f      	bne.n	8003c2a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	440b      	add	r3, r1
 8003bb8:	335d      	adds	r3, #93	; 0x5d
 8003bba:	2204      	movs	r2, #4
 8003bbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	440b      	add	r3, r1
 8003bcc:	333d      	adds	r3, #61	; 0x3d
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	440b      	add	r3, r1
 8003be0:	3358      	adds	r3, #88	; 0x58
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	0151      	lsls	r1, r2, #5
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	440a      	add	r2, r1
 8003bfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f003 fa22 	bl	800705a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c22:	461a      	mov	r2, r3
 8003c24:	2340      	movs	r3, #64	; 0x40
 8003c26:	6093      	str	r3, [r2, #8]
}
 8003c28:	e2a6      	b.n	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c40:	d122      	bne.n	8003c88 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	0151      	lsls	r1, r2, #5
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	440a      	add	r2, r1
 8003c58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f003 f9f4 	bl	800705a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c84:	6093      	str	r3, [r2, #8]
}
 8003c86:	e277      	b.n	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d135      	bne.n	8003d0a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	3358      	adds	r3, #88	; 0x58
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	b2d2      	uxtb	r2, r2
 8003cda:	4611      	mov	r1, r2
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f003 f9bc 	bl	800705a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	440b      	add	r3, r1
 8003d02:	335d      	adds	r3, #93	; 0x5d
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
}
 8003d08:	e236      	b.n	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d12b      	bne.n	8003d78 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	2308      	movs	r3, #8
 8003d30:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 f97c 	bl	800705a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	440b      	add	r3, r1
 8003d70:	335d      	adds	r3, #93	; 0x5d
 8003d72:	2205      	movs	r2, #5
 8003d74:	701a      	strb	r2, [r3, #0]
}
 8003d76:	e1ff      	b.n	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	015a      	lsls	r2, r3, #5
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4413      	add	r3, r2
 8003d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b10      	cmp	r3, #16
 8003d8c:	d155      	bne.n	8003e3a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3358      	adds	r3, #88	; 0x58
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	440b      	add	r3, r1
 8003db0:	335d      	adds	r3, #93	; 0x5d
 8003db2:	2203      	movs	r2, #3
 8003db4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	440b      	add	r3, r1
 8003dc4:	333d      	adds	r3, #61	; 0x3d
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d114      	bne.n	8003df6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	440b      	add	r3, r1
 8003dda:	333c      	adds	r3, #60	; 0x3c
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d109      	bne.n	8003df6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	440b      	add	r3, r1
 8003df0:	333d      	adds	r3, #61	; 0x3d
 8003df2:	2201      	movs	r2, #1
 8003df4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e10:	f043 0302 	orr.w	r3, r3, #2
 8003e14:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	b2d2      	uxtb	r2, r2
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f003 f91a 	bl	800705a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	461a      	mov	r2, r3
 8003e34:	2310      	movs	r3, #16
 8003e36:	6093      	str	r3, [r2, #8]
}
 8003e38:	e19e      	b.n	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d12b      	bne.n	8003ea8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	0151      	lsls	r1, r2, #5
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	440a      	add	r2, r1
 8003e66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e6a:	f043 0302 	orr.w	r3, r3, #2
 8003e6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f003 f8ed 	bl	800705a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	335d      	adds	r3, #93	; 0x5d
 8003e90:	2206      	movs	r2, #6
 8003e92:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	6093      	str	r3, [r2, #8]
}
 8003ea6:	e167      	b.n	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebe:	d135      	bne.n	8003f2c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003eda:	f043 0302 	orr.w	r3, r3, #2
 8003ede:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 f8b5 	bl	800705a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efc:	461a      	mov	r2, r3
 8003efe:	2310      	movs	r3, #16
 8003f00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	335d      	adds	r3, #93	; 0x5d
 8003f26:	2208      	movs	r2, #8
 8003f28:	701a      	strb	r2, [r3, #0]
}
 8003f2a:	e125      	b.n	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	f040 811a 	bne.w	8004178 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	0151      	lsls	r1, r2, #5
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	440a      	add	r2, r1
 8003f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f5e:	f023 0302 	bic.w	r3, r3, #2
 8003f62:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	440b      	add	r3, r1
 8003f72:	335d      	adds	r3, #93	; 0x5d
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d137      	bne.n	8003fea <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	335c      	adds	r3, #92	; 0x5c
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	333f      	adds	r3, #63	; 0x3f
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d00b      	beq.n	8003fbc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	333f      	adds	r3, #63	; 0x3f
 8003fb4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	f040 80c5 	bne.w	8004146 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003fbc:	6879      	ldr	r1, [r7, #4]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	440b      	add	r3, r1
 8003fca:	3351      	adds	r3, #81	; 0x51
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	f083 0301 	eor.w	r3, r3, #1
 8003fd2:	b2d8      	uxtb	r0, r3
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	440b      	add	r3, r1
 8003fe2:	3351      	adds	r3, #81	; 0x51
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e0ad      	b.n	8004146 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	00db      	lsls	r3, r3, #3
 8003ff6:	440b      	add	r3, r1
 8003ff8:	335d      	adds	r3, #93	; 0x5d
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d10a      	bne.n	8004016 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004000:	6879      	ldr	r1, [r7, #4]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	335c      	adds	r3, #92	; 0x5c
 8004010:	2202      	movs	r2, #2
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e097      	b.n	8004146 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4613      	mov	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	440b      	add	r3, r1
 8004024:	335d      	adds	r3, #93	; 0x5d
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b04      	cmp	r3, #4
 800402a:	d10a      	bne.n	8004042 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	440b      	add	r3, r1
 800403a:	335c      	adds	r3, #92	; 0x5c
 800403c:	2202      	movs	r2, #2
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e081      	b.n	8004146 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	00db      	lsls	r3, r3, #3
 800404e:	440b      	add	r3, r1
 8004050:	335d      	adds	r3, #93	; 0x5d
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b05      	cmp	r3, #5
 8004056:	d10a      	bne.n	800406e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	335c      	adds	r3, #92	; 0x5c
 8004068:	2205      	movs	r2, #5
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e06b      	b.n	8004146 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	440b      	add	r3, r1
 800407c:	335d      	adds	r3, #93	; 0x5d
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b06      	cmp	r3, #6
 8004082:	d00a      	beq.n	800409a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	440b      	add	r3, r1
 8004092:	335d      	adds	r3, #93	; 0x5d
 8004094:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004096:	2b08      	cmp	r3, #8
 8004098:	d155      	bne.n	8004146 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	4613      	mov	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	440b      	add	r3, r1
 80040a8:	3358      	adds	r3, #88	; 0x58
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	1c59      	adds	r1, r3, #1
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4403      	add	r3, r0
 80040bc:	3358      	adds	r3, #88	; 0x58
 80040be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	440b      	add	r3, r1
 80040ce:	3358      	adds	r3, #88	; 0x58
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d914      	bls.n	8004100 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4613      	mov	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	440b      	add	r3, r1
 80040e4:	3358      	adds	r3, #88	; 0x58
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	440b      	add	r3, r1
 80040f8:	335c      	adds	r3, #92	; 0x5c
 80040fa:	2204      	movs	r2, #4
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e009      	b.n	8004114 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	440b      	add	r3, r1
 800410e:	335c      	adds	r3, #92	; 0x5c
 8004110:	2202      	movs	r2, #2
 8004112:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800412a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004132:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004140:	461a      	mov	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004152:	461a      	mov	r2, r3
 8004154:	2302      	movs	r3, #2
 8004156:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	b2d8      	uxtb	r0, r3
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4613      	mov	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4413      	add	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	440b      	add	r3, r1
 800416a:	335c      	adds	r3, #92	; 0x5c
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	4601      	mov	r1, r0
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f005 f910 	bl	8009398 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004178:	bf00      	nop
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	; 0x28
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	0c5b      	lsrs	r3, r3, #17
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041b4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d004      	beq.n	80041c6 <HCD_RXQLVL_IRQHandler+0x46>
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b05      	cmp	r3, #5
 80041c0:	f000 8082 	beq.w	80042c8 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041c4:	e083      	b.n	80042ce <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d07f      	beq.n	80042cc <HCD_RXQLVL_IRQHandler+0x14c>
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	440b      	add	r3, r1
 80041da:	3344      	adds	r3, #68	; 0x44
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d074      	beq.n	80042cc <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	440b      	add	r3, r1
 80041f4:	3344      	adds	r3, #68	; 0x44
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	b292      	uxth	r2, r2
 80041fc:	4619      	mov	r1, r3
 80041fe:	f002 facc 	bl	800679a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	440b      	add	r3, r1
 8004210:	3344      	adds	r3, #68	; 0x44
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	18d1      	adds	r1, r2, r3
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4403      	add	r3, r0
 8004226:	3344      	adds	r3, #68	; 0x44
 8004228:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	440b      	add	r3, r1
 8004238:	334c      	adds	r3, #76	; 0x4c
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	18d1      	adds	r1, r2, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4403      	add	r3, r0
 800424e:	334c      	adds	r3, #76	; 0x4c
 8004250:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	4413      	add	r3, r2
 800425a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HCD_RXQLVL_IRQHandler+0x158>)
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d031      	beq.n	80042cc <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	4413      	add	r3, r2
 8004270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800427e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004286:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	4413      	add	r3, r2
 8004290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004294:	461a      	mov	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	440b      	add	r3, r1
 80042a8:	3350      	adds	r3, #80	; 0x50
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f083 0301 	eor.w	r3, r3, #1
 80042b0:	b2d8      	uxtb	r0, r3
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	440b      	add	r3, r1
 80042c0:	3350      	adds	r3, #80	; 0x50
 80042c2:	4602      	mov	r2, r0
 80042c4:	701a      	strb	r2, [r3, #0]
      break;
 80042c6:	e001      	b.n	80042cc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80042c8:	bf00      	nop
 80042ca:	e000      	b.n	80042ce <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80042cc:	bf00      	nop
  }
}
 80042ce:	bf00      	nop
 80042d0:	3728      	adds	r7, #40	; 0x28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	1ff80000 	.word	0x1ff80000

080042dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004308:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b02      	cmp	r3, #2
 8004312:	d10b      	bne.n	800432c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d102      	bne.n	8004324 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f005 f81e 	bl	8009360 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f043 0302 	orr.w	r3, r3, #2
 800432a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b08      	cmp	r3, #8
 8004334:	d132      	bne.n	800439c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f043 0308 	orr.w	r3, r3, #8
 800433c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d126      	bne.n	8004396 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d113      	bne.n	8004378 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004356:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800435a:	d106      	bne.n	800436a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f002 fb54 	bl	8006a10 <USB_InitFSLSPClkSel>
 8004368:	e011      	b.n	800438e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f002 fb4d 	bl	8006a10 <USB_InitFSLSPClkSel>
 8004376:	e00a      	b.n	800438e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004386:	461a      	mov	r2, r3
 8004388:	f64e 2360 	movw	r3, #60000	; 0xea60
 800438c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f005 f810 	bl	80093b4 <HAL_HCD_PortEnabled_Callback>
 8004394:	e002      	b.n	800439c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f005 f81a 	bl	80093d0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d103      	bne.n	80043ae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f043 0320 	orr.w	r3, r3, #32
 80043ac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6013      	str	r3, [r2, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3718      	adds	r7, #24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e12b      	b.n	800462e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd f9f6 	bl	80017dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2224      	movs	r2, #36	; 0x24
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 0201 	bic.w	r2, r2, #1
 8004406:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004426:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004428:	f001 f9f4 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 800442c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	4a81      	ldr	r2, [pc, #516]	; (8004638 <HAL_I2C_Init+0x274>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d807      	bhi.n	8004448 <HAL_I2C_Init+0x84>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a80      	ldr	r2, [pc, #512]	; (800463c <HAL_I2C_Init+0x278>)
 800443c:	4293      	cmp	r3, r2
 800443e:	bf94      	ite	ls
 8004440:	2301      	movls	r3, #1
 8004442:	2300      	movhi	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	e006      	b.n	8004456 <HAL_I2C_Init+0x92>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a7d      	ldr	r2, [pc, #500]	; (8004640 <HAL_I2C_Init+0x27c>)
 800444c:	4293      	cmp	r3, r2
 800444e:	bf94      	ite	ls
 8004450:	2301      	movls	r3, #1
 8004452:	2300      	movhi	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e0e7      	b.n	800462e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a78      	ldr	r2, [pc, #480]	; (8004644 <HAL_I2C_Init+0x280>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	0c9b      	lsrs	r3, r3, #18
 8004468:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a6a      	ldr	r2, [pc, #424]	; (8004638 <HAL_I2C_Init+0x274>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d802      	bhi.n	8004498 <HAL_I2C_Init+0xd4>
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3301      	adds	r3, #1
 8004496:	e009      	b.n	80044ac <HAL_I2C_Init+0xe8>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	4a69      	ldr	r2, [pc, #420]	; (8004648 <HAL_I2C_Init+0x284>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	099b      	lsrs	r3, r3, #6
 80044aa:	3301      	adds	r3, #1
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	495c      	ldr	r1, [pc, #368]	; (8004638 <HAL_I2C_Init+0x274>)
 80044c8:	428b      	cmp	r3, r1
 80044ca:	d819      	bhi.n	8004500 <HAL_I2C_Init+0x13c>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1e59      	subs	r1, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80044da:	1c59      	adds	r1, r3, #1
 80044dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044e0:	400b      	ands	r3, r1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_I2C_Init+0x138>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1e59      	subs	r1, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80044f4:	3301      	adds	r3, #1
 80044f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fa:	e051      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 80044fc:	2304      	movs	r3, #4
 80044fe:	e04f      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d111      	bne.n	800452c <HAL_I2C_Init+0x168>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1e58      	subs	r0, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6859      	ldr	r1, [r3, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	440b      	add	r3, r1
 8004516:	fbb0 f3f3 	udiv	r3, r0, r3
 800451a:	3301      	adds	r3, #1
 800451c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004520:	2b00      	cmp	r3, #0
 8004522:	bf0c      	ite	eq
 8004524:	2301      	moveq	r3, #1
 8004526:	2300      	movne	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e012      	b.n	8004552 <HAL_I2C_Init+0x18e>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	1e58      	subs	r0, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6859      	ldr	r1, [r3, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	0099      	lsls	r1, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004542:	3301      	adds	r3, #1
 8004544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Init+0x196>
 8004556:	2301      	movs	r3, #1
 8004558:	e022      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10e      	bne.n	8004580 <HAL_I2C_Init+0x1bc>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1e58      	subs	r0, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	460b      	mov	r3, r1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	440b      	add	r3, r1
 8004570:	fbb0 f3f3 	udiv	r3, r0, r3
 8004574:	3301      	adds	r3, #1
 8004576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457e:	e00f      	b.n	80045a0 <HAL_I2C_Init+0x1dc>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	1e58      	subs	r0, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6859      	ldr	r1, [r3, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	0099      	lsls	r1, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	fbb0 f3f3 	udiv	r3, r0, r3
 8004596:	3301      	adds	r3, #1
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	6809      	ldr	r1, [r1, #0]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69da      	ldr	r2, [r3, #28]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6911      	ldr	r1, [r2, #16]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	4311      	orrs	r1, r2
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	000186a0 	.word	0x000186a0
 800463c:	001e847f 	.word	0x001e847f
 8004640:	003d08ff 	.word	0x003d08ff
 8004644:	431bde83 	.word	0x431bde83
 8004648:	10624dd3 	.word	0x10624dd3

0800464c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e128      	b.n	80048b0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a90      	ldr	r2, [pc, #576]	; (80048b8 <HAL_I2S_Init+0x26c>)
 8004676:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7fd f8f7 	bl	800186c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2202      	movs	r2, #2
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004694:	f023 030f 	bic.w	r3, r3, #15
 8004698:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2202      	movs	r2, #2
 80046a0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d060      	beq.n	800476c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d102      	bne.n	80046b8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80046b2:	2310      	movs	r3, #16
 80046b4:	617b      	str	r3, [r7, #20]
 80046b6:	e001      	b.n	80046bc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d802      	bhi.n	80046ca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80046ca:	2001      	movs	r0, #1
 80046cc:	f001 f9ac 	bl	8005a28 <HAL_RCCEx_GetPeriphCLKFreq>
 80046d0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046da:	d125      	bne.n	8004728 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d010      	beq.n	8004706 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ee:	4613      	mov	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4413      	add	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	461a      	mov	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	3305      	adds	r3, #5
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	e01f      	b.n	8004746 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	461a      	mov	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004722:	3305      	adds	r3, #5
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	e00e      	b.n	8004746 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	461a      	mov	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	3305      	adds	r3, #5
 8004744:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4a5c      	ldr	r2, [pc, #368]	; (80048bc <HAL_I2S_Init+0x270>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	08db      	lsrs	r3, r3, #3
 8004750:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e003      	b.n	8004774 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800476c:	2302      	movs	r3, #2
 800476e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d902      	bls.n	8004780 <HAL_I2S_Init+0x134>
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2bff      	cmp	r3, #255	; 0xff
 800477e:	d907      	bls.n	8004790 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	f043 0210 	orr.w	r2, r3, #16
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e08f      	b.n	80048b0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	ea42 0103 	orr.w	r1, r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047ae:	f023 030f 	bic.w	r3, r3, #15
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6851      	ldr	r1, [r2, #4]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6892      	ldr	r2, [r2, #8]
 80047ba:	4311      	orrs	r1, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	68d2      	ldr	r2, [r2, #12]
 80047c0:	4311      	orrs	r1, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6992      	ldr	r2, [r2, #24]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	431a      	orrs	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047d2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d161      	bne.n	80048a0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a38      	ldr	r2, [pc, #224]	; (80048c0 <HAL_I2S_Init+0x274>)
 80047e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a37      	ldr	r2, [pc, #220]	; (80048c4 <HAL_I2S_Init+0x278>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <HAL_I2S_Init+0x1a4>
 80047ec:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <HAL_I2S_Init+0x27c>)
 80047ee:	e001      	b.n	80047f4 <HAL_I2S_Init+0x1a8>
 80047f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	4932      	ldr	r1, [pc, #200]	; (80048c4 <HAL_I2S_Init+0x278>)
 80047fc:	428a      	cmp	r2, r1
 80047fe:	d101      	bne.n	8004804 <HAL_I2S_Init+0x1b8>
 8004800:	4a31      	ldr	r2, [pc, #196]	; (80048c8 <HAL_I2S_Init+0x27c>)
 8004802:	e001      	b.n	8004808 <HAL_I2S_Init+0x1bc>
 8004804:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004808:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800480c:	f023 030f 	bic.w	r3, r3, #15
 8004810:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2b      	ldr	r2, [pc, #172]	; (80048c4 <HAL_I2S_Init+0x278>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d101      	bne.n	8004820 <HAL_I2S_Init+0x1d4>
 800481c:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <HAL_I2S_Init+0x27c>)
 800481e:	e001      	b.n	8004824 <HAL_I2S_Init+0x1d8>
 8004820:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004824:	2202      	movs	r2, #2
 8004826:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <HAL_I2S_Init+0x278>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d101      	bne.n	8004836 <HAL_I2S_Init+0x1ea>
 8004832:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <HAL_I2S_Init+0x27c>)
 8004834:	e001      	b.n	800483a <HAL_I2S_Init+0x1ee>
 8004836:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004846:	d003      	beq.n	8004850 <HAL_I2S_Init+0x204>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d103      	bne.n	8004858 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	e001      	b.n	800485c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	b299      	uxth	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004872:	4303      	orrs	r3, r0
 8004874:	b29b      	uxth	r3, r3
 8004876:	430b      	orrs	r3, r1
 8004878:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800487a:	4313      	orrs	r3, r2
 800487c:	b29a      	uxth	r2, r3
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	4313      	orrs	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004888:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <HAL_I2S_Init+0x278>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <HAL_I2S_Init+0x24c>
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_I2S_Init+0x27c>)
 8004896:	e001      	b.n	800489c <HAL_I2S_Init+0x250>
 8004898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800489c:	897a      	ldrh	r2, [r7, #10]
 800489e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3720      	adds	r7, #32
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	080049c3 	.word	0x080049c3
 80048bc:	cccccccd 	.word	0xcccccccd
 80048c0:	08004ad9 	.word	0x08004ad9
 80048c4:	40003800 	.word	0x40003800
 80048c8:	40003400 	.word	0x40003400

080048cc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	881a      	ldrh	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	1c9a      	adds	r2, r3, #2
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10e      	bne.n	800495c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800494c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ffb8 	bl	80048cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800495c:	bf00      	nop
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	b292      	uxth	r2, r2
 8004978:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	1c9a      	adds	r2, r3, #2
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004988:	b29b      	uxth	r3, r3
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10e      	bne.n	80049ba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ff93 	bl	80048e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b086      	sub	sp, #24
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d13a      	bne.n	8004a54 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d109      	bne.n	80049fc <I2S_IRQHandler+0x3a>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b40      	cmp	r3, #64	; 0x40
 80049f4:	d102      	bne.n	80049fc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ffb4 	bl	8004964 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d126      	bne.n	8004a54 <I2S_IRQHandler+0x92>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0320 	and.w	r3, r3, #32
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d11f      	bne.n	8004a54 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a22:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a24:	2300      	movs	r3, #0
 8004a26:	613b      	str	r3, [r7, #16]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	613b      	str	r3, [r7, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a46:	f043 0202 	orr.w	r2, r3, #2
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7ff ff50 	bl	80048f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d136      	bne.n	8004ace <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d109      	bne.n	8004a7e <I2S_IRQHandler+0xbc>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b80      	cmp	r3, #128	; 0x80
 8004a76:	d102      	bne.n	8004a7e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff45 	bl	8004908 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d122      	bne.n	8004ace <I2S_IRQHandler+0x10c>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d11b      	bne.n	8004ace <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004aa4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	f043 0204 	orr.w	r2, r3, #4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff ff13 	bl	80048f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ace:	bf00      	nop
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b088      	sub	sp, #32
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4aa2      	ldr	r2, [pc, #648]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d101      	bne.n	8004af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004af2:	4ba2      	ldr	r3, [pc, #648]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004af4:	e001      	b.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004af6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a9b      	ldr	r2, [pc, #620]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d101      	bne.n	8004b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004b10:	4b9a      	ldr	r3, [pc, #616]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b12:	e001      	b.n	8004b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004b14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b24:	d004      	beq.n	8004b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8099 	bne.w	8004c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d107      	bne.n	8004b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f925 	bl	8004d94 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f9c8 	bl	8004ef4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d13a      	bne.n	8004be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d035      	beq.n	8004be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7e      	ldr	r2, [pc, #504]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d101      	bne.n	8004b86 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004b82:	4b7e      	ldr	r3, [pc, #504]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b84:	e001      	b.n	8004b8a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4979      	ldr	r1, [pc, #484]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b92:	428b      	cmp	r3, r1
 8004b94:	d101      	bne.n	8004b9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004b96:	4b79      	ldr	r3, [pc, #484]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b98:	e001      	b.n	8004b9e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ba2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bb2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd6:	f043 0202 	orr.w	r2, r3, #2
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fe88 	bl	80048f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	f040 80be 	bne.w	8004d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80b8 	beq.w	8004d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c0a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a59      	ldr	r2, [pc, #356]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004c16:	4b59      	ldr	r3, [pc, #356]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c18:	e001      	b.n	8004c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4954      	ldr	r1, [pc, #336]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c26:	428b      	cmp	r3, r1
 8004c28:	d101      	bne.n	8004c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004c2a:	4b54      	ldr	r3, [pc, #336]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c2c:	e001      	b.n	8004c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c36:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f043 0204 	orr.w	r2, r3, #4
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff fe4a 	bl	80048f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c60:	e084      	b.n	8004d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d107      	bne.n	8004c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f8be 	bl	8004df8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d107      	bne.n	8004c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d002      	beq.n	8004c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f8fd 	bl	8004e90 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	d12f      	bne.n	8004d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d02a      	beq.n	8004d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cb8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a2e      	ldr	r2, [pc, #184]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d101      	bne.n	8004cc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004cc4:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cc6:	e001      	b.n	8004ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4929      	ldr	r1, [pc, #164]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	d101      	bne.n	8004cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004cd8:	4b28      	ldr	r3, [pc, #160]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cda:	e001      	b.n	8004ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ce4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf2:	f043 0202 	orr.w	r2, r3, #2
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fdfa 	bl	80048f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d131      	bne.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d02c      	beq.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a17      	ldr	r2, [pc, #92]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004d1e:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d20:	e001      	b.n	8004d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004d22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4912      	ldr	r1, [pc, #72]	; (8004d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d2e:	428b      	cmp	r3, r1
 8004d30:	d101      	bne.n	8004d36 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d34:	e001      	b.n	8004d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004d36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d4e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5c:	f043 0204 	orr.w	r2, r3, #4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fdc5 	bl	80048f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d6a:	e000      	b.n	8004d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d6c:	bf00      	nop
}
 8004d6e:	bf00      	nop
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40003800 	.word	0x40003800
 8004d7c:	40003400 	.word	0x40003400

08004d80 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c99      	adds	r1, r3, #2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6251      	str	r1, [r2, #36]	; 0x24
 8004da6:	881a      	ldrh	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d113      	bne.n	8004dee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dd4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ffc9 	bl	8004d80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dee:	bf00      	nop
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	1c99      	adds	r1, r3, #2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6251      	str	r1, [r2, #36]	; 0x24
 8004e0a:	8819      	ldrh	r1, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <I2SEx_TxISR_I2SExt+0x90>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d101      	bne.n	8004e1a <I2SEx_TxISR_I2SExt+0x22>
 8004e16:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <I2SEx_TxISR_I2SExt+0x94>)
 8004e18:	e001      	b.n	8004e1e <I2SEx_TxISR_I2SExt+0x26>
 8004e1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e1e:	460a      	mov	r2, r1
 8004e20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d121      	bne.n	8004e7e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a12      	ldr	r2, [pc, #72]	; (8004e88 <I2SEx_TxISR_I2SExt+0x90>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <I2SEx_TxISR_I2SExt+0x50>
 8004e44:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <I2SEx_TxISR_I2SExt+0x94>)
 8004e46:	e001      	b.n	8004e4c <I2SEx_TxISR_I2SExt+0x54>
 8004e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	490d      	ldr	r1, [pc, #52]	; (8004e88 <I2SEx_TxISR_I2SExt+0x90>)
 8004e54:	428b      	cmp	r3, r1
 8004e56:	d101      	bne.n	8004e5c <I2SEx_TxISR_I2SExt+0x64>
 8004e58:	4b0c      	ldr	r3, [pc, #48]	; (8004e8c <I2SEx_TxISR_I2SExt+0x94>)
 8004e5a:	e001      	b.n	8004e60 <I2SEx_TxISR_I2SExt+0x68>
 8004e5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d106      	bne.n	8004e7e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff81 	bl	8004d80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40003800 	.word	0x40003800
 8004e8c:	40003400 	.word	0x40003400

08004e90 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68d8      	ldr	r0, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	1c99      	adds	r1, r3, #2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004ea8:	b282      	uxth	r2, r0
 8004eaa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d113      	bne.n	8004eec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ed2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff ff4a 	bl	8004d80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a20      	ldr	r2, [pc, #128]	; (8004f84 <I2SEx_RxISR_I2SExt+0x90>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d101      	bne.n	8004f0a <I2SEx_RxISR_I2SExt+0x16>
 8004f06:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <I2SEx_RxISR_I2SExt+0x94>)
 8004f08:	e001      	b.n	8004f0e <I2SEx_RxISR_I2SExt+0x1a>
 8004f0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f0e:	68d8      	ldr	r0, [r3, #12]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	1c99      	adds	r1, r3, #2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004f1a:	b282      	uxth	r2, r0
 8004f1c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d121      	bne.n	8004f7a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <I2SEx_RxISR_I2SExt+0x90>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <I2SEx_RxISR_I2SExt+0x50>
 8004f40:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <I2SEx_RxISR_I2SExt+0x94>)
 8004f42:	e001      	b.n	8004f48 <I2SEx_RxISR_I2SExt+0x54>
 8004f44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	490d      	ldr	r1, [pc, #52]	; (8004f84 <I2SEx_RxISR_I2SExt+0x90>)
 8004f50:	428b      	cmp	r3, r1
 8004f52:	d101      	bne.n	8004f58 <I2SEx_RxISR_I2SExt+0x64>
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <I2SEx_RxISR_I2SExt+0x94>)
 8004f56:	e001      	b.n	8004f5c <I2SEx_RxISR_I2SExt+0x68>
 8004f58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f60:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff ff03 	bl	8004d80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f7a:	bf00      	nop
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40003800 	.word	0x40003800
 8004f88:	40003400 	.word	0x40003400

08004f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e25b      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d075      	beq.n	8005096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004faa:	4ba3      	ldr	r3, [pc, #652]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb6:	4ba0      	ldr	r3, [pc, #640]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d112      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc2:	4b9d      	ldr	r3, [pc, #628]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fce:	d10b      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd0:	4b99      	ldr	r3, [pc, #612]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05b      	beq.n	8005094 <HAL_RCC_OscConfig+0x108>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d157      	bne.n	8005094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e236      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff0:	d106      	bne.n	8005000 <HAL_RCC_OscConfig+0x74>
 8004ff2:	4b91      	ldr	r3, [pc, #580]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a90      	ldr	r2, [pc, #576]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e01d      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x98>
 800500a:	4b8b      	ldr	r3, [pc, #556]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a8a      	ldr	r2, [pc, #552]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b88      	ldr	r3, [pc, #544]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a87      	ldr	r2, [pc, #540]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e00b      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005024:	4b84      	ldr	r3, [pc, #528]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a83      	ldr	r2, [pc, #524]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800502a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b81      	ldr	r3, [pc, #516]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a80      	ldr	r2, [pc, #512]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800503a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fc fe1a 	bl	8001c7c <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800504c:	f7fc fe16 	bl	8001c7c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	; 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e1fb      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b76      	ldr	r3, [pc, #472]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0xc0>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506c:	f7fc fe06 	bl	8001c7c <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005074:	f7fc fe02 	bl	8001c7c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	; 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1e7      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005086:	4b6c      	ldr	r3, [pc, #432]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0xe8>
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050a2:	4b65      	ldr	r3, [pc, #404]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ae:	4b62      	ldr	r3, [pc, #392]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d11c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ba:	4b5f      	ldr	r3, [pc, #380]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d116      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	4b5c      	ldr	r3, [pc, #368]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e1bb      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	4b56      	ldr	r3, [pc, #344]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4952      	ldr	r1, [pc, #328]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f2:	e03a      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050fc:	4b4f      	ldr	r3, [pc, #316]	; (800523c <HAL_RCC_OscConfig+0x2b0>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7fc fdbb 	bl	8001c7c <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800510a:	f7fc fdb7 	bl	8001c7c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e19c      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511c:	4b46      	ldr	r3, [pc, #280]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005128:	4b43      	ldr	r3, [pc, #268]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4940      	ldr	r1, [pc, #256]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
 800513c:	e015      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513e:	4b3f      	ldr	r3, [pc, #252]	; (800523c <HAL_RCC_OscConfig+0x2b0>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fc fd9a 	bl	8001c7c <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800514c:	f7fc fd96 	bl	8001c7c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e17b      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515e:	4b36      	ldr	r3, [pc, #216]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d030      	beq.n	80051d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517e:	4b30      	ldr	r3, [pc, #192]	; (8005240 <HAL_RCC_OscConfig+0x2b4>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7fc fd7a 	bl	8001c7c <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800518c:	f7fc fd76 	bl	8001c7c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e15b      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519e:	4b26      	ldr	r3, [pc, #152]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x200>
 80051aa:	e015      	b.n	80051d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ac:	4b24      	ldr	r3, [pc, #144]	; (8005240 <HAL_RCC_OscConfig+0x2b4>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b2:	f7fc fd63 	bl	8001c7c <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ba:	f7fc fd5f 	bl	8001c7c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e144      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051cc:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80051ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f0      	bne.n	80051ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80a0 	beq.w	8005326 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e6:	2300      	movs	r3, #0
 80051e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10f      	bne.n	8005216 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	4b0f      	ldr	r3, [pc, #60]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a0e      	ldr	r2, [pc, #56]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b0c      	ldr	r3, [pc, #48]	; (8005238 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005216:	4b0b      	ldr	r3, [pc, #44]	; (8005244 <HAL_RCC_OscConfig+0x2b8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d121      	bne.n	8005266 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005222:	4b08      	ldr	r3, [pc, #32]	; (8005244 <HAL_RCC_OscConfig+0x2b8>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a07      	ldr	r2, [pc, #28]	; (8005244 <HAL_RCC_OscConfig+0x2b8>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800522e:	f7fc fd25 	bl	8001c7c <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005234:	e011      	b.n	800525a <HAL_RCC_OscConfig+0x2ce>
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800
 800523c:	42470000 	.word	0x42470000
 8005240:	42470e80 	.word	0x42470e80
 8005244:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005248:	f7fc fd18 	bl	8001c7c <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e0fd      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b81      	ldr	r3, [pc, #516]	; (8005460 <HAL_RCC_OscConfig+0x4d4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005262:	2b00      	cmp	r3, #0
 8005264:	d0f0      	beq.n	8005248 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d106      	bne.n	800527c <HAL_RCC_OscConfig+0x2f0>
 800526e:	4b7d      	ldr	r3, [pc, #500]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	4a7c      	ldr	r2, [pc, #496]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	6713      	str	r3, [r2, #112]	; 0x70
 800527a:	e01c      	b.n	80052b6 <HAL_RCC_OscConfig+0x32a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	2b05      	cmp	r3, #5
 8005282:	d10c      	bne.n	800529e <HAL_RCC_OscConfig+0x312>
 8005284:	4b77      	ldr	r3, [pc, #476]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	4a76      	ldr	r2, [pc, #472]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 800528a:	f043 0304 	orr.w	r3, r3, #4
 800528e:	6713      	str	r3, [r2, #112]	; 0x70
 8005290:	4b74      	ldr	r3, [pc, #464]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	4a73      	ldr	r2, [pc, #460]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005296:	f043 0301 	orr.w	r3, r3, #1
 800529a:	6713      	str	r3, [r2, #112]	; 0x70
 800529c:	e00b      	b.n	80052b6 <HAL_RCC_OscConfig+0x32a>
 800529e:	4b71      	ldr	r3, [pc, #452]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	4a70      	ldr	r2, [pc, #448]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 80052a4:	f023 0301 	bic.w	r3, r3, #1
 80052a8:	6713      	str	r3, [r2, #112]	; 0x70
 80052aa:	4b6e      	ldr	r3, [pc, #440]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	4a6d      	ldr	r2, [pc, #436]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052be:	f7fc fcdd 	bl	8001c7c <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	e00a      	b.n	80052dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fc fcd9 	bl	8001c7c <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e0bc      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	4b61      	ldr	r3, [pc, #388]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ee      	beq.n	80052c6 <HAL_RCC_OscConfig+0x33a>
 80052e8:	e014      	b.n	8005314 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052ea:	f7fc fcc7 	bl	8001c7c <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f0:	e00a      	b.n	8005308 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f2:	f7fc fcc3 	bl	8001c7c <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005300:	4293      	cmp	r3, r2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e0a6      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005308:	4b56      	ldr	r3, [pc, #344]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 800530a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ee      	bne.n	80052f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d105      	bne.n	8005326 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531a:	4b52      	ldr	r3, [pc, #328]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	4a51      	ldr	r2, [pc, #324]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 8092 	beq.w	8005454 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005330:	4b4c      	ldr	r3, [pc, #304]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f003 030c 	and.w	r3, r3, #12
 8005338:	2b08      	cmp	r3, #8
 800533a:	d05c      	beq.n	80053f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d141      	bne.n	80053c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005344:	4b48      	ldr	r3, [pc, #288]	; (8005468 <HAL_RCC_OscConfig+0x4dc>)
 8005346:	2200      	movs	r2, #0
 8005348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534a:	f7fc fc97 	bl	8001c7c <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005350:	e008      	b.n	8005364 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005352:	f7fc fc93 	bl	8001c7c <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e078      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005364:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f0      	bne.n	8005352 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	019b      	lsls	r3, r3, #6
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	3b01      	subs	r3, #1
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005392:	061b      	lsls	r3, r3, #24
 8005394:	4933      	ldr	r1, [pc, #204]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800539a:	4b33      	ldr	r3, [pc, #204]	; (8005468 <HAL_RCC_OscConfig+0x4dc>)
 800539c:	2201      	movs	r2, #1
 800539e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fc fc6c 	bl	8001c7c <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fc fc68 	bl	8001c7c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e04d      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ba:	4b2a      	ldr	r3, [pc, #168]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0x41c>
 80053c6:	e045      	b.n	8005454 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c8:	4b27      	ldr	r3, [pc, #156]	; (8005468 <HAL_RCC_OscConfig+0x4dc>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fc fc55 	bl	8001c7c <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fc fc51 	bl	8001c7c <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e036      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e8:	4b1e      	ldr	r3, [pc, #120]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f0      	bne.n	80053d6 <HAL_RCC_OscConfig+0x44a>
 80053f4:	e02e      	b.n	8005454 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e029      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005402:	4b18      	ldr	r3, [pc, #96]	; (8005464 <HAL_RCC_OscConfig+0x4d8>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	429a      	cmp	r2, r3
 8005414:	d11c      	bne.n	8005450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d115      	bne.n	8005450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800542a:	4013      	ands	r3, r2
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005430:	4293      	cmp	r3, r2
 8005432:	d10d      	bne.n	8005450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d106      	bne.n	8005450 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800544c:	429a      	cmp	r2, r3
 800544e:	d001      	beq.n	8005454 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40007000 	.word	0x40007000
 8005464:	40023800 	.word	0x40023800
 8005468:	42470060 	.word	0x42470060

0800546c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0cc      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005480:	4b68      	ldr	r3, [pc, #416]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d90c      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b65      	ldr	r3, [pc, #404]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b63      	ldr	r3, [pc, #396]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0b8      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d020      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c0:	4b59      	ldr	r3, [pc, #356]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4a58      	ldr	r2, [pc, #352]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d8:	4b53      	ldr	r3, [pc, #332]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4a52      	ldr	r2, [pc, #328]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e4:	4b50      	ldr	r3, [pc, #320]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	494d      	ldr	r1, [pc, #308]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d044      	beq.n	800558c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d107      	bne.n	800551a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550a:	4b47      	ldr	r3, [pc, #284]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d119      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e07f      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d003      	beq.n	800552a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005526:	2b03      	cmp	r3, #3
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552a:	4b3f      	ldr	r3, [pc, #252]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e06f      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553a:	4b3b      	ldr	r3, [pc, #236]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e067      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800554a:	4b37      	ldr	r3, [pc, #220]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 0203 	bic.w	r2, r3, #3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4934      	ldr	r1, [pc, #208]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	4313      	orrs	r3, r2
 800555a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800555c:	f7fc fb8e 	bl	8001c7c <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005562:	e00a      	b.n	800557a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005564:	f7fc fb8a 	bl	8001c7c <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e04f      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 020c 	and.w	r2, r3, #12
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	429a      	cmp	r2, r3
 800558a:	d1eb      	bne.n	8005564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800558c:	4b25      	ldr	r3, [pc, #148]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d20c      	bcs.n	80055b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b22      	ldr	r3, [pc, #136]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a2:	4b20      	ldr	r3, [pc, #128]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d001      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e032      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4916      	ldr	r1, [pc, #88]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	490e      	ldr	r1, [pc, #56]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055f2:	f000 f821 	bl	8005638 <HAL_RCC_GetSysClockFreq>
 80055f6:	4602      	mov	r2, r0
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	490a      	ldr	r1, [pc, #40]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	5ccb      	ldrb	r3, [r1, r3]
 8005606:	fa22 f303 	lsr.w	r3, r2, r3
 800560a:	4a09      	ldr	r2, [pc, #36]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 800560c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <HAL_RCC_ClockConfig+0x1c8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f7fc faee 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40023c00 	.word	0x40023c00
 8005628:	40023800 	.word	0x40023800
 800562c:	0800a168 	.word	0x0800a168
 8005630:	20000000 	.word	0x20000000
 8005634:	20000004 	.word	0x20000004

08005638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	607b      	str	r3, [r7, #4]
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	2300      	movs	r3, #0
 800564a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005650:	4b67      	ldr	r3, [pc, #412]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 030c 	and.w	r3, r3, #12
 8005658:	2b08      	cmp	r3, #8
 800565a:	d00d      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x40>
 800565c:	2b08      	cmp	r3, #8
 800565e:	f200 80bd 	bhi.w	80057dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <HAL_RCC_GetSysClockFreq+0x34>
 8005666:	2b04      	cmp	r3, #4
 8005668:	d003      	beq.n	8005672 <HAL_RCC_GetSysClockFreq+0x3a>
 800566a:	e0b7      	b.n	80057dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800566c:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800566e:	60bb      	str	r3, [r7, #8]
       break;
 8005670:	e0b7      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005672:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005674:	60bb      	str	r3, [r7, #8]
      break;
 8005676:	e0b4      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005678:	4b5d      	ldr	r3, [pc, #372]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005680:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005682:	4b5b      	ldr	r3, [pc, #364]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d04d      	beq.n	800572a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568e:	4b58      	ldr	r3, [pc, #352]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	461a      	mov	r2, r3
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800569e:	f04f 0100 	mov.w	r1, #0
 80056a2:	ea02 0800 	and.w	r8, r2, r0
 80056a6:	ea03 0901 	and.w	r9, r3, r1
 80056aa:	4640      	mov	r0, r8
 80056ac:	4649      	mov	r1, r9
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	014b      	lsls	r3, r1, #5
 80056b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056bc:	0142      	lsls	r2, r0, #5
 80056be:	4610      	mov	r0, r2
 80056c0:	4619      	mov	r1, r3
 80056c2:	ebb0 0008 	subs.w	r0, r0, r8
 80056c6:	eb61 0109 	sbc.w	r1, r1, r9
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	018b      	lsls	r3, r1, #6
 80056d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056d8:	0182      	lsls	r2, r0, #6
 80056da:	1a12      	subs	r2, r2, r0
 80056dc:	eb63 0301 	sbc.w	r3, r3, r1
 80056e0:	f04f 0000 	mov.w	r0, #0
 80056e4:	f04f 0100 	mov.w	r1, #0
 80056e8:	00d9      	lsls	r1, r3, #3
 80056ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056ee:	00d0      	lsls	r0, r2, #3
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	eb12 0208 	adds.w	r2, r2, r8
 80056f8:	eb43 0309 	adc.w	r3, r3, r9
 80056fc:	f04f 0000 	mov.w	r0, #0
 8005700:	f04f 0100 	mov.w	r1, #0
 8005704:	0259      	lsls	r1, r3, #9
 8005706:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800570a:	0250      	lsls	r0, r2, #9
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4610      	mov	r0, r2
 8005712:	4619      	mov	r1, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	461a      	mov	r2, r3
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	f7fb fa26 	bl	8000b6c <__aeabi_uldivmod>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4613      	mov	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e04a      	b.n	80057c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800572a:	4b31      	ldr	r3, [pc, #196]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	099b      	lsrs	r3, r3, #6
 8005730:	461a      	mov	r2, r3
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	f240 10ff 	movw	r0, #511	; 0x1ff
 800573a:	f04f 0100 	mov.w	r1, #0
 800573e:	ea02 0400 	and.w	r4, r2, r0
 8005742:	ea03 0501 	and.w	r5, r3, r1
 8005746:	4620      	mov	r0, r4
 8005748:	4629      	mov	r1, r5
 800574a:	f04f 0200 	mov.w	r2, #0
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	014b      	lsls	r3, r1, #5
 8005754:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005758:	0142      	lsls	r2, r0, #5
 800575a:	4610      	mov	r0, r2
 800575c:	4619      	mov	r1, r3
 800575e:	1b00      	subs	r0, r0, r4
 8005760:	eb61 0105 	sbc.w	r1, r1, r5
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	f04f 0300 	mov.w	r3, #0
 800576c:	018b      	lsls	r3, r1, #6
 800576e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005772:	0182      	lsls	r2, r0, #6
 8005774:	1a12      	subs	r2, r2, r0
 8005776:	eb63 0301 	sbc.w	r3, r3, r1
 800577a:	f04f 0000 	mov.w	r0, #0
 800577e:	f04f 0100 	mov.w	r1, #0
 8005782:	00d9      	lsls	r1, r3, #3
 8005784:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005788:	00d0      	lsls	r0, r2, #3
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	1912      	adds	r2, r2, r4
 8005790:	eb45 0303 	adc.w	r3, r5, r3
 8005794:	f04f 0000 	mov.w	r0, #0
 8005798:	f04f 0100 	mov.w	r1, #0
 800579c:	0299      	lsls	r1, r3, #10
 800579e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80057a2:	0290      	lsls	r0, r2, #10
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4610      	mov	r0, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	f7fb f9da 	bl	8000b6c <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4613      	mov	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057c0:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	0c1b      	lsrs	r3, r3, #16
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	3301      	adds	r3, #1
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d8:	60bb      	str	r3, [r7, #8]
      break;
 80057da:	e002      	b.n	80057e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057dc:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057de:	60bb      	str	r3, [r7, #8]
      break;
 80057e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057e2:	68bb      	ldr	r3, [r7, #8]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800
 80057f4:	00f42400 	.word	0x00f42400
 80057f8:	007a1200 	.word	0x007a1200

080057fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005800:	4b03      	ldr	r3, [pc, #12]	; (8005810 <HAL_RCC_GetHCLKFreq+0x14>)
 8005802:	681b      	ldr	r3, [r3, #0]
}
 8005804:	4618      	mov	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20000000 	.word	0x20000000

08005814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005818:	f7ff fff0 	bl	80057fc <HAL_RCC_GetHCLKFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b05      	ldr	r3, [pc, #20]	; (8005834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	0a9b      	lsrs	r3, r3, #10
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4903      	ldr	r1, [pc, #12]	; (8005838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005830:	4618      	mov	r0, r3
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40023800 	.word	0x40023800
 8005838:	0800a178 	.word	0x0800a178

0800583c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005840:	f7ff ffdc 	bl	80057fc <HAL_RCC_GetHCLKFreq>
 8005844:	4602      	mov	r2, r0
 8005846:	4b05      	ldr	r3, [pc, #20]	; (800585c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	0b5b      	lsrs	r3, r3, #13
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	4903      	ldr	r1, [pc, #12]	; (8005860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005852:	5ccb      	ldrb	r3, [r1, r3]
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005858:	4618      	mov	r0, r3
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40023800 	.word	0x40023800
 8005860:	0800a178 	.word	0x0800a178

08005864 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d105      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005888:	2b00      	cmp	r3, #0
 800588a:	d035      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800588c:	4b62      	ldr	r3, [pc, #392]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005892:	f7fc f9f3 	bl	8001c7c <HAL_GetTick>
 8005896:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005898:	e008      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800589a:	f7fc f9ef 	bl	8001c7c <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d901      	bls.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e0b0      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058ac:	4b5b      	ldr	r3, [pc, #364]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f0      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	019a      	lsls	r2, r3, #6
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	071b      	lsls	r3, r3, #28
 80058c4:	4955      	ldr	r1, [pc, #340]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80058cc:	4b52      	ldr	r3, [pc, #328]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058d2:	f7fc f9d3 	bl	8001c7c <HAL_GetTick>
 80058d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058d8:	e008      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80058da:	f7fc f9cf 	bl	8001c7c <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e090      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058ec:	4b4b      	ldr	r3, [pc, #300]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8083 	beq.w	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	4b44      	ldr	r3, [pc, #272]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	4a43      	ldr	r2, [pc, #268]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005914:	6413      	str	r3, [r2, #64]	; 0x40
 8005916:	4b41      	ldr	r3, [pc, #260]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005922:	4b3f      	ldr	r3, [pc, #252]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a3e      	ldr	r2, [pc, #248]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800592e:	f7fc f9a5 	bl	8001c7c <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005934:	e008      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005936:	f7fc f9a1 	bl	8001c7c <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e062      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005948:	4b35      	ldr	r3, [pc, #212]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0f0      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005954:	4b31      	ldr	r3, [pc, #196]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d02f      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	429a      	cmp	r2, r3
 8005970:	d028      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005972:	4b2a      	ldr	r3, [pc, #168]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800597c:	4b29      	ldr	r3, [pc, #164]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005982:	4b28      	ldr	r3, [pc, #160]	; (8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005988:	4a24      	ldr	r2, [pc, #144]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800598e:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b01      	cmp	r3, #1
 8005998:	d114      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800599a:	f7fc f96f 	bl	8001c7c <HAL_GetTick>
 800599e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a0:	e00a      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a2:	f7fc f96b 	bl	8001c7c <HAL_GetTick>
 80059a6:	4602      	mov	r2, r0
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e02a      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b8:	4b18      	ldr	r3, [pc, #96]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0ee      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d0:	d10d      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e6:	490d      	ldr	r1, [pc, #52]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	608b      	str	r3, [r1, #8]
 80059ec:	e005      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x196>
 80059ee:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	4a0a      	ldr	r2, [pc, #40]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059f4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059f8:	6093      	str	r3, [r2, #8]
 80059fa:	4b08      	ldr	r3, [pc, #32]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80059fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a06:	4905      	ldr	r1, [pc, #20]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	42470068 	.word	0x42470068
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	40007000 	.word	0x40007000
 8005a24:	42470e40 	.word	0x42470e40

08005a28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d13e      	bne.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005a46:	4b23      	ldr	r3, [pc, #140]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d12f      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a5c:	4b1e      	ldr	r3, [pc, #120]	; (8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a5e:	617b      	str	r3, [r7, #20]
          break;
 8005a60:	e02f      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005a62:	4b1c      	ldr	r3, [pc, #112]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6e:	d108      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a70:	4b18      	ldr	r3, [pc, #96]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a78:	4a18      	ldr	r2, [pc, #96]	; (8005adc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	e007      	b.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005a82:	4b14      	ldr	r3, [pc, #80]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8a:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005a92:	4b10      	ldr	r3, [pc, #64]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a98:	099b      	lsrs	r3, r3, #6
 8005a9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	fb02 f303 	mul.w	r3, r2, r3
 8005aa4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aac:	0f1b      	lsrs	r3, r3, #28
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]
          break;
 8005aba:	e002      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	617b      	str	r3, [r7, #20]
          break;
 8005ac0:	bf00      	nop
        }
      }
      break;
 8005ac2:	bf00      	nop
    }
  }
  return frequency;
 8005ac4:	697b      	ldr	r3, [r7, #20]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	00bb8000 	.word	0x00bb8000
 8005adc:	007a1200 	.word	0x007a1200
 8005ae0:	00f42400 	.word	0x00f42400

08005ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e056      	b.n	8005ba4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7fb ff13 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	ea42 0103 	orr.w	r1, r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	f003 0104 	and.w	r1, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69da      	ldr	r2, [r3, #28]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3708      	adds	r7, #8
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e03f      	b.n	8005c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fb fefa 	bl	80019cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2224      	movs	r2, #36	; 0x24
 8005bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f90b 	bl	8005e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68da      	ldr	r2, [r3, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b088      	sub	sp, #32
 8005c4a:	af02      	add	r7, sp, #8
 8005c4c:	60f8      	str	r0, [r7, #12]
 8005c4e:	60b9      	str	r1, [r7, #8]
 8005c50:	603b      	str	r3, [r7, #0]
 8005c52:	4613      	mov	r3, r2
 8005c54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	f040 8083 	bne.w	8005d6e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_UART_Transmit+0x2e>
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e07b      	b.n	8005d70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <HAL_UART_Transmit+0x40>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e074      	b.n	8005d70 <HAL_UART_Transmit+0x12a>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2221      	movs	r2, #33	; 0x21
 8005c98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c9c:	f7fb ffee 	bl	8001c7c <HAL_GetTick>
 8005ca0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	88fa      	ldrh	r2, [r7, #6]
 8005ca6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	88fa      	ldrh	r2, [r7, #6]
 8005cac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005cb6:	e042      	b.n	8005d3e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cce:	d122      	bne.n	8005d16 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2180      	movs	r1, #128	; 0x80
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f84c 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e042      	b.n	8005d70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cfc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	3302      	adds	r3, #2
 8005d0a:	60bb      	str	r3, [r7, #8]
 8005d0c:	e017      	b.n	8005d3e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	3301      	adds	r3, #1
 8005d12:	60bb      	str	r3, [r7, #8]
 8005d14:	e013      	b.n	8005d3e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	9300      	str	r3, [sp, #0]
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 f829 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e01f      	b.n	8005d70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	60ba      	str	r2, [r7, #8]
 8005d36:	781a      	ldrb	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1b7      	bne.n	8005cb8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2140      	movs	r1, #64	; 0x40
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 f810 	bl	8005d78 <UART_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e006      	b.n	8005d70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
  }
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d88:	e02c      	b.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	d028      	beq.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d98:	f7fb ff70 	bl	8001c7c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d21d      	bcs.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005db6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e00f      	b.n	8005e04 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	bf0c      	ite	eq
 8005df4:	2301      	moveq	r3, #1
 8005df6:	2300      	movne	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d0c3      	beq.n	8005d8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e10:	b0bd      	sub	sp, #244	; 0xf4
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e28:	68d9      	ldr	r1, [r3, #12]
 8005e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	ea40 0301 	orr.w	r3, r0, r1
 8005e34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e64:	f021 010c 	bic.w	r1, r1, #12
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e72:	430b      	orrs	r3, r1
 8005e74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e86:	6999      	ldr	r1, [r3, #24]
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	ea40 0301 	orr.w	r3, r0, r1
 8005e92:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e9e:	f040 81a5 	bne.w	80061ec <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4bcd      	ldr	r3, [pc, #820]	; (80061e0 <UART_SetConfig+0x3d4>)
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d006      	beq.n	8005ebc <UART_SetConfig+0xb0>
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	4bcb      	ldr	r3, [pc, #812]	; (80061e4 <UART_SetConfig+0x3d8>)
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	f040 80cb 	bne.w	8006052 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ebc:	f7ff fcbe 	bl	800583c <HAL_RCC_GetPCLK2Freq>
 8005ec0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ec4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ec8:	461c      	mov	r4, r3
 8005eca:	f04f 0500 	mov.w	r5, #0
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	1891      	adds	r1, r2, r2
 8005ed4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005ed8:	415b      	adcs	r3, r3
 8005eda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ede:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005ee2:	1912      	adds	r2, r2, r4
 8005ee4:	eb45 0303 	adc.w	r3, r5, r3
 8005ee8:	f04f 0000 	mov.w	r0, #0
 8005eec:	f04f 0100 	mov.w	r1, #0
 8005ef0:	00d9      	lsls	r1, r3, #3
 8005ef2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ef6:	00d0      	lsls	r0, r2, #3
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	1911      	adds	r1, r2, r4
 8005efe:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005f02:	416b      	adcs	r3, r5
 8005f04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	1891      	adds	r1, r2, r2
 8005f16:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005f1a:	415b      	adcs	r3, r3
 8005f1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f20:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005f24:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005f28:	f7fa fe20 	bl	8000b6c <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4bad      	ldr	r3, [pc, #692]	; (80061e8 <UART_SetConfig+0x3dc>)
 8005f32:	fba3 2302 	umull	r2, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	011e      	lsls	r6, r3, #4
 8005f3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f3e:	461c      	mov	r4, r3
 8005f40:	f04f 0500 	mov.w	r5, #0
 8005f44:	4622      	mov	r2, r4
 8005f46:	462b      	mov	r3, r5
 8005f48:	1891      	adds	r1, r2, r2
 8005f4a:	67b9      	str	r1, [r7, #120]	; 0x78
 8005f4c:	415b      	adcs	r3, r3
 8005f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f50:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005f54:	1912      	adds	r2, r2, r4
 8005f56:	eb45 0303 	adc.w	r3, r5, r3
 8005f5a:	f04f 0000 	mov.w	r0, #0
 8005f5e:	f04f 0100 	mov.w	r1, #0
 8005f62:	00d9      	lsls	r1, r3, #3
 8005f64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f68:	00d0      	lsls	r0, r2, #3
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	1911      	adds	r1, r2, r4
 8005f70:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005f74:	416b      	adcs	r3, r5
 8005f76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	461a      	mov	r2, r3
 8005f82:	f04f 0300 	mov.w	r3, #0
 8005f86:	1891      	adds	r1, r2, r2
 8005f88:	6739      	str	r1, [r7, #112]	; 0x70
 8005f8a:	415b      	adcs	r3, r3
 8005f8c:	677b      	str	r3, [r7, #116]	; 0x74
 8005f8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005f92:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005f96:	f7fa fde9 	bl	8000b6c <__aeabi_uldivmod>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4b92      	ldr	r3, [pc, #584]	; (80061e8 <UART_SetConfig+0x3dc>)
 8005fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	2164      	movs	r1, #100	; 0x64
 8005fa8:	fb01 f303 	mul.w	r3, r1, r3
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	3332      	adds	r3, #50	; 0x32
 8005fb2:	4a8d      	ldr	r2, [pc, #564]	; (80061e8 <UART_SetConfig+0x3dc>)
 8005fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb8:	095b      	lsrs	r3, r3, #5
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fc0:	441e      	add	r6, r3
 8005fc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	1894      	adds	r4, r2, r2
 8005fd2:	66bc      	str	r4, [r7, #104]	; 0x68
 8005fd4:	415b      	adcs	r3, r3
 8005fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fd8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005fdc:	1812      	adds	r2, r2, r0
 8005fde:	eb41 0303 	adc.w	r3, r1, r3
 8005fe2:	f04f 0400 	mov.w	r4, #0
 8005fe6:	f04f 0500 	mov.w	r5, #0
 8005fea:	00dd      	lsls	r5, r3, #3
 8005fec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ff0:	00d4      	lsls	r4, r2, #3
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	1814      	adds	r4, r2, r0
 8005ff8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005ffc:	414b      	adcs	r3, r1
 8005ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	461a      	mov	r2, r3
 800600a:	f04f 0300 	mov.w	r3, #0
 800600e:	1891      	adds	r1, r2, r2
 8006010:	6639      	str	r1, [r7, #96]	; 0x60
 8006012:	415b      	adcs	r3, r3
 8006014:	667b      	str	r3, [r7, #100]	; 0x64
 8006016:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800601a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800601e:	f7fa fda5 	bl	8000b6c <__aeabi_uldivmod>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4b70      	ldr	r3, [pc, #448]	; (80061e8 <UART_SetConfig+0x3dc>)
 8006028:	fba3 1302 	umull	r1, r3, r3, r2
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	2164      	movs	r1, #100	; 0x64
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	3332      	adds	r3, #50	; 0x32
 800603a:	4a6b      	ldr	r2, [pc, #428]	; (80061e8 <UART_SetConfig+0x3dc>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	f003 0207 	and.w	r2, r3, #7
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4432      	add	r2, r6
 800604e:	609a      	str	r2, [r3, #8]
 8006050:	e26d      	b.n	800652e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006052:	f7ff fbdf 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8006056:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800605a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800605e:	461c      	mov	r4, r3
 8006060:	f04f 0500 	mov.w	r5, #0
 8006064:	4622      	mov	r2, r4
 8006066:	462b      	mov	r3, r5
 8006068:	1891      	adds	r1, r2, r2
 800606a:	65b9      	str	r1, [r7, #88]	; 0x58
 800606c:	415b      	adcs	r3, r3
 800606e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006070:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006074:	1912      	adds	r2, r2, r4
 8006076:	eb45 0303 	adc.w	r3, r5, r3
 800607a:	f04f 0000 	mov.w	r0, #0
 800607e:	f04f 0100 	mov.w	r1, #0
 8006082:	00d9      	lsls	r1, r3, #3
 8006084:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006088:	00d0      	lsls	r0, r2, #3
 800608a:	4602      	mov	r2, r0
 800608c:	460b      	mov	r3, r1
 800608e:	1911      	adds	r1, r2, r4
 8006090:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8006094:	416b      	adcs	r3, r5
 8006096:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800609a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	461a      	mov	r2, r3
 80060a2:	f04f 0300 	mov.w	r3, #0
 80060a6:	1891      	adds	r1, r2, r2
 80060a8:	6539      	str	r1, [r7, #80]	; 0x50
 80060aa:	415b      	adcs	r3, r3
 80060ac:	657b      	str	r3, [r7, #84]	; 0x54
 80060ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060b2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80060b6:	f7fa fd59 	bl	8000b6c <__aeabi_uldivmod>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	4b4a      	ldr	r3, [pc, #296]	; (80061e8 <UART_SetConfig+0x3dc>)
 80060c0:	fba3 2302 	umull	r2, r3, r3, r2
 80060c4:	095b      	lsrs	r3, r3, #5
 80060c6:	011e      	lsls	r6, r3, #4
 80060c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060cc:	461c      	mov	r4, r3
 80060ce:	f04f 0500 	mov.w	r5, #0
 80060d2:	4622      	mov	r2, r4
 80060d4:	462b      	mov	r3, r5
 80060d6:	1891      	adds	r1, r2, r2
 80060d8:	64b9      	str	r1, [r7, #72]	; 0x48
 80060da:	415b      	adcs	r3, r3
 80060dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060de:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060e2:	1912      	adds	r2, r2, r4
 80060e4:	eb45 0303 	adc.w	r3, r5, r3
 80060e8:	f04f 0000 	mov.w	r0, #0
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	00d9      	lsls	r1, r3, #3
 80060f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060f6:	00d0      	lsls	r0, r2, #3
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	1911      	adds	r1, r2, r4
 80060fe:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006102:	416b      	adcs	r3, r5
 8006104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	461a      	mov	r2, r3
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	1891      	adds	r1, r2, r2
 8006116:	6439      	str	r1, [r7, #64]	; 0x40
 8006118:	415b      	adcs	r3, r3
 800611a:	647b      	str	r3, [r7, #68]	; 0x44
 800611c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006120:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006124:	f7fa fd22 	bl	8000b6c <__aeabi_uldivmod>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	4b2e      	ldr	r3, [pc, #184]	; (80061e8 <UART_SetConfig+0x3dc>)
 800612e:	fba3 1302 	umull	r1, r3, r3, r2
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	2164      	movs	r1, #100	; 0x64
 8006136:	fb01 f303 	mul.w	r3, r1, r3
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	3332      	adds	r3, #50	; 0x32
 8006140:	4a29      	ldr	r2, [pc, #164]	; (80061e8 <UART_SetConfig+0x3dc>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800614e:	441e      	add	r6, r3
 8006150:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006154:	4618      	mov	r0, r3
 8006156:	f04f 0100 	mov.w	r1, #0
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	1894      	adds	r4, r2, r2
 8006160:	63bc      	str	r4, [r7, #56]	; 0x38
 8006162:	415b      	adcs	r3, r3
 8006164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006166:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800616a:	1812      	adds	r2, r2, r0
 800616c:	eb41 0303 	adc.w	r3, r1, r3
 8006170:	f04f 0400 	mov.w	r4, #0
 8006174:	f04f 0500 	mov.w	r5, #0
 8006178:	00dd      	lsls	r5, r3, #3
 800617a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800617e:	00d4      	lsls	r4, r2, #3
 8006180:	4622      	mov	r2, r4
 8006182:	462b      	mov	r3, r5
 8006184:	1814      	adds	r4, r2, r0
 8006186:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800618a:	414b      	adcs	r3, r1
 800618c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	461a      	mov	r2, r3
 8006198:	f04f 0300 	mov.w	r3, #0
 800619c:	1891      	adds	r1, r2, r2
 800619e:	6339      	str	r1, [r7, #48]	; 0x30
 80061a0:	415b      	adcs	r3, r3
 80061a2:	637b      	str	r3, [r7, #52]	; 0x34
 80061a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061a8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061ac:	f7fa fcde 	bl	8000b6c <__aeabi_uldivmod>
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <UART_SetConfig+0x3dc>)
 80061b6:	fba3 1302 	umull	r1, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	2164      	movs	r1, #100	; 0x64
 80061be:	fb01 f303 	mul.w	r3, r1, r3
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	3332      	adds	r3, #50	; 0x32
 80061c8:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <UART_SetConfig+0x3dc>)
 80061ca:	fba2 2303 	umull	r2, r3, r2, r3
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	f003 0207 	and.w	r2, r3, #7
 80061d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4432      	add	r2, r6
 80061dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80061de:	e1a6      	b.n	800652e <UART_SetConfig+0x722>
 80061e0:	40011000 	.word	0x40011000
 80061e4:	40011400 	.word	0x40011400
 80061e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4bd1      	ldr	r3, [pc, #836]	; (8006538 <UART_SetConfig+0x72c>)
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d006      	beq.n	8006206 <UART_SetConfig+0x3fa>
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4bcf      	ldr	r3, [pc, #828]	; (800653c <UART_SetConfig+0x730>)
 8006200:	429a      	cmp	r2, r3
 8006202:	f040 80ca 	bne.w	800639a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006206:	f7ff fb19 	bl	800583c <HAL_RCC_GetPCLK2Freq>
 800620a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800620e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006212:	461c      	mov	r4, r3
 8006214:	f04f 0500 	mov.w	r5, #0
 8006218:	4622      	mov	r2, r4
 800621a:	462b      	mov	r3, r5
 800621c:	1891      	adds	r1, r2, r2
 800621e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006220:	415b      	adcs	r3, r3
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006228:	1912      	adds	r2, r2, r4
 800622a:	eb45 0303 	adc.w	r3, r5, r3
 800622e:	f04f 0000 	mov.w	r0, #0
 8006232:	f04f 0100 	mov.w	r1, #0
 8006236:	00d9      	lsls	r1, r3, #3
 8006238:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800623c:	00d0      	lsls	r0, r2, #3
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	eb12 0a04 	adds.w	sl, r2, r4
 8006246:	eb43 0b05 	adc.w	fp, r3, r5
 800624a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	f04f 0100 	mov.w	r1, #0
 8006256:	f04f 0200 	mov.w	r2, #0
 800625a:	f04f 0300 	mov.w	r3, #0
 800625e:	008b      	lsls	r3, r1, #2
 8006260:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006264:	0082      	lsls	r2, r0, #2
 8006266:	4650      	mov	r0, sl
 8006268:	4659      	mov	r1, fp
 800626a:	f7fa fc7f 	bl	8000b6c <__aeabi_uldivmod>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	4bb3      	ldr	r3, [pc, #716]	; (8006540 <UART_SetConfig+0x734>)
 8006274:	fba3 2302 	umull	r2, r3, r3, r2
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	011e      	lsls	r6, r3, #4
 800627c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006280:	4618      	mov	r0, r3
 8006282:	f04f 0100 	mov.w	r1, #0
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	1894      	adds	r4, r2, r2
 800628c:	623c      	str	r4, [r7, #32]
 800628e:	415b      	adcs	r3, r3
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006296:	1812      	adds	r2, r2, r0
 8006298:	eb41 0303 	adc.w	r3, r1, r3
 800629c:	f04f 0400 	mov.w	r4, #0
 80062a0:	f04f 0500 	mov.w	r5, #0
 80062a4:	00dd      	lsls	r5, r3, #3
 80062a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062aa:	00d4      	lsls	r4, r2, #3
 80062ac:	4622      	mov	r2, r4
 80062ae:	462b      	mov	r3, r5
 80062b0:	1814      	adds	r4, r2, r0
 80062b2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80062b6:	414b      	adcs	r3, r1
 80062b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f04f 0100 	mov.w	r1, #0
 80062c8:	f04f 0200 	mov.w	r2, #0
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062d6:	0082      	lsls	r2, r0, #2
 80062d8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80062dc:	f7fa fc46 	bl	8000b6c <__aeabi_uldivmod>
 80062e0:	4602      	mov	r2, r0
 80062e2:	460b      	mov	r3, r1
 80062e4:	4b96      	ldr	r3, [pc, #600]	; (8006540 <UART_SetConfig+0x734>)
 80062e6:	fba3 1302 	umull	r1, r3, r3, r2
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	2164      	movs	r1, #100	; 0x64
 80062ee:	fb01 f303 	mul.w	r3, r1, r3
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	011b      	lsls	r3, r3, #4
 80062f6:	3332      	adds	r3, #50	; 0x32
 80062f8:	4a91      	ldr	r2, [pc, #580]	; (8006540 <UART_SetConfig+0x734>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	095b      	lsrs	r3, r3, #5
 8006300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006304:	441e      	add	r6, r3
 8006306:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800630a:	4618      	mov	r0, r3
 800630c:	f04f 0100 	mov.w	r1, #0
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	1894      	adds	r4, r2, r2
 8006316:	61bc      	str	r4, [r7, #24]
 8006318:	415b      	adcs	r3, r3
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006320:	1812      	adds	r2, r2, r0
 8006322:	eb41 0303 	adc.w	r3, r1, r3
 8006326:	f04f 0400 	mov.w	r4, #0
 800632a:	f04f 0500 	mov.w	r5, #0
 800632e:	00dd      	lsls	r5, r3, #3
 8006330:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006334:	00d4      	lsls	r4, r2, #3
 8006336:	4622      	mov	r2, r4
 8006338:	462b      	mov	r3, r5
 800633a:	1814      	adds	r4, r2, r0
 800633c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006340:	414b      	adcs	r3, r1
 8006342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	4618      	mov	r0, r3
 800634e:	f04f 0100 	mov.w	r1, #0
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	f04f 0300 	mov.w	r3, #0
 800635a:	008b      	lsls	r3, r1, #2
 800635c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006360:	0082      	lsls	r2, r0, #2
 8006362:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006366:	f7fa fc01 	bl	8000b6c <__aeabi_uldivmod>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4b74      	ldr	r3, [pc, #464]	; (8006540 <UART_SetConfig+0x734>)
 8006370:	fba3 1302 	umull	r1, r3, r3, r2
 8006374:	095b      	lsrs	r3, r3, #5
 8006376:	2164      	movs	r1, #100	; 0x64
 8006378:	fb01 f303 	mul.w	r3, r1, r3
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	3332      	adds	r3, #50	; 0x32
 8006382:	4a6f      	ldr	r2, [pc, #444]	; (8006540 <UART_SetConfig+0x734>)
 8006384:	fba2 2303 	umull	r2, r3, r2, r3
 8006388:	095b      	lsrs	r3, r3, #5
 800638a:	f003 020f 	and.w	r2, r3, #15
 800638e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4432      	add	r2, r6
 8006396:	609a      	str	r2, [r3, #8]
 8006398:	e0c9      	b.n	800652e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800639a:	f7ff fa3b 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 800639e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063a6:	461c      	mov	r4, r3
 80063a8:	f04f 0500 	mov.w	r5, #0
 80063ac:	4622      	mov	r2, r4
 80063ae:	462b      	mov	r3, r5
 80063b0:	1891      	adds	r1, r2, r2
 80063b2:	6139      	str	r1, [r7, #16]
 80063b4:	415b      	adcs	r3, r3
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80063bc:	1912      	adds	r2, r2, r4
 80063be:	eb45 0303 	adc.w	r3, r5, r3
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f04f 0100 	mov.w	r1, #0
 80063ca:	00d9      	lsls	r1, r3, #3
 80063cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063d0:	00d0      	lsls	r0, r2, #3
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	eb12 0804 	adds.w	r8, r2, r4
 80063da:	eb43 0905 	adc.w	r9, r3, r5
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f04f 0100 	mov.w	r1, #0
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	008b      	lsls	r3, r1, #2
 80063f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063f8:	0082      	lsls	r2, r0, #2
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	f7fa fbb5 	bl	8000b6c <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4b4e      	ldr	r3, [pc, #312]	; (8006540 <UART_SetConfig+0x734>)
 8006408:	fba3 2302 	umull	r2, r3, r3, r2
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	011e      	lsls	r6, r3, #4
 8006410:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006414:	4618      	mov	r0, r3
 8006416:	f04f 0100 	mov.w	r1, #0
 800641a:	4602      	mov	r2, r0
 800641c:	460b      	mov	r3, r1
 800641e:	1894      	adds	r4, r2, r2
 8006420:	60bc      	str	r4, [r7, #8]
 8006422:	415b      	adcs	r3, r3
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800642a:	1812      	adds	r2, r2, r0
 800642c:	eb41 0303 	adc.w	r3, r1, r3
 8006430:	f04f 0400 	mov.w	r4, #0
 8006434:	f04f 0500 	mov.w	r5, #0
 8006438:	00dd      	lsls	r5, r3, #3
 800643a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800643e:	00d4      	lsls	r4, r2, #3
 8006440:	4622      	mov	r2, r4
 8006442:	462b      	mov	r3, r5
 8006444:	1814      	adds	r4, r2, r0
 8006446:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800644a:	414b      	adcs	r3, r1
 800644c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	4618      	mov	r0, r3
 8006458:	f04f 0100 	mov.w	r1, #0
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	008b      	lsls	r3, r1, #2
 8006466:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800646a:	0082      	lsls	r2, r0, #2
 800646c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006470:	f7fa fb7c 	bl	8000b6c <__aeabi_uldivmod>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	4b31      	ldr	r3, [pc, #196]	; (8006540 <UART_SetConfig+0x734>)
 800647a:	fba3 1302 	umull	r1, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2164      	movs	r1, #100	; 0x64
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	3332      	adds	r3, #50	; 0x32
 800648c:	4a2c      	ldr	r2, [pc, #176]	; (8006540 <UART_SetConfig+0x734>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006498:	441e      	add	r6, r3
 800649a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800649e:	4618      	mov	r0, r3
 80064a0:	f04f 0100 	mov.w	r1, #0
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	1894      	adds	r4, r2, r2
 80064aa:	603c      	str	r4, [r7, #0]
 80064ac:	415b      	adcs	r3, r3
 80064ae:	607b      	str	r3, [r7, #4]
 80064b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064b4:	1812      	adds	r2, r2, r0
 80064b6:	eb41 0303 	adc.w	r3, r1, r3
 80064ba:	f04f 0400 	mov.w	r4, #0
 80064be:	f04f 0500 	mov.w	r5, #0
 80064c2:	00dd      	lsls	r5, r3, #3
 80064c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064c8:	00d4      	lsls	r4, r2, #3
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	1814      	adds	r4, r2, r0
 80064d0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80064d4:	414b      	adcs	r3, r1
 80064d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f04f 0100 	mov.w	r1, #0
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	008b      	lsls	r3, r1, #2
 80064f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064f4:	0082      	lsls	r2, r0, #2
 80064f6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80064fa:	f7fa fb37 	bl	8000b6c <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <UART_SetConfig+0x734>)
 8006504:	fba3 1302 	umull	r1, r3, r3, r2
 8006508:	095b      	lsrs	r3, r3, #5
 800650a:	2164      	movs	r1, #100	; 0x64
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	3332      	adds	r3, #50	; 0x32
 8006516:	4a0a      	ldr	r2, [pc, #40]	; (8006540 <UART_SetConfig+0x734>)
 8006518:	fba2 2303 	umull	r2, r3, r2, r3
 800651c:	095b      	lsrs	r3, r3, #5
 800651e:	f003 020f 	and.w	r2, r3, #15
 8006522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4432      	add	r2, r6
 800652a:	609a      	str	r2, [r3, #8]
}
 800652c:	e7ff      	b.n	800652e <UART_SetConfig+0x722>
 800652e:	bf00      	nop
 8006530:	37f4      	adds	r7, #244	; 0xf4
 8006532:	46bd      	mov	sp, r7
 8006534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006538:	40011000 	.word	0x40011000
 800653c:	40011400 	.word	0x40011400
 8006540:	51eb851f 	.word	0x51eb851f

08006544 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006544:	b084      	sub	sp, #16
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	f107 001c 	add.w	r0, r7, #28
 8006552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2b01      	cmp	r3, #1
 800655a:	d122      	bne.n	80065a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d105      	bne.n	8006596 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f94a 	bl	8006830 <USB_CoreReset>
 800659c:	4603      	mov	r3, r0
 800659e:	73fb      	strb	r3, [r7, #15]
 80065a0:	e01a      	b.n	80065d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f93e 	bl	8006830 <USB_CoreReset>
 80065b4:	4603      	mov	r3, r0
 80065b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80065b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d106      	bne.n	80065cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38
 80065ca:	e005      	b.n	80065d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d10b      	bne.n	80065f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f043 0206 	orr.w	r2, r3, #6
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f043 0220 	orr.w	r2, r3, #32
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006602:	b004      	add	sp, #16
 8006604:	4770      	bx	lr

08006606 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f043 0201 	orr.w	r2, r3, #1
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f023 0201 	bic.w	r2, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	2b01      	cmp	r3, #1
 8006666:	d106      	bne.n	8006676 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60da      	str	r2, [r3, #12]
 8006674:	e00b      	b.n	800668e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60da      	str	r2, [r3, #12]
 8006688:	e001      	b.n	800668e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e003      	b.n	8006696 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800668e:	2032      	movs	r0, #50	; 0x32
 8006690:	f7fb fb00 	bl	8001c94 <HAL_Delay>

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	019b      	lsls	r3, r3, #6
 80066b2:	f043 0220 	orr.w	r2, r3, #32
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3301      	adds	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4a09      	ldr	r2, [pc, #36]	; (80066e8 <USB_FlushTxFifo+0x48>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e006      	b.n	80066da <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d0f0      	beq.n	80066ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	00030d40 	.word	0x00030d40

080066ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2210      	movs	r2, #16
 80066fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	3301      	adds	r3, #1
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4a09      	ldr	r2, [pc, #36]	; (800672c <USB_FlushRxFifo+0x40>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e006      	b.n	800671e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b10      	cmp	r3, #16
 800671a:	d0f0      	beq.n	80066fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3714      	adds	r7, #20
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	00030d40 	.word	0x00030d40

08006730 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006730:	b480      	push	{r7}
 8006732:	b089      	sub	sp, #36	; 0x24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	4611      	mov	r1, r2
 800673c:	461a      	mov	r2, r3
 800673e:	460b      	mov	r3, r1
 8006740:	71fb      	strb	r3, [r7, #7]
 8006742:	4613      	mov	r3, r2
 8006744:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800674e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d11a      	bne.n	800678c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006756:	88bb      	ldrh	r3, [r7, #4]
 8006758:	3303      	adds	r3, #3
 800675a:	089b      	lsrs	r3, r3, #2
 800675c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800675e:	2300      	movs	r3, #0
 8006760:	61bb      	str	r3, [r7, #24]
 8006762:	e00f      	b.n	8006784 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	031a      	lsls	r2, r3, #12
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	4413      	add	r3, r2
 800676c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006770:	461a      	mov	r2, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	3304      	adds	r3, #4
 800677c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	3301      	adds	r3, #1
 8006782:	61bb      	str	r3, [r7, #24]
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	429a      	cmp	r2, r3
 800678a:	d3eb      	bcc.n	8006764 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3724      	adds	r7, #36	; 0x24
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800679a:	b480      	push	{r7}
 800679c:	b089      	sub	sp, #36	; 0x24
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	4613      	mov	r3, r2
 80067a6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	3303      	adds	r3, #3
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80067b8:	2300      	movs	r3, #0
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	e00b      	b.n	80067d6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	601a      	str	r2, [r3, #0]
    pDest++;
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	3304      	adds	r3, #4
 80067ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61bb      	str	r3, [r7, #24]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d3ef      	bcc.n	80067be <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80067de:	69fb      	ldr	r3, [r7, #28]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3724      	adds	r7, #36	; 0x24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	4013      	ands	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006804:	68fb      	ldr	r3, [r7, #12]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0301 	and.w	r3, r3, #1
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3301      	adds	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4a13      	ldr	r2, [pc, #76]	; (8006894 <USB_CoreReset+0x64>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e01b      	b.n	8006886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	daf2      	bge.n	800683c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f043 0201 	orr.w	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4a09      	ldr	r2, [pc, #36]	; (8006894 <USB_CoreReset+0x64>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e006      	b.n	8006886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b01      	cmp	r3, #1
 8006882:	d0f0      	beq.n	8006866 <USB_CoreReset+0x36>

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	00030d40 	.word	0x00030d40

08006898 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006898:	b084      	sub	sp, #16
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	f107 001c 	add.w	r0, r7, #28
 80068a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80068b4:	461a      	mov	r2, r3
 80068b6:	2300      	movs	r3, #0
 80068b8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d018      	beq.n	800691c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d10a      	bne.n	8006906 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80068fe:	f043 0304 	orr.w	r3, r3, #4
 8006902:	6013      	str	r3, [r2, #0]
 8006904:	e014      	b.n	8006930 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006914:	f023 0304 	bic.w	r3, r3, #4
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e009      	b.n	8006930 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800692a:	f023 0304 	bic.w	r3, r3, #4
 800692e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006930:	2110      	movs	r1, #16
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff feb4 	bl	80066a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff fed7 	bl	80066ec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	e015      	b.n	8006970 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4413      	add	r3, r2
 800694c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006950:	461a      	mov	r2, r3
 8006952:	f04f 33ff 	mov.w	r3, #4294967295
 8006956:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4413      	add	r3, r2
 8006960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006964:	461a      	mov	r2, r3
 8006966:	2300      	movs	r3, #0
 8006968:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3301      	adds	r3, #1
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	429a      	cmp	r2, r3
 8006976:	d3e5      	bcc.n	8006944 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006978:	2101      	movs	r1, #1
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f8ac 	bl	8006ad8 <USB_DriveVbus>

  HAL_Delay(200U);
 8006980:	20c8      	movs	r0, #200	; 0xc8
 8006982:	f7fb f987 	bl	8001c94 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f04f 32ff 	mov.w	r2, #4294967295
 8006992:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00b      	beq.n	80069b8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a14      	ldr	r2, [pc, #80]	; (80069fc <USB_HostInit+0x164>)
 80069ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a13      	ldr	r2, [pc, #76]	; (8006a00 <USB_HostInit+0x168>)
 80069b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80069b6:	e009      	b.n	80069cc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2280      	movs	r2, #128	; 0x80
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a10      	ldr	r2, [pc, #64]	; (8006a04 <USB_HostInit+0x16c>)
 80069c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a10      	ldr	r2, [pc, #64]	; (8006a08 <USB_HostInit+0x170>)
 80069c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d105      	bne.n	80069de <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f043 0210 	orr.w	r2, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699a      	ldr	r2, [r3, #24]
 80069e2:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <USB_HostInit+0x174>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069f6:	b004      	add	sp, #16
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	01000200 	.word	0x01000200
 8006a00:	00e00300 	.word	0x00e00300
 8006a04:	00600080 	.word	0x00600080
 8006a08:	004000e0 	.word	0x004000e0
 8006a0c:	a3200008 	.word	0xa3200008

08006a10 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	78fb      	ldrb	r3, [r7, #3]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	68f9      	ldr	r1, [r7, #12]
 8006a44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d107      	bne.n	8006a62 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a5e:	6053      	str	r3, [r2, #4]
 8006a60:	e009      	b.n	8006a76 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006a62:	78fb      	ldrb	r3, [r7, #3]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d106      	bne.n	8006a76 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f241 7370 	movw	r3, #6000	; 0x1770
 8006a74:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006aa4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006ab4:	2064      	movs	r0, #100	; 0x64
 8006ab6:	f7fb f8ed 	bl	8001c94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ac8:	200a      	movs	r0, #10
 8006aca:	f7fb f8e3 	bl	8001c94 <HAL_Delay>

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006afc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d109      	bne.n	8006b1c <USB_DriveVbus+0x44>
 8006b08:	78fb      	ldrb	r3, [r7, #3]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d106      	bne.n	8006b1c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b1a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b26:	d109      	bne.n	8006b3c <USB_DriveVbus+0x64>
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b3a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	0c5b      	lsrs	r3, r3, #17
 8006b68:	f003 0303 	and.w	r3, r3, #3
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	b29b      	uxth	r3, r3
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
	...

08006b9c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b087      	sub	sp, #28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	461a      	mov	r2, r3
 8006baa:	4603      	mov	r3, r0
 8006bac:	70fb      	strb	r3, [r7, #3]
 8006bae:	460b      	mov	r3, r1
 8006bb0:	70bb      	strb	r3, [r7, #2]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8006bd0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006bd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d87e      	bhi.n	8006cd8 <USB_HC_Init+0x13c>
 8006bda:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <USB_HC_Init+0x44>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006bf1 	.word	0x08006bf1
 8006be4:	08006c9b 	.word	0x08006c9b
 8006be8:	08006bf1 	.word	0x08006bf1
 8006bec:	08006c5d 	.word	0x08006c5d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f240 439d 	movw	r3, #1181	; 0x49d
 8006c02:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006c04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	da10      	bge.n	8006c2e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c0c:	78fb      	ldrb	r3, [r7, #3]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	78fa      	ldrb	r2, [r7, #3]
 8006c1c:	0151      	lsls	r1, r2, #5
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	440a      	add	r2, r1
 8006c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c2a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006c2c:	e057      	b.n	8006cde <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d051      	beq.n	8006cde <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006c3a:	78fb      	ldrb	r3, [r7, #3]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	78fa      	ldrb	r2, [r7, #3]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c54:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006c58:	60d3      	str	r3, [r2, #12]
      break;
 8006c5a:	e040      	b.n	8006cde <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c5c:	78fb      	ldrb	r3, [r7, #3]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c68:	461a      	mov	r2, r3
 8006c6a:	f240 639d 	movw	r3, #1693	; 0x69d
 8006c6e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	da34      	bge.n	8006ce2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	015a      	lsls	r2, r3, #5
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	78fa      	ldrb	r2, [r7, #3]
 8006c88:	0151      	lsls	r1, r2, #5
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	440a      	add	r2, r1
 8006c8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c96:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006c98:	e023      	b.n	8006ce2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f240 2325 	movw	r3, #549	; 0x225
 8006cac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	da17      	bge.n	8006ce6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006cb6:	78fb      	ldrb	r3, [r7, #3]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	78fa      	ldrb	r2, [r7, #3]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006cd4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006cd6:	e006      	b.n	8006ce6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	75fb      	strb	r3, [r7, #23]
      break;
 8006cdc:	e004      	b.n	8006ce8 <USB_HC_Init+0x14c>
      break;
 8006cde:	bf00      	nop
 8006ce0:	e002      	b.n	8006ce8 <USB_HC_Init+0x14c>
      break;
 8006ce2:	bf00      	nop
 8006ce4:	e000      	b.n	8006ce8 <USB_HC_Init+0x14c>
      break;
 8006ce6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cee:	699a      	ldr	r2, [r3, #24]
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cfc:	68b9      	ldr	r1, [r7, #8]
 8006cfe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006d02:	4313      	orrs	r3, r2
 8006d04:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da03      	bge.n	8006d22 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d1e:	613b      	str	r3, [r7, #16]
 8006d20:	e001      	b.n	8006d26 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8006d26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d103      	bne.n	8006d36 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e001      	b.n	8006d3a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d3a:	787b      	ldrb	r3, [r7, #1]
 8006d3c:	059b      	lsls	r3, r3, #22
 8006d3e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d42:	78bb      	ldrb	r3, [r7, #2]
 8006d44:	02db      	lsls	r3, r3, #11
 8006d46:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d4a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d50:	049b      	lsls	r3, r3, #18
 8006d52:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d56:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d5e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	0159      	lsls	r1, r3, #5
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	440b      	add	r3, r1
 8006d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d70:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d76:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006d78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d7c:	2b03      	cmp	r3, #3
 8006d7e:	d10f      	bne.n	8006da0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	78fa      	ldrb	r2, [r7, #3]
 8006d90:	0151      	lsls	r1, r2, #5
 8006d92:	68ba      	ldr	r2, [r7, #8]
 8006d94:	440a      	add	r2, r1
 8006d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d9e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop

08006db0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08c      	sub	sp, #48	; 0x30
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	785b      	ldrb	r3, [r3, #1]
 8006dc6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dcc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d028      	beq.n	8006e2c <USB_HC_StartXfer+0x7c>
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	791b      	ldrb	r3, [r3, #4]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d124      	bne.n	8006e2c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8006de2:	79fb      	ldrb	r3, [r7, #7]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10b      	bne.n	8006e00 <USB_HC_StartXfer+0x50>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	795b      	ldrb	r3, [r3, #5]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d107      	bne.n	8006e00 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	785b      	ldrb	r3, [r3, #1]
 8006df4:	4619      	mov	r1, r3
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fa2e 	bl	8007258 <USB_DoPing>
      return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e113      	b.n	8007028 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d112      	bne.n	8006e2c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	0151      	lsls	r1, r2, #5
 8006e18:	6a3a      	ldr	r2, [r7, #32]
 8006e1a:	440a      	add	r2, r1
 8006e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e20:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006e24:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d018      	beq.n	8006e66 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	8912      	ldrh	r2, [r2, #8]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	8912      	ldrh	r2, [r2, #8]
 8006e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e48:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006e4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e4c:	8b7b      	ldrh	r3, [r7, #26]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d90b      	bls.n	8006e6a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006e52:	8b7b      	ldrh	r3, [r7, #26]
 8006e54:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	8912      	ldrh	r2, [r2, #8]
 8006e5c:	fb02 f203 	mul.w	r2, r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	611a      	str	r2, [r3, #16]
 8006e64:	e001      	b.n	8006e6a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8006e66:	2301      	movs	r3, #1
 8006e68:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	78db      	ldrb	r3, [r3, #3]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d006      	beq.n	8006e80 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006e72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	8912      	ldrh	r2, [r2, #8]
 8006e78:	fb02 f203 	mul.w	r2, r2, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006e88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e8a:	04d9      	lsls	r1, r3, #19
 8006e8c:	4b68      	ldr	r3, [pc, #416]	; (8007030 <USB_HC_StartXfer+0x280>)
 8006e8e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e90:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	7a9b      	ldrb	r3, [r3, #10]
 8006e96:	075b      	lsls	r3, r3, #29
 8006e98:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	0148      	lsls	r0, r1, #5
 8006ea0:	6a39      	ldr	r1, [r7, #32]
 8006ea2:	4401      	add	r1, r0
 8006ea4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ea8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006eaa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006eac:	79fb      	ldrb	r3, [r7, #7]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d009      	beq.n	8006ec6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	68d9      	ldr	r1, [r3, #12]
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bf0c      	ite	eq
 8006ed6:	2301      	moveq	r3, #1
 8006ed8:	2300      	movne	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	0151      	lsls	r1, r2, #5
 8006ef0:	6a3a      	ldr	r2, [r7, #32]
 8006ef2:	440a      	add	r2, r1
 8006ef4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ef8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006efc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	7e7b      	ldrb	r3, [r7, #25]
 8006f0e:	075b      	lsls	r3, r3, #29
 8006f10:	69f9      	ldr	r1, [r7, #28]
 8006f12:	0148      	lsls	r0, r1, #5
 8006f14:	6a39      	ldr	r1, [r7, #32]
 8006f16:	4401      	add	r1, r0
 8006f18:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a41      	ldr	r2, [pc, #260]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f30:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f32:	4b40      	ldr	r3, [pc, #256]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f3a:	4a3e      	ldr	r2, [pc, #248]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f3c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	78db      	ldrb	r3, [r3, #3]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d006      	beq.n	8006f54 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f46:	4b3b      	ldr	r3, [pc, #236]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4e:	4a39      	ldr	r2, [pc, #228]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	e005      	b.n	8006f60 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f54:	4b37      	ldr	r3, [pc, #220]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f5c:	4a35      	ldr	r2, [pc, #212]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f5e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f60:	4b34      	ldr	r3, [pc, #208]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	4a32      	ldr	r2, [pc, #200]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f6a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4b2e      	ldr	r3, [pc, #184]	; (8007034 <USB_HC_StartXfer+0x284>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e04e      	b.n	8007028 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	78db      	ldrb	r3, [r3, #3]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d149      	bne.n	8007026 <USB_HC_StartXfer+0x276>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d045      	beq.n	8007026 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	79db      	ldrb	r3, [r3, #7]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d830      	bhi.n	8007004 <USB_HC_StartXfer+0x254>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <USB_HC_StartXfer+0x1f8>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fb9 	.word	0x08006fb9
 8006fac:	08006fdd 	.word	0x08006fdd
 8006fb0:	08006fb9 	.word	0x08006fb9
 8006fb4:	08006fdd 	.word	0x08006fdd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	691b      	ldr	r3, [r3, #16]
 8006fbc:	3303      	adds	r3, #3
 8006fbe:	089b      	lsrs	r3, r3, #2
 8006fc0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006fc2:	8afa      	ldrh	r2, [r7, #22]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d91c      	bls.n	8007008 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	f043 0220 	orr.w	r2, r3, #32
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fda:	e015      	b.n	8007008 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	3303      	adds	r3, #3
 8006fe2:	089b      	lsrs	r3, r3, #2
 8006fe4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fe6:	8afa      	ldrh	r2, [r7, #22]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d90a      	bls.n	800700c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	619a      	str	r2, [r3, #24]
        }
        break;
 8007002:	e003      	b.n	800700c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007004:	bf00      	nop
 8007006:	e002      	b.n	800700e <USB_HC_StartXfer+0x25e>
        break;
 8007008:	bf00      	nop
 800700a:	e000      	b.n	800700e <USB_HC_StartXfer+0x25e>
        break;
 800700c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	68d9      	ldr	r1, [r3, #12]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	785a      	ldrb	r2, [r3, #1]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	b29b      	uxth	r3, r3
 800701c:	2000      	movs	r0, #0
 800701e:	9000      	str	r0, [sp, #0]
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f7ff fb85 	bl	8006730 <USB_WritePacket>
  }

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3728      	adds	r7, #40	; 0x28
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	1ff80000 	.word	0x1ff80000
 8007034:	200000b4 	.word	0x200000b4

08007038 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	b29b      	uxth	r3, r3
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800705a:	b480      	push	{r7}
 800705c:	b087      	sub	sp, #28
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4413      	add	r3, r2
 800707a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	0c9b      	lsrs	r3, r3, #18
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <USB_HC_Halt+0x3a>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d16c      	bne.n	800716e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	4413      	add	r3, r2
 800709c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	0151      	lsls	r1, r2, #5
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	440a      	add	r2, r1
 80070aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070b2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d143      	bne.n	8007148 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4413      	add	r3, r2
 8007108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	440a      	add	r2, r1
 8007116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800711a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800711e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	3301      	adds	r3, #1
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712c:	d81d      	bhi.n	800716a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	4413      	add	r3, r2
 8007136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007144:	d0ec      	beq.n	8007120 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007146:	e080      	b.n	800724a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	4413      	add	r3, r2
 8007150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	440a      	add	r2, r1
 800715e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007166:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007168:	e06f      	b.n	800724a <USB_HC_Halt+0x1f0>
          break;
 800716a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800716c:	e06d      	b.n	800724a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	4413      	add	r3, r2
 8007176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	0151      	lsls	r1, r2, #5
 8007180:	693a      	ldr	r2, [r7, #16]
 8007182:	440a      	add	r2, r1
 8007184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800718c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d143      	bne.n	8007226 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	0151      	lsls	r1, r2, #5
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	440a      	add	r2, r1
 80071f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071fc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	3301      	adds	r3, #1
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800720a:	d81d      	bhi.n	8007248 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4413      	add	r3, r2
 8007214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800721e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007222:	d0ec      	beq.n	80071fe <USB_HC_Halt+0x1a4>
 8007224:	e011      	b.n	800724a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	440a      	add	r2, r1
 800723c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	e000      	b.n	800724a <USB_HC_Halt+0x1f0>
          break;
 8007248:	bf00      	nop
    }
  }

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	460b      	mov	r3, r1
 8007262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800726c:	2301      	movs	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	04da      	lsls	r2, r3, #19
 8007274:	4b15      	ldr	r3, [pc, #84]	; (80072cc <USB_DoPing+0x74>)
 8007276:	4013      	ands	r3, r2
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	0151      	lsls	r1, r2, #5
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	440a      	add	r2, r1
 8007280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007288:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	4413      	add	r3, r2
 8007292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80072a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b6:	461a      	mov	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	1ff80000 	.word	0x1ff80000

080072d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff f9a1 	bl	8006628 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80072e6:	2110      	movs	r1, #16
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff f9d9 	bl	80066a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff f9fc 	bl	80066ec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072f4:	2300      	movs	r3, #0
 80072f6:	613b      	str	r3, [r7, #16]
 80072f8:	e01f      	b.n	800733a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	4413      	add	r3, r2
 8007302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007310:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007318:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007320:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4413      	add	r3, r2
 800732a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732e:	461a      	mov	r2, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	3301      	adds	r3, #1
 8007338:	613b      	str	r3, [r7, #16]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b0f      	cmp	r3, #15
 800733e:	d9dc      	bls.n	80072fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
 8007344:	e034      	b.n	80073b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800735c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007364:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800736c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737a:	461a      	mov	r2, r3
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	3301      	adds	r3, #1
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800738c:	d80c      	bhi.n	80073a8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073a4:	d0ec      	beq.n	8007380 <USB_StopHost+0xb0>
 80073a6:	e000      	b.n	80073aa <USB_StopHost+0xda>
        break;
 80073a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	3301      	adds	r3, #1
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	2b0f      	cmp	r3, #15
 80073b4:	d9c7      	bls.n	8007346 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073bc:	461a      	mov	r2, r3
 80073be:	f04f 33ff 	mov.w	r3, #4294967295
 80073c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff f91a 	bl	8006606 <USB_EnableGlobalInt>

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073dc:	b590      	push	{r4, r7, lr}
 80073de:	b089      	sub	sp, #36	; 0x24
 80073e0:	af04      	add	r7, sp, #16
 80073e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80073e4:	2301      	movs	r3, #1
 80073e6:	2202      	movs	r2, #2
 80073e8:	2102      	movs	r1, #2
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fc66 	bl	8007cbc <USBH_FindInterface>
 80073f0:	4603      	mov	r3, r0
 80073f2:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2bff      	cmp	r3, #255	; 0xff
 80073f8:	d002      	beq.n	8007400 <USBH_CDC_InterfaceInit+0x24>
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d901      	bls.n	8007404 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007400:	2302      	movs	r3, #2
 8007402:	e13d      	b.n	8007680 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	4619      	mov	r1, r3
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fc3b 	bl	8007c84 <USBH_SelectInterface>
 800740e:	4603      	mov	r3, r0
 8007410:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007418:	2302      	movs	r3, #2
 800741a:	e131      	b.n	8007680 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007422:	2050      	movs	r0, #80	; 0x50
 8007424:	f002 fa02 	bl	800982c <malloc>
 8007428:	4603      	mov	r3, r0
 800742a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007432:	69db      	ldr	r3, [r3, #28]
 8007434:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800743c:	2302      	movs	r3, #2
 800743e:	e11f      	b.n	8007680 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007440:	2250      	movs	r2, #80	; 0x50
 8007442:	2100      	movs	r1, #0
 8007444:	68b8      	ldr	r0, [r7, #8]
 8007446:	f002 fa01 	bl	800984c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800744a:	7bfb      	ldrb	r3, [r7, #15]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	211a      	movs	r1, #26
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	4413      	add	r3, r2
 8007456:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b25b      	sxtb	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	da15      	bge.n	800748e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	211a      	movs	r1, #26
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	4413      	add	r3, r2
 800746e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007478:	7bfb      	ldrb	r3, [r7, #15]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	211a      	movs	r1, #26
 800747e:	fb01 f303 	mul.w	r3, r1, r3
 8007482:	4413      	add	r3, r2
 8007484:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007488:	881a      	ldrh	r2, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f001 fe32 	bl	80090fe <USBH_AllocPipe>
 800749a:	4603      	mov	r3, r0
 800749c:	461a      	mov	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	7819      	ldrb	r1, [r3, #0]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	7858      	ldrb	r0, [r3, #1]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	8952      	ldrh	r2, [r2, #10]
 80074ba:	9202      	str	r2, [sp, #8]
 80074bc:	2203      	movs	r2, #3
 80074be:	9201      	str	r2, [sp, #4]
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	4623      	mov	r3, r4
 80074c4:	4602      	mov	r2, r0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fdea 	bl	80090a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2200      	movs	r2, #0
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f002 f8f9 	bl	80096cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80074da:	2300      	movs	r3, #0
 80074dc:	2200      	movs	r2, #0
 80074de:	210a      	movs	r1, #10
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fbeb 	bl	8007cbc <USBH_FindInterface>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074ea:	7bfb      	ldrb	r3, [r7, #15]
 80074ec:	2bff      	cmp	r3, #255	; 0xff
 80074ee:	d002      	beq.n	80074f6 <USBH_CDC_InterfaceInit+0x11a>
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d901      	bls.n	80074fa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074f6:	2302      	movs	r3, #2
 80074f8:	e0c2      	b.n	8007680 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	211a      	movs	r1, #26
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	4413      	add	r3, r2
 8007506:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	b25b      	sxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	da16      	bge.n	8007540 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	211a      	movs	r1, #26
 8007518:	fb01 f303 	mul.w	r3, r1, r3
 800751c:	4413      	add	r3, r2
 800751e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007522:	781a      	ldrb	r2, [r3, #0]
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	211a      	movs	r1, #26
 800752e:	fb01 f303 	mul.w	r3, r1, r3
 8007532:	4413      	add	r3, r2
 8007534:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007538:	881a      	ldrh	r2, [r3, #0]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	835a      	strh	r2, [r3, #26]
 800753e:	e015      	b.n	800756c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	211a      	movs	r1, #26
 8007546:	fb01 f303 	mul.w	r3, r1, r3
 800754a:	4413      	add	r3, r2
 800754c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007550:	781a      	ldrb	r2, [r3, #0]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	211a      	movs	r1, #26
 800755c:	fb01 f303 	mul.w	r3, r1, r3
 8007560:	4413      	add	r3, r2
 8007562:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007566:	881a      	ldrh	r2, [r3, #0]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	211a      	movs	r1, #26
 8007572:	fb01 f303 	mul.w	r3, r1, r3
 8007576:	4413      	add	r3, r2
 8007578:	f203 3356 	addw	r3, r3, #854	; 0x356
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	b25b      	sxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	da16      	bge.n	80075b2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007584:	7bfb      	ldrb	r3, [r7, #15]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	211a      	movs	r1, #26
 800758a:	fb01 f303 	mul.w	r3, r1, r3
 800758e:	4413      	add	r3, r2
 8007590:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007594:	781a      	ldrb	r2, [r3, #0]
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	211a      	movs	r1, #26
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075aa:	881a      	ldrh	r2, [r3, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	835a      	strh	r2, [r3, #26]
 80075b0:	e015      	b.n	80075de <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	211a      	movs	r1, #26
 80075b8:	fb01 f303 	mul.w	r3, r1, r3
 80075bc:	4413      	add	r3, r2
 80075be:	f203 3356 	addw	r3, r3, #854	; 0x356
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	211a      	movs	r1, #26
 80075ce:	fb01 f303 	mul.w	r3, r1, r3
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80075d8:	881a      	ldrh	r2, [r3, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	7b9b      	ldrb	r3, [r3, #14]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fd8a 	bl	80090fe <USBH_AllocPipe>
 80075ea:	4603      	mov	r3, r0
 80075ec:	461a      	mov	r2, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	7bdb      	ldrb	r3, [r3, #15]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 fd80 	bl	80090fe <USBH_AllocPipe>
 80075fe:	4603      	mov	r3, r0
 8007600:	461a      	mov	r2, r3
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	7b59      	ldrb	r1, [r3, #13]
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	7b98      	ldrb	r0, [r3, #14]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	8b12      	ldrh	r2, [r2, #24]
 800761e:	9202      	str	r2, [sp, #8]
 8007620:	2202      	movs	r2, #2
 8007622:	9201      	str	r2, [sp, #4]
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	4623      	mov	r3, r4
 8007628:	4602      	mov	r2, r0
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f001 fd38 	bl	80090a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	7b19      	ldrb	r1, [r3, #12]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	7bd8      	ldrb	r0, [r3, #15]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	8b52      	ldrh	r2, [r2, #26]
 8007648:	9202      	str	r2, [sp, #8]
 800764a:	2202      	movs	r2, #2
 800764c:	9201      	str	r2, [sp, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	4623      	mov	r3, r4
 8007652:	4602      	mov	r2, r0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 fd23 	bl	80090a0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	7b5b      	ldrb	r3, [r3, #13]
 8007666:	2200      	movs	r2, #0
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f002 f82e 	bl	80096cc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	7b1b      	ldrb	r3, [r3, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f002 f827 	bl	80096cc <USBH_LL_SetToggle>

  return USBH_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	bd90      	pop	{r4, r7, pc}

08007688 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007696:	69db      	ldr	r3, [r3, #28]
 8007698:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f001 fd18 	bl	80090de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f001 fd43 	bl	8009140 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	7b1b      	ldrb	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00e      	beq.n	80076e6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	7b1b      	ldrb	r3, [r3, #12]
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 fd05 	bl	80090de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	7b1b      	ldrb	r3, [r3, #12]
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fd30 	bl	8009140 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	7b5b      	ldrb	r3, [r3, #13]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00e      	beq.n	800770c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	7b5b      	ldrb	r3, [r3, #13]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 fcf2 	bl	80090de <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	7b5b      	ldrb	r3, [r3, #13]
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f001 fd1d 	bl	8009140 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	4618      	mov	r0, r3
 8007722:	f002 f88b 	bl	800983c <free>
    phost->pActiveClass->pData = 0U;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800772c:	2200      	movs	r2, #0
 800772e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007748:	69db      	ldr	r3, [r3, #28]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3340      	adds	r3, #64	; 0x40
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f8b1 	bl	80078ba <GetLineCoding>
 8007758:	4603      	mov	r3, r0
 800775a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d105      	bne.n	800776e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007768:	2102      	movs	r1, #2
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800776e:	7afb      	ldrb	r3, [r7, #11]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007780:	2301      	movs	r3, #1
 8007782:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007798:	2b04      	cmp	r3, #4
 800779a:	d877      	bhi.n	800788c <USBH_CDC_Process+0x114>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <USBH_CDC_Process+0x2c>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077b9 	.word	0x080077b9
 80077a8:	080077bf 	.word	0x080077bf
 80077ac:	080077ef 	.word	0x080077ef
 80077b0:	08007863 	.word	0x08007863
 80077b4:	08007871 	.word	0x08007871
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
      break;
 80077bc:	e06d      	b.n	800789a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f897 	bl	80078f8 <SetLineCoding>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80077dc:	e058      	b.n	8007890 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d055      	beq.n	8007890 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2204      	movs	r2, #4
 80077e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80077ec:	e050      	b.n	8007890 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	3340      	adds	r3, #64	; 0x40
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f860 	bl	80078ba <GetLineCoding>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d126      	bne.n	8007852 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007816:	791b      	ldrb	r3, [r3, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d13b      	bne.n	8007894 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007826:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007828:	429a      	cmp	r2, r3
 800782a:	d133      	bne.n	8007894 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007836:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007838:	429a      	cmp	r2, r3
 800783a:	d12b      	bne.n	8007894 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007844:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007846:	429a      	cmp	r2, r3
 8007848:	d124      	bne.n	8007894 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f958 	bl	8007b00 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007850:	e020      	b.n	8007894 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d01d      	beq.n	8007894 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	2204      	movs	r2, #4
 800785c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007860:	e018      	b.n	8007894 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f867 	bl	8007936 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f8da 	bl	8007a22 <CDC_ProcessReception>
      break;
 800786e:	e014      	b.n	800789a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007870:	2100      	movs	r1, #0
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 ffe3 	bl	800883e <USBH_ClrFeature>
 8007878:	4603      	mov	r3, r0
 800787a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10a      	bne.n	8007898 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800788a:	e005      	b.n	8007898 <USBH_CDC_Process+0x120>

    default:
      break;
 800788c:	bf00      	nop
 800788e:	e004      	b.n	800789a <USBH_CDC_Process+0x122>
      break;
 8007890:	bf00      	nop
 8007892:	e002      	b.n	800789a <USBH_CDC_Process+0x122>
      break;
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <USBH_CDC_Process+0x122>
      break;
 8007898:	bf00      	nop

  }

  return status;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b082      	sub	sp, #8
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	22a1      	movs	r2, #161	; 0xa1
 80078c8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2221      	movs	r2, #33	; 0x21
 80078ce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2207      	movs	r2, #7
 80078e0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2207      	movs	r2, #7
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f001 f988 	bl	8008bfe <USBH_CtlReq>
 80078ee:	4603      	mov	r3, r0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2221      	movs	r2, #33	; 0x21
 8007906:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2207      	movs	r2, #7
 800791e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2207      	movs	r2, #7
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f001 f969 	bl	8008bfe <USBH_CtlReq>
 800792c:	4603      	mov	r3, r0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b086      	sub	sp, #24
 800793a:	af02      	add	r7, sp, #8
 800793c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007944:	69db      	ldr	r3, [r3, #28]
 8007946:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007948:	2300      	movs	r3, #0
 800794a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007952:	2b01      	cmp	r3, #1
 8007954:	d002      	beq.n	800795c <CDC_ProcessTransmission+0x26>
 8007956:	2b02      	cmp	r3, #2
 8007958:	d023      	beq.n	80079a2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800795a:	e05e      	b.n	8007a1a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	8b12      	ldrh	r2, [r2, #24]
 8007964:	4293      	cmp	r3, r2
 8007966:	d90b      	bls.n	8007980 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	69d9      	ldr	r1, [r3, #28]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	8b1a      	ldrh	r2, [r3, #24]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	7b5b      	ldrb	r3, [r3, #13]
 8007974:	2001      	movs	r0, #1
 8007976:	9000      	str	r0, [sp, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 fb4e 	bl	800901a <USBH_BulkSendData>
 800797e:	e00b      	b.n	8007998 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	7b5b      	ldrb	r3, [r3, #13]
 800798e:	2001      	movs	r0, #1
 8007990:	9000      	str	r0, [sp, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f001 fb41 	bl	800901a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079a0:	e03b      	b.n	8007a1a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	7b5b      	ldrb	r3, [r3, #13]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fe65 	bl	8009678 <USBH_LL_GetURBState>
 80079ae:	4603      	mov	r3, r0
 80079b0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079b2:	7afb      	ldrb	r3, [r7, #11]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d128      	bne.n	8007a0a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	8b12      	ldrh	r2, [r2, #24]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d90e      	bls.n	80079e2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	8b12      	ldrh	r2, [r2, #24]
 80079cc:	1a9a      	subs	r2, r3, r2
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	8b12      	ldrh	r2, [r2, #24]
 80079da:	441a      	add	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	61da      	str	r2, [r3, #28]
 80079e0:	e002      	b.n	80079e8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d004      	beq.n	80079fa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80079f8:	e00e      	b.n	8007a18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f868 	bl	8007ad8 <USBH_CDC_TransmitCallback>
      break;
 8007a08:	e006      	b.n	8007a18 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d103      	bne.n	8007a18 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a18:	bf00      	nop
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b086      	sub	sp, #24
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a30:	69db      	ldr	r3, [r3, #28]
 8007a32:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a34:	2300      	movs	r3, #0
 8007a36:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d002      	beq.n	8007a48 <CDC_ProcessReception+0x26>
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d00e      	beq.n	8007a64 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a46:	e043      	b.n	8007ad0 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	6a19      	ldr	r1, [r3, #32]
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	8b5a      	ldrh	r2, [r3, #26]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	7b1b      	ldrb	r3, [r3, #12]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 fb05 	bl	8009064 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007a62:	e035      	b.n	8007ad0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	7b1b      	ldrb	r3, [r3, #12]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f001 fe04 	bl	8009678 <USBH_LL_GetURBState>
 8007a70:	4603      	mov	r3, r0
 8007a72:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007a74:	7cfb      	ldrb	r3, [r7, #19]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d129      	bne.n	8007ace <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	7b1b      	ldrb	r3, [r3, #12]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 fd67 	bl	8009554 <USBH_LL_GetLastXferSize>
 8007a86:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d016      	beq.n	8007ac0 <CDC_ProcessReception+0x9e>
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	8b5b      	ldrh	r3, [r3, #26]
 8007a96:	461a      	mov	r2, r3
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d910      	bls.n	8007ac0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1ad2      	subs	r2, r2, r3
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	6a1a      	ldr	r2, [r3, #32]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	441a      	add	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2203      	movs	r2, #3
 8007aba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007abe:	e006      	b.n	8007ace <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f80f 	bl	8007aec <USBH_CDC_ReceiveCallback>
      break;
 8007ace:	bf00      	nop
  }
}
 8007ad0:	bf00      	nop
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d101      	bne.n	8007b2c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b28:	2302      	movs	r3, #2
 8007b2a:	e029      	b.n	8007b80 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	79fa      	ldrb	r2, [r7, #7]
 8007b30:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f81f 	bl	8007b88 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f001 fc37 	bl	80093ec <USBH_LL_Init>

  return USBH_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e009      	b.n	8007bae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	33e0      	adds	r3, #224	; 0xe0
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3301      	adds	r3, #1
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b0e      	cmp	r3, #14
 8007bb2:	d9f2      	bls.n	8007b9a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	e009      	b.n	8007bce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd4:	d3f1      	bcc.n	8007bba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2240      	movs	r2, #64	; 0x40
 8007bfa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d016      	beq.n	8007c72 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10e      	bne.n	8007c6c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007c54:	1c59      	adds	r1, r3, #1
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	33de      	adds	r3, #222	; 0xde
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]
 8007c6a:	e004      	b.n	8007c76 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	73fb      	strb	r3, [r7, #15]
 8007c70:	e001      	b.n	8007c76 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007c72:	2302      	movs	r3, #2
 8007c74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d204      	bcs.n	8007caa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007ca8:	e001      	b.n	8007cae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007caa:	2302      	movs	r3, #2
 8007cac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	70fb      	strb	r3, [r7, #3]
 8007cce:	460b      	mov	r3, r1
 8007cd0:	70bb      	strb	r3, [r7, #2]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ce4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ce6:	e025      	b.n	8007d34 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	221a      	movs	r2, #26
 8007cec:	fb02 f303 	mul.w	r3, r2, r3
 8007cf0:	3308      	adds	r3, #8
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	3302      	adds	r3, #2
 8007cf8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	795b      	ldrb	r3, [r3, #5]
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d002      	beq.n	8007d0a <USBH_FindInterface+0x4e>
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	2bff      	cmp	r3, #255	; 0xff
 8007d08:	d111      	bne.n	8007d2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d0e:	78ba      	ldrb	r2, [r7, #2]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d002      	beq.n	8007d1a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d14:	78bb      	ldrb	r3, [r7, #2]
 8007d16:	2bff      	cmp	r3, #255	; 0xff
 8007d18:	d109      	bne.n	8007d2e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d1e:	787a      	ldrb	r2, [r7, #1]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d002      	beq.n	8007d2a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d24:	787b      	ldrb	r3, [r7, #1]
 8007d26:	2bff      	cmp	r3, #255	; 0xff
 8007d28:	d101      	bne.n	8007d2e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	e006      	b.n	8007d3c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	3301      	adds	r3, #1
 8007d32:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d9d6      	bls.n	8007ce8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007d3a:	23ff      	movs	r3, #255	; 0xff
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	371c      	adds	r7, #28
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fb87 	bl	8009464 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007d56:	2101      	movs	r1, #1
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f001 fca0 	bl	800969e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af04      	add	r7, sp, #16
 8007d6e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007d70:	2302      	movs	r3, #2
 8007d72:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d102      	bne.n	8007d8a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2203      	movs	r2, #3
 8007d88:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b0b      	cmp	r3, #11
 8007d92:	f200 81b3 	bhi.w	80080fc <USBH_Process+0x394>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <USBH_Process+0x34>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007dcd 	.word	0x08007dcd
 8007da0:	08007dff 	.word	0x08007dff
 8007da4:	08007e67 	.word	0x08007e67
 8007da8:	08008097 	.word	0x08008097
 8007dac:	080080fd 	.word	0x080080fd
 8007db0:	08007f0b 	.word	0x08007f0b
 8007db4:	0800803d 	.word	0x0800803d
 8007db8:	08007f41 	.word	0x08007f41
 8007dbc:	08007f61 	.word	0x08007f61
 8007dc0:	08007f81 	.word	0x08007f81
 8007dc4:	08007faf 	.word	0x08007faf
 8007dc8:	0800807f 	.word	0x0800807f
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f000 8193 	beq.w	8008100 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007de0:	20c8      	movs	r0, #200	; 0xc8
 8007de2:	f001 fca6 	bl	8009732 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fb99 	bl	800951e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007dfc:	e180      	b.n	8008100 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d107      	bne.n	8007e18 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007e16:	e182      	b.n	800811e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e22:	d914      	bls.n	8007e4e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d903      	bls.n	8007e46 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	220d      	movs	r2, #13
 8007e42:	701a      	strb	r2, [r3, #0]
      break;
 8007e44:	e16b      	b.n	800811e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	701a      	strb	r2, [r3, #0]
      break;
 8007e4c:	e167      	b.n	800811e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007e54:	f103 020a 	add.w	r2, r3, #10
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007e5e:	200a      	movs	r0, #10
 8007e60:	f001 fc67 	bl	8009732 <USBH_Delay>
      break;
 8007e64:	e15b      	b.n	800811e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d005      	beq.n	8007e7c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007e76:	2104      	movs	r1, #4
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007e7c:	2064      	movs	r0, #100	; 0x64
 8007e7e:	f001 fc58 	bl	8009732 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 fb24 	bl	80094d0 <USBH_LL_GetSpeed>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2205      	movs	r2, #5
 8007e96:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 f92f 	bl	80090fe <USBH_AllocPipe>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007ea8:	2180      	movs	r1, #128	; 0x80
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f001 f927 	bl	80090fe <USBH_AllocPipe>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	7919      	ldrb	r1, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007ecc:	b292      	uxth	r2, r2
 8007ece:	9202      	str	r2, [sp, #8]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	9201      	str	r2, [sp, #4]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2280      	movs	r2, #128	; 0x80
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f001 f8e0 	bl	80090a0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	7959      	ldrb	r1, [r3, #5]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ef4:	b292      	uxth	r2, r2
 8007ef6:	9202      	str	r2, [sp, #8]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	9201      	str	r2, [sp, #4]
 8007efc:	9300      	str	r3, [sp, #0]
 8007efe:	4603      	mov	r3, r0
 8007f00:	2200      	movs	r2, #0
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 f8cc 	bl	80090a0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f08:	e109      	b.n	800811e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f90c 	bl	8008128 <USBH_HandleEnum>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	f040 80f3 	bne.w	8008104 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d103      	bne.n	8007f38 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2208      	movs	r2, #8
 8007f34:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f36:	e0e5      	b.n	8008104 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2207      	movs	r2, #7
 8007f3c:	701a      	strb	r2, [r3, #0]
      break;
 8007f3e:	e0e1      	b.n	8008104 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80de 	beq.w	8008108 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f52:	2101      	movs	r1, #1
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2208      	movs	r2, #8
 8007f5c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007f5e:	e0d3      	b.n	8008108 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fc20 	bl	80087b0 <USBH_SetCfg>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 80ca 	bne.w	800810c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2209      	movs	r2, #9
 8007f7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007f7e:	e0c5      	b.n	800810c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00b      	beq.n	8007fa6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007f8e:	2101      	movs	r1, #1
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fc30 	bl	80087f6 <USBH_SetFeature>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f040 80b9 	bne.w	8008110 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	220a      	movs	r2, #10
 8007fa2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007fa4:	e0b4      	b.n	8008110 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	220a      	movs	r2, #10
 8007faa:	701a      	strb	r2, [r3, #0]
      break;
 8007fac:	e0b0      	b.n	8008110 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 80ad 	beq.w	8008114 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]
 8007fc6:	e016      	b.n	8007ff6 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007fc8:	7bfa      	ldrb	r2, [r7, #15]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	32de      	adds	r2, #222	; 0xde
 8007fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd2:	791a      	ldrb	r2, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d108      	bne.n	8007ff0 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007fde:	7bfa      	ldrb	r2, [r7, #15]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	32de      	adds	r2, #222	; 0xde
 8007fe4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007fee:	e005      	b.n	8007ffc <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	73fb      	strb	r3, [r7, #15]
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0e5      	beq.n	8007fc8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008002:	2b00      	cmp	r3, #0
 8008004:	d016      	beq.n	8008034 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	4798      	blx	r3
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d109      	bne.n	800802c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2206      	movs	r2, #6
 800801c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008024:	2103      	movs	r1, #3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800802a:	e073      	b.n	8008114 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	220d      	movs	r2, #13
 8008030:	701a      	strb	r2, [r3, #0]
      break;
 8008032:	e06f      	b.n	8008114 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	220d      	movs	r2, #13
 8008038:	701a      	strb	r2, [r3, #0]
      break;
 800803a:	e06b      	b.n	8008114 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d017      	beq.n	8008076 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
 8008052:	4603      	mov	r3, r0
 8008054:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008056:	7bbb      	ldrb	r3, [r7, #14]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d103      	bne.n	8008066 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	220b      	movs	r2, #11
 8008062:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008064:	e058      	b.n	8008118 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d154      	bne.n	8008118 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	220d      	movs	r2, #13
 8008072:	701a      	strb	r2, [r3, #0]
      break;
 8008074:	e050      	b.n	8008118 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	220d      	movs	r2, #13
 800807a:	701a      	strb	r2, [r3, #0]
      break;
 800807c:	e04c      	b.n	8008118 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008084:	2b00      	cmp	r3, #0
 8008086:	d049      	beq.n	800811c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
      }
      break;
 8008094:	e042      	b.n	800811c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7ff fd72 	bl	8007b88 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d005      	beq.n	80080d8 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080d2:	2105      	movs	r1, #5
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d107      	bne.n	80080f4 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f7ff fe2b 	bl	8007d48 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080f2:	e014      	b.n	800811e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 f9b5 	bl	8009464 <USBH_LL_Start>
      break;
 80080fa:	e010      	b.n	800811e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80080fc:	bf00      	nop
 80080fe:	e00e      	b.n	800811e <USBH_Process+0x3b6>
      break;
 8008100:	bf00      	nop
 8008102:	e00c      	b.n	800811e <USBH_Process+0x3b6>
      break;
 8008104:	bf00      	nop
 8008106:	e00a      	b.n	800811e <USBH_Process+0x3b6>
    break;
 8008108:	bf00      	nop
 800810a:	e008      	b.n	800811e <USBH_Process+0x3b6>
      break;
 800810c:	bf00      	nop
 800810e:	e006      	b.n	800811e <USBH_Process+0x3b6>
      break;
 8008110:	bf00      	nop
 8008112:	e004      	b.n	800811e <USBH_Process+0x3b6>
      break;
 8008114:	bf00      	nop
 8008116:	e002      	b.n	800811e <USBH_Process+0x3b6>
      break;
 8008118:	bf00      	nop
 800811a:	e000      	b.n	800811e <USBH_Process+0x3b6>
      break;
 800811c:	bf00      	nop
  }
  return USBH_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af04      	add	r7, sp, #16
 800812e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008130:	2301      	movs	r3, #1
 8008132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008134:	2301      	movs	r3, #1
 8008136:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	2b07      	cmp	r3, #7
 800813e:	f200 81c1 	bhi.w	80084c4 <USBH_HandleEnum+0x39c>
 8008142:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <USBH_HandleEnum+0x20>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	08008169 	.word	0x08008169
 800814c:	08008227 	.word	0x08008227
 8008150:	08008291 	.word	0x08008291
 8008154:	0800831f 	.word	0x0800831f
 8008158:	08008389 	.word	0x08008389
 800815c:	080083f9 	.word	0x080083f9
 8008160:	0800843f 	.word	0x0800843f
 8008164:	08008485 	.word	0x08008485
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008168:	2108      	movs	r1, #8
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fa50 	bl	8008610 <USBH_Get_DevDesc>
 8008170:	4603      	mov	r3, r0
 8008172:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d130      	bne.n	80081dc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	7919      	ldrb	r1, [r3, #4]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800819e:	b292      	uxth	r2, r2
 80081a0:	9202      	str	r2, [sp, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	9201      	str	r2, [sp, #4]
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	4603      	mov	r3, r0
 80081aa:	2280      	movs	r2, #128	; 0x80
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 ff77 	bl	80090a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	7959      	ldrb	r1, [r3, #5]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081c6:	b292      	uxth	r2, r2
 80081c8:	9202      	str	r2, [sp, #8]
 80081ca:	2200      	movs	r2, #0
 80081cc:	9201      	str	r2, [sp, #4]
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	4603      	mov	r3, r0
 80081d2:	2200      	movs	r2, #0
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 ff63 	bl	80090a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081da:	e175      	b.n	80084c8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	2b03      	cmp	r3, #3
 80081e0:	f040 8172 	bne.w	80084c8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081ea:	3301      	adds	r3, #1
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d903      	bls.n	8008206 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	220d      	movs	r2, #13
 8008202:	701a      	strb	r2, [r3, #0]
      break;
 8008204:	e160      	b.n	80084c8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	795b      	ldrb	r3, [r3, #5]
 800820a:	4619      	mov	r1, r3
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 ff97 	bl	8009140 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	791b      	ldrb	r3, [r3, #4]
 8008216:	4619      	mov	r1, r3
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 ff91 	bl	8009140 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	701a      	strb	r2, [r3, #0]
      break;
 8008224:	e150      	b.n	80084c8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008226:	2112      	movs	r1, #18
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f9f1 	bl	8008610 <USBH_Get_DevDesc>
 800822e:	4603      	mov	r3, r0
 8008230:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008232:	7bbb      	ldrb	r3, [r7, #14]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d103      	bne.n	8008240 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800823e:	e145      	b.n	80084cc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008240:	7bbb      	ldrb	r3, [r7, #14]
 8008242:	2b03      	cmp	r3, #3
 8008244:	f040 8142 	bne.w	80084cc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800824e:	3301      	adds	r3, #1
 8008250:	b2da      	uxtb	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800825e:	2b03      	cmp	r3, #3
 8008260:	d903      	bls.n	800826a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	220d      	movs	r2, #13
 8008266:	701a      	strb	r2, [r3, #0]
      break;
 8008268:	e130      	b.n	80084cc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	795b      	ldrb	r3, [r3, #5]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 ff65 	bl	8009140 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 ff5f 	bl	8009140 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	701a      	strb	r2, [r3, #0]
      break;
 800828e:	e11d      	b.n	80084cc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008290:	2101      	movs	r1, #1
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fa68 	bl	8008768 <USBH_SetAddress>
 8008298:	4603      	mov	r3, r0
 800829a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d132      	bne.n	8008308 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80082a2:	2002      	movs	r0, #2
 80082a4:	f001 fa45 	bl	8009732 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2203      	movs	r2, #3
 80082b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	7919      	ldrb	r1, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80082ca:	b292      	uxth	r2, r2
 80082cc:	9202      	str	r2, [sp, #8]
 80082ce:	2200      	movs	r2, #0
 80082d0:	9201      	str	r2, [sp, #4]
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	4603      	mov	r3, r0
 80082d6:	2280      	movs	r2, #128	; 0x80
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fee1 	bl	80090a0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	7959      	ldrb	r1, [r3, #5]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082f2:	b292      	uxth	r2, r2
 80082f4:	9202      	str	r2, [sp, #8]
 80082f6:	2200      	movs	r2, #0
 80082f8:	9201      	str	r2, [sp, #4]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	4603      	mov	r3, r0
 80082fe:	2200      	movs	r2, #0
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fecd 	bl	80090a0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008306:	e0e3      	b.n	80084d0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008308:	7bbb      	ldrb	r3, [r7, #14]
 800830a:	2b03      	cmp	r3, #3
 800830c:	f040 80e0 	bne.w	80084d0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	220d      	movs	r2, #13
 8008314:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	705a      	strb	r2, [r3, #1]
      break;
 800831c:	e0d8      	b.n	80084d0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800831e:	2109      	movs	r1, #9
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f99d 	bl	8008660 <USBH_Get_CfgDesc>
 8008326:	4603      	mov	r3, r0
 8008328:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800832a:	7bbb      	ldrb	r3, [r7, #14]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d103      	bne.n	8008338 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2204      	movs	r2, #4
 8008334:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008336:	e0cd      	b.n	80084d4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008338:	7bbb      	ldrb	r3, [r7, #14]
 800833a:	2b03      	cmp	r3, #3
 800833c:	f040 80ca 	bne.w	80084d4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008346:	3301      	adds	r3, #1
 8008348:	b2da      	uxtb	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008356:	2b03      	cmp	r3, #3
 8008358:	d903      	bls.n	8008362 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	220d      	movs	r2, #13
 800835e:	701a      	strb	r2, [r3, #0]
      break;
 8008360:	e0b8      	b.n	80084d4 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	795b      	ldrb	r3, [r3, #5]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fee9 	bl	8009140 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	791b      	ldrb	r3, [r3, #4]
 8008372:	4619      	mov	r1, r3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fee3 	bl	8009140 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	701a      	strb	r2, [r3, #0]
      break;
 8008386:	e0a5      	b.n	80084d4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f965 	bl	8008660 <USBH_Get_CfgDesc>
 8008396:	4603      	mov	r3, r0
 8008398:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d103      	bne.n	80083a8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2205      	movs	r2, #5
 80083a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083a6:	e097      	b.n	80084d8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	f040 8094 	bne.w	80084d8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083b6:	3301      	adds	r3, #1
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d903      	bls.n	80083d2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	220d      	movs	r2, #13
 80083ce:	701a      	strb	r2, [r3, #0]
      break;
 80083d0:	e082      	b.n	80084d8 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	795b      	ldrb	r3, [r3, #5]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 feb1 	bl	8009140 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	791b      	ldrb	r3, [r3, #4]
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 feab 	bl	8009140 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	701a      	strb	r2, [r3, #0]
      break;
 80083f6:	e06f      	b.n	80084d8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d019      	beq.n	8008436 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800840e:	23ff      	movs	r3, #255	; 0xff
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 f949 	bl	80086a8 <USBH_Get_StringDesc>
 8008416:	4603      	mov	r3, r0
 8008418:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2206      	movs	r2, #6
 8008424:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008426:	e059      	b.n	80084dc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2b03      	cmp	r3, #3
 800842c:	d156      	bne.n	80084dc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2206      	movs	r2, #6
 8008432:	705a      	strb	r2, [r3, #1]
      break;
 8008434:	e052      	b.n	80084dc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2206      	movs	r2, #6
 800843a:	705a      	strb	r2, [r3, #1]
      break;
 800843c:	e04e      	b.n	80084dc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008444:	2b00      	cmp	r3, #0
 8008446:	d019      	beq.n	800847c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008454:	23ff      	movs	r3, #255	; 0xff
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f926 	bl	80086a8 <USBH_Get_StringDesc>
 800845c:	4603      	mov	r3, r0
 800845e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008460:	7bbb      	ldrb	r3, [r7, #14]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2207      	movs	r2, #7
 800846a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800846c:	e038      	b.n	80084e0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	2b03      	cmp	r3, #3
 8008472:	d135      	bne.n	80084e0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2207      	movs	r2, #7
 8008478:	705a      	strb	r2, [r3, #1]
      break;
 800847a:	e031      	b.n	80084e0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2207      	movs	r2, #7
 8008480:	705a      	strb	r2, [r3, #1]
      break;
 8008482:	e02d      	b.n	80084e0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800848a:	2b00      	cmp	r3, #0
 800848c:	d017      	beq.n	80084be <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800849a:	23ff      	movs	r3, #255	; 0xff
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f903 	bl	80086a8 <USBH_Get_StringDesc>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d102      	bne.n	80084b2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80084b0:	e018      	b.n	80084e4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d115      	bne.n	80084e4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]
      break;
 80084bc:	e012      	b.n	80084e4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	73fb      	strb	r3, [r7, #15]
      break;
 80084c2:	e00f      	b.n	80084e4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80084c4:	bf00      	nop
 80084c6:	e00e      	b.n	80084e6 <USBH_HandleEnum+0x3be>
      break;
 80084c8:	bf00      	nop
 80084ca:	e00c      	b.n	80084e6 <USBH_HandleEnum+0x3be>
      break;
 80084cc:	bf00      	nop
 80084ce:	e00a      	b.n	80084e6 <USBH_HandleEnum+0x3be>
      break;
 80084d0:	bf00      	nop
 80084d2:	e008      	b.n	80084e6 <USBH_HandleEnum+0x3be>
      break;
 80084d4:	bf00      	nop
 80084d6:	e006      	b.n	80084e6 <USBH_HandleEnum+0x3be>
      break;
 80084d8:	bf00      	nop
 80084da:	e004      	b.n	80084e6 <USBH_HandleEnum+0x3be>
      break;
 80084dc:	bf00      	nop
 80084de:	e002      	b.n	80084e6 <USBH_HandleEnum+0x3be>
      break;
 80084e0:	bf00      	nop
 80084e2:	e000      	b.n	80084e6 <USBH_HandleEnum+0x3be>
      break;
 80084e4:	bf00      	nop
  }
  return Status;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b082      	sub	sp, #8
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800851c:	1c5a      	adds	r2, r3, #1
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f804 	bl	8008532 <USBH_HandleSof>
}
 800852a:	bf00      	nop
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}

08008532 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b0b      	cmp	r3, #11
 8008542:	d10a      	bne.n	800855a <USBH_HandleSof+0x28>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
  }
}
 800855a:	bf00      	nop
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008572:	bf00      	nop
}
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800858e:	bf00      	nop
}
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 ff56 	bl	800949a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	791b      	ldrb	r3, [r3, #4]
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fda3 	bl	8009140 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	795b      	ldrb	r3, [r3, #5]
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fd9d 	bl	8009140 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af02      	add	r7, sp, #8
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008622:	78fb      	ldrb	r3, [r7, #3]
 8008624:	b29b      	uxth	r3, r3
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800862e:	2100      	movs	r1, #0
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f864 	bl	80086fe <USBH_GetDescriptor>
 8008636:	4603      	mov	r3, r0
 8008638:	73fb      	strb	r3, [r7, #15]
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10a      	bne.n	8008656 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800864c:	78fa      	ldrb	r2, [r7, #3]
 800864e:	b292      	uxth	r2, r2
 8008650:	4619      	mov	r1, r3
 8008652:	f000 f918 	bl	8008886 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008656:	7bfb      	ldrb	r3, [r7, #15]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af02      	add	r7, sp, #8
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	331c      	adds	r3, #28
 8008670:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008672:	887b      	ldrh	r3, [r7, #2]
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800867c:	2100      	movs	r1, #0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f83d 	bl	80086fe <USBH_GetDescriptor>
 8008684:	4603      	mov	r3, r0
 8008686:	72fb      	strb	r3, [r7, #11]
 8008688:	7afb      	ldrb	r3, [r7, #11]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d107      	bne.n	800869e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008694:	887a      	ldrh	r2, [r7, #2]
 8008696:	68f9      	ldr	r1, [r7, #12]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 f964 	bl	8008966 <USBH_ParseCfgDesc>
  }

  return status;
 800869e:	7afb      	ldrb	r3, [r7, #11]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	607a      	str	r2, [r7, #4]
 80086b2:	461a      	mov	r2, r3
 80086b4:	460b      	mov	r3, r1
 80086b6:	72fb      	strb	r3, [r7, #11]
 80086b8:	4613      	mov	r3, r2
 80086ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80086bc:	7afb      	ldrb	r3, [r7, #11]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80086c4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80086cc:	893b      	ldrh	r3, [r7, #8]
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	460b      	mov	r3, r1
 80086d2:	2100      	movs	r1, #0
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f812 	bl	80086fe <USBH_GetDescriptor>
 80086da:	4603      	mov	r3, r0
 80086dc:	75fb      	strb	r3, [r7, #23]
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d107      	bne.n	80086f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80086ea:	893a      	ldrh	r2, [r7, #8]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f000 fa37 	bl	8008b62 <USBH_ParseStringDesc>
  }

  return status;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	60f8      	str	r0, [r7, #12]
 8008706:	607b      	str	r3, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	72fb      	strb	r3, [r7, #11]
 800870c:	4613      	mov	r3, r2
 800870e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	789b      	ldrb	r3, [r3, #2]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d11c      	bne.n	8008752 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800871e:	b2da      	uxtb	r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2206      	movs	r2, #6
 8008728:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	893a      	ldrh	r2, [r7, #8]
 800872e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008730:	893b      	ldrh	r3, [r7, #8]
 8008732:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800873a:	d104      	bne.n	8008746 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f240 4209 	movw	r2, #1033	; 0x409
 8008742:	829a      	strh	r2, [r3, #20]
 8008744:	e002      	b.n	800874c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	8b3a      	ldrh	r2, [r7, #24]
 8008750:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008752:	8b3b      	ldrh	r3, [r7, #24]
 8008754:	461a      	mov	r2, r3
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 fa50 	bl	8008bfe <USBH_CtlReq>
 800875e:	4603      	mov	r3, r0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	789b      	ldrb	r3, [r3, #2]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d10f      	bne.n	800879c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2205      	movs	r2, #5
 8008786:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	b29a      	uxth	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800879c:	2200      	movs	r2, #0
 800879e:	2100      	movs	r1, #0
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fa2c 	bl	8008bfe <USBH_CtlReq>
 80087a6:	4603      	mov	r3, r0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3708      	adds	r7, #8
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	460b      	mov	r3, r1
 80087ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	789b      	ldrb	r3, [r3, #2]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d10e      	bne.n	80087e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2209      	movs	r2, #9
 80087ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	887a      	ldrh	r2, [r7, #2]
 80087d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80087e2:	2200      	movs	r2, #0
 80087e4:	2100      	movs	r1, #0
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fa09 	bl	8008bfe <USBH_CtlReq>
 80087ec:	4603      	mov	r3, r0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	460b      	mov	r3, r1
 8008800:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	789b      	ldrb	r3, [r3, #2]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d10f      	bne.n	800882a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2203      	movs	r2, #3
 8008814:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008816:	78fb      	ldrb	r3, [r7, #3]
 8008818:	b29a      	uxth	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800882a:	2200      	movs	r2, #0
 800882c:	2100      	movs	r1, #0
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f9e5 	bl	8008bfe <USBH_CtlReq>
 8008834:	4603      	mov	r3, r0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	789b      	ldrb	r3, [r3, #2]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10f      	bne.n	8008872 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2202      	movs	r2, #2
 8008856:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008872:	2200      	movs	r2, #0
 8008874:	2100      	movs	r1, #0
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f9c1 	bl	8008bfe <USBH_CtlReq>
 800887c:	4603      	mov	r3, r0
}
 800887e:	4618      	mov	r0, r3
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008886:	b480      	push	{r7}
 8008888:	b085      	sub	sp, #20
 800888a:	af00      	add	r7, sp, #0
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	4613      	mov	r3, r2
 8008892:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	781a      	ldrb	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	785a      	ldrb	r2, [r3, #1]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	3302      	adds	r3, #2
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	3303      	adds	r3, #3
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	4313      	orrs	r3, r2
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	791a      	ldrb	r2, [r3, #4]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	795a      	ldrb	r2, [r3, #5]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	799a      	ldrb	r2, [r3, #6]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	79da      	ldrb	r2, [r3, #7]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80088e0:	88fb      	ldrh	r3, [r7, #6]
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d939      	bls.n	800895a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	3308      	adds	r3, #8
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	3309      	adds	r3, #9
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	021b      	lsls	r3, r3, #8
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	4313      	orrs	r3, r2
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	330a      	adds	r3, #10
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	b29a      	uxth	r2, r3
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	330b      	adds	r3, #11
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	b29b      	uxth	r3, r3
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	b29b      	uxth	r3, r3
 8008916:	4313      	orrs	r3, r2
 8008918:	b29a      	uxth	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	330c      	adds	r3, #12
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	b29a      	uxth	r2, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	330d      	adds	r3, #13
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	b29b      	uxth	r3, r3
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	b29b      	uxth	r3, r3
 8008932:	4313      	orrs	r3, r2
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	7b9a      	ldrb	r2, [r3, #14]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	7bda      	ldrb	r2, [r3, #15]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	7c1a      	ldrb	r2, [r3, #16]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	7c5a      	ldrb	r2, [r3, #17]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	745a      	strb	r2, [r3, #17]
  }
}
 800895a:	bf00      	nop
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b08a      	sub	sp, #40	; 0x28
 800896a:	af00      	add	r7, sp, #0
 800896c:	60f8      	str	r0, [r7, #12]
 800896e:	60b9      	str	r1, [r7, #8]
 8008970:	4613      	mov	r3, r2
 8008972:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	781a      	ldrb	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	785a      	ldrb	r2, [r3, #1]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	3302      	adds	r3, #2
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b29a      	uxth	r2, r3
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	3303      	adds	r3, #3
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	021b      	lsls	r3, r3, #8
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	4313      	orrs	r3, r2
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	791a      	ldrb	r2, [r3, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	795a      	ldrb	r2, [r3, #5]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	799a      	ldrb	r2, [r3, #6]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	79da      	ldrb	r2, [r3, #7]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	7a1a      	ldrb	r2, [r3, #8]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80089dc:	88fb      	ldrh	r3, [r7, #6]
 80089de:	2b09      	cmp	r3, #9
 80089e0:	d95f      	bls.n	8008aa2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80089e2:	2309      	movs	r3, #9
 80089e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089ea:	e051      	b.n	8008a90 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089ec:	f107 0316 	add.w	r3, r7, #22
 80089f0:	4619      	mov	r1, r3
 80089f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089f4:	f000 f8e8 	bl	8008bc8 <USBH_GetNextDesc>
 80089f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80089fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fc:	785b      	ldrb	r3, [r3, #1]
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	d146      	bne.n	8008a90 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a06:	221a      	movs	r2, #26
 8008a08:	fb02 f303 	mul.w	r3, r2, r3
 8008a0c:	3308      	adds	r3, #8
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	4413      	add	r3, r2
 8008a12:	3302      	adds	r3, #2
 8008a14:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a18:	69f8      	ldr	r0, [r7, #28]
 8008a1a:	f000 f846 	bl	8008aaa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a28:	e022      	b.n	8008a70 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a2a:	f107 0316 	add.w	r3, r7, #22
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a32:	f000 f8c9 	bl	8008bc8 <USBH_GetNextDesc>
 8008a36:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b05      	cmp	r3, #5
 8008a3e:	d117      	bne.n	8008a70 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a48:	3201      	adds	r2, #1
 8008a4a:	00d2      	lsls	r2, r2, #3
 8008a4c:	211a      	movs	r1, #26
 8008a4e:	fb01 f303 	mul.w	r3, r1, r3
 8008a52:	4413      	add	r3, r2
 8008a54:	3308      	adds	r3, #8
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4413      	add	r3, r2
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a60:	69b8      	ldr	r0, [r7, #24]
 8008a62:	f000 f851 	bl	8008b08 <USBH_ParseEPDesc>
            ep_ix++;
 8008a66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	791b      	ldrb	r3, [r3, #4]
 8008a74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d204      	bcs.n	8008a86 <USBH_ParseCfgDesc+0x120>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	885a      	ldrh	r2, [r3, #2]
 8008a80:	8afb      	ldrh	r3, [r7, #22]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d8d1      	bhi.n	8008a2a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008a86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d804      	bhi.n	8008aa2 <USBH_ParseCfgDesc+0x13c>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	885a      	ldrh	r2, [r3, #2]
 8008a9c:	8afb      	ldrh	r3, [r7, #22]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d8a4      	bhi.n	80089ec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008aa2:	bf00      	nop
 8008aa4:	3728      	adds	r7, #40	; 0x28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781a      	ldrb	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	785a      	ldrb	r2, [r3, #1]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	789a      	ldrb	r2, [r3, #2]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	78da      	ldrb	r2, [r3, #3]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	791a      	ldrb	r2, [r3, #4]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	795a      	ldrb	r2, [r3, #5]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	799a      	ldrb	r2, [r3, #6]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	79da      	ldrb	r2, [r3, #7]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	7a1a      	ldrb	r2, [r3, #8]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	721a      	strb	r2, [r3, #8]
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	785a      	ldrb	r2, [r3, #1]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	789a      	ldrb	r2, [r3, #2]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	78da      	ldrb	r2, [r3, #3]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	3304      	adds	r3, #4
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	3305      	adds	r3, #5
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	021b      	lsls	r3, r3, #8
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4313      	orrs	r3, r2
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	799a      	ldrb	r2, [r3, #6]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	719a      	strb	r2, [r3, #6]
}
 8008b56:	bf00      	nop
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b087      	sub	sp, #28
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	3301      	adds	r3, #1
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d120      	bne.n	8008bbc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	1e9a      	subs	r2, r3, #2
 8008b80:	88fb      	ldrh	r3, [r7, #6]
 8008b82:	4293      	cmp	r3, r2
 8008b84:	bf28      	it	cs
 8008b86:	4613      	movcs	r3, r2
 8008b88:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3302      	adds	r3, #2
 8008b8e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008b90:	2300      	movs	r3, #0
 8008b92:	82fb      	strh	r3, [r7, #22]
 8008b94:	e00b      	b.n	8008bae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008b96:	8afb      	ldrh	r3, [r7, #22]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	781a      	ldrb	r2, [r3, #0]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ba8:	8afb      	ldrh	r3, [r7, #22]
 8008baa:	3302      	adds	r3, #2
 8008bac:	82fb      	strh	r3, [r7, #22]
 8008bae:	8afa      	ldrh	r2, [r7, #22]
 8008bb0:	8abb      	ldrh	r3, [r7, #20]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d3ef      	bcc.n	8008b96 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
  }
}
 8008bbc:	bf00      	nop
 8008bbe:	371c      	adds	r7, #28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	881a      	ldrh	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	4413      	add	r3, r2
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4413      	add	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b086      	sub	sp, #24
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	789b      	ldrb	r3, [r3, #2]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d002      	beq.n	8008c1e <USBH_CtlReq+0x20>
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d00f      	beq.n	8008c3c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c1c:	e027      	b.n	8008c6e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	88fa      	ldrh	r2, [r7, #6]
 8008c28:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2202      	movs	r2, #2
 8008c34:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008c36:	2301      	movs	r3, #1
 8008c38:	75fb      	strb	r3, [r7, #23]
      break;
 8008c3a:	e018      	b.n	8008c6e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f81b 	bl	8008c78 <USBH_HandleControl>
 8008c42:	4603      	mov	r3, r0
 8008c44:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <USBH_CtlReq+0x54>
 8008c4c:	7dfb      	ldrb	r3, [r7, #23]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d106      	bne.n	8008c60 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2201      	movs	r2, #1
 8008c56:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	761a      	strb	r2, [r3, #24]
      break;
 8008c5e:	e005      	b.n	8008c6c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	2b02      	cmp	r3, #2
 8008c64:	d102      	bne.n	8008c6c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	709a      	strb	r2, [r3, #2]
      break;
 8008c6c:	bf00      	nop
  }
  return status;
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3718      	adds	r7, #24
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af02      	add	r7, sp, #8
 8008c7e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c80:	2301      	movs	r3, #1
 8008c82:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c84:	2300      	movs	r3, #0
 8008c86:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	7e1b      	ldrb	r3, [r3, #24]
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	2b0a      	cmp	r3, #10
 8008c90:	f200 8156 	bhi.w	8008f40 <USBH_HandleControl+0x2c8>
 8008c94:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <USBH_HandleControl+0x24>)
 8008c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9a:	bf00      	nop
 8008c9c:	08008cc9 	.word	0x08008cc9
 8008ca0:	08008ce3 	.word	0x08008ce3
 8008ca4:	08008d4d 	.word	0x08008d4d
 8008ca8:	08008d73 	.word	0x08008d73
 8008cac:	08008dab 	.word	0x08008dab
 8008cb0:	08008dd5 	.word	0x08008dd5
 8008cb4:	08008e27 	.word	0x08008e27
 8008cb8:	08008e49 	.word	0x08008e49
 8008cbc:	08008e85 	.word	0x08008e85
 8008cc0:	08008eab 	.word	0x08008eab
 8008cc4:	08008ee9 	.word	0x08008ee9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f103 0110 	add.w	r1, r3, #16
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	795b      	ldrb	r3, [r3, #5]
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f943 	bl	8008f60 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2202      	movs	r2, #2
 8008cde:	761a      	strb	r2, [r3, #24]
      break;
 8008ce0:	e139      	b.n	8008f56 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	795b      	ldrb	r3, [r3, #5]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fcc5 	bl	8009678 <USBH_LL_GetURBState>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008cf2:	7bbb      	ldrb	r3, [r7, #14]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d11e      	bne.n	8008d36 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	7c1b      	ldrb	r3, [r3, #16]
 8008cfc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d00:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	8adb      	ldrh	r3, [r3, #22]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d0a:	7b7b      	ldrb	r3, [r7, #13]
 8008d0c:	2b80      	cmp	r3, #128	; 0x80
 8008d0e:	d103      	bne.n	8008d18 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2203      	movs	r2, #3
 8008d14:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d16:	e115      	b.n	8008f44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2205      	movs	r2, #5
 8008d1c:	761a      	strb	r2, [r3, #24]
      break;
 8008d1e:	e111      	b.n	8008f44 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008d20:	7b7b      	ldrb	r3, [r7, #13]
 8008d22:	2b80      	cmp	r3, #128	; 0x80
 8008d24:	d103      	bne.n	8008d2e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2209      	movs	r2, #9
 8008d2a:	761a      	strb	r2, [r3, #24]
      break;
 8008d2c:	e10a      	b.n	8008f44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2207      	movs	r2, #7
 8008d32:	761a      	strb	r2, [r3, #24]
      break;
 8008d34:	e106      	b.n	8008f44 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d003      	beq.n	8008d44 <USBH_HandleControl+0xcc>
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	f040 8100 	bne.w	8008f44 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	220b      	movs	r2, #11
 8008d48:	761a      	strb	r2, [r3, #24]
      break;
 8008d4a:	e0fb      	b.n	8008f44 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6899      	ldr	r1, [r3, #8]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	899a      	ldrh	r2, [r3, #12]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	791b      	ldrb	r3, [r3, #4]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f93a 	bl	8008fde <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2204      	movs	r2, #4
 8008d6e:	761a      	strb	r2, [r3, #24]
      break;
 8008d70:	e0f1      	b.n	8008f56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	791b      	ldrb	r3, [r3, #4]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fc7d 	bl	8009678 <USBH_LL_GetURBState>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d82:	7bbb      	ldrb	r3, [r7, #14]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d102      	bne.n	8008d8e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2209      	movs	r2, #9
 8008d8c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	2b05      	cmp	r3, #5
 8008d92:	d102      	bne.n	8008d9a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008d94:	2303      	movs	r3, #3
 8008d96:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008d98:	e0d6      	b.n	8008f48 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
 8008d9c:	2b04      	cmp	r3, #4
 8008d9e:	f040 80d3 	bne.w	8008f48 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	220b      	movs	r2, #11
 8008da6:	761a      	strb	r2, [r3, #24]
      break;
 8008da8:	e0ce      	b.n	8008f48 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6899      	ldr	r1, [r3, #8]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	899a      	ldrh	r2, [r3, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	795b      	ldrb	r3, [r3, #5]
 8008db6:	2001      	movs	r0, #1
 8008db8:	9000      	str	r0, [sp, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f8ea 	bl	8008f94 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dc6:	b29a      	uxth	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2206      	movs	r2, #6
 8008dd0:	761a      	strb	r2, [r3, #24]
      break;
 8008dd2:	e0c0      	b.n	8008f56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	795b      	ldrb	r3, [r3, #5]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fc4c 	bl	8009678 <USBH_LL_GetURBState>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008de4:	7bbb      	ldrb	r3, [r7, #14]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d103      	bne.n	8008df2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2207      	movs	r2, #7
 8008dee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008df0:	e0ac      	b.n	8008f4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	2b05      	cmp	r3, #5
 8008df6:	d105      	bne.n	8008e04 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	220c      	movs	r2, #12
 8008dfc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	73fb      	strb	r3, [r7, #15]
      break;
 8008e02:	e0a3      	b.n	8008f4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d103      	bne.n	8008e12 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2205      	movs	r2, #5
 8008e0e:	761a      	strb	r2, [r3, #24]
      break;
 8008e10:	e09c      	b.n	8008f4c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	f040 8099 	bne.w	8008f4c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	220b      	movs	r2, #11
 8008e1e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e20:	2302      	movs	r3, #2
 8008e22:	73fb      	strb	r3, [r7, #15]
      break;
 8008e24:	e092      	b.n	8008f4c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	791b      	ldrb	r3, [r3, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f8d5 	bl	8008fde <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2208      	movs	r2, #8
 8008e44:	761a      	strb	r2, [r3, #24]

      break;
 8008e46:	e086      	b.n	8008f56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	791b      	ldrb	r3, [r3, #4]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 fc12 	bl	8009678 <USBH_LL_GetURBState>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d105      	bne.n	8008e6a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	220d      	movs	r2, #13
 8008e62:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008e68:	e072      	b.n	8008f50 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	2b04      	cmp	r3, #4
 8008e6e:	d103      	bne.n	8008e78 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	220b      	movs	r2, #11
 8008e74:	761a      	strb	r2, [r3, #24]
      break;
 8008e76:	e06b      	b.n	8008f50 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008e78:	7bbb      	ldrb	r3, [r7, #14]
 8008e7a:	2b05      	cmp	r3, #5
 8008e7c:	d168      	bne.n	8008f50 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	73fb      	strb	r3, [r7, #15]
      break;
 8008e82:	e065      	b.n	8008f50 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	795b      	ldrb	r3, [r3, #5]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	9200      	str	r2, [sp, #0]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2100      	movs	r1, #0
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f87f 	bl	8008f94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	220a      	movs	r2, #10
 8008ea6:	761a      	strb	r2, [r3, #24]
      break;
 8008ea8:	e055      	b.n	8008f56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	795b      	ldrb	r3, [r3, #5]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fbe1 	bl	8009678 <USBH_LL_GetURBState>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d105      	bne.n	8008ecc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	220d      	movs	r2, #13
 8008ec8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008eca:	e043      	b.n	8008f54 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d103      	bne.n	8008eda <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2209      	movs	r2, #9
 8008ed6:	761a      	strb	r2, [r3, #24]
      break;
 8008ed8:	e03c      	b.n	8008f54 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008eda:	7bbb      	ldrb	r3, [r7, #14]
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d139      	bne.n	8008f54 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	220b      	movs	r2, #11
 8008ee4:	761a      	strb	r2, [r3, #24]
      break;
 8008ee6:	e035      	b.n	8008f54 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	7e5b      	ldrb	r3, [r3, #25]
 8008eec:	3301      	adds	r3, #1
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	765a      	strb	r2, [r3, #25]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	7e5b      	ldrb	r3, [r3, #25]
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d806      	bhi.n	8008f0a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f08:	e025      	b.n	8008f56 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f10:	2106      	movs	r1, #6
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	795b      	ldrb	r3, [r3, #5]
 8008f20:	4619      	mov	r1, r3
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f90c 	bl	8009140 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	791b      	ldrb	r3, [r3, #4]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f906 	bl	8009140 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f3e:	e00a      	b.n	8008f56 <USBH_HandleControl+0x2de>

    default:
      break;
 8008f40:	bf00      	nop
 8008f42:	e008      	b.n	8008f56 <USBH_HandleControl+0x2de>
      break;
 8008f44:	bf00      	nop
 8008f46:	e006      	b.n	8008f56 <USBH_HandleControl+0x2de>
      break;
 8008f48:	bf00      	nop
 8008f4a:	e004      	b.n	8008f56 <USBH_HandleControl+0x2de>
      break;
 8008f4c:	bf00      	nop
 8008f4e:	e002      	b.n	8008f56 <USBH_HandleControl+0x2de>
      break;
 8008f50:	bf00      	nop
 8008f52:	e000      	b.n	8008f56 <USBH_HandleControl+0x2de>
      break;
 8008f54:	bf00      	nop
  }

  return status;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b088      	sub	sp, #32
 8008f64:	af04      	add	r7, sp, #16
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008f6e:	79f9      	ldrb	r1, [r7, #7]
 8008f70:	2300      	movs	r3, #0
 8008f72:	9303      	str	r3, [sp, #12]
 8008f74:	2308      	movs	r3, #8
 8008f76:	9302      	str	r3, [sp, #8]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	2300      	movs	r3, #0
 8008f82:	2200      	movs	r2, #0
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 fb46 	bl	8009616 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af04      	add	r7, sp, #16
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	80fb      	strh	r3, [r7, #6]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008fb8:	7979      	ldrb	r1, [r7, #5]
 8008fba:	7e3b      	ldrb	r3, [r7, #24]
 8008fbc:	9303      	str	r3, [sp, #12]
 8008fbe:	88fb      	ldrh	r3, [r7, #6]
 8008fc0:	9302      	str	r3, [sp, #8]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	9301      	str	r3, [sp, #4]
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	2300      	movs	r3, #0
 8008fcc:	2200      	movs	r2, #0
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 fb21 	bl	8009616 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b088      	sub	sp, #32
 8008fe2:	af04      	add	r7, sp, #16
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	4611      	mov	r1, r2
 8008fea:	461a      	mov	r2, r3
 8008fec:	460b      	mov	r3, r1
 8008fee:	80fb      	strh	r3, [r7, #6]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008ff4:	7979      	ldrb	r1, [r7, #5]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	9303      	str	r3, [sp, #12]
 8008ffa:	88fb      	ldrh	r3, [r7, #6]
 8008ffc:	9302      	str	r3, [sp, #8]
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	9301      	str	r3, [sp, #4]
 8009002:	2301      	movs	r3, #1
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	2300      	movs	r3, #0
 8009008:	2201      	movs	r2, #1
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 fb03 	bl	8009616 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009010:	2300      	movs	r3, #0

}
 8009012:	4618      	mov	r0, r3
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b088      	sub	sp, #32
 800901e:	af04      	add	r7, sp, #16
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	4611      	mov	r1, r2
 8009026:	461a      	mov	r2, r3
 8009028:	460b      	mov	r3, r1
 800902a:	80fb      	strh	r3, [r7, #6]
 800902c:	4613      	mov	r3, r2
 800902e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800903a:	2300      	movs	r3, #0
 800903c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800903e:	7979      	ldrb	r1, [r7, #5]
 8009040:	7e3b      	ldrb	r3, [r7, #24]
 8009042:	9303      	str	r3, [sp, #12]
 8009044:	88fb      	ldrh	r3, [r7, #6]
 8009046:	9302      	str	r3, [sp, #8]
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	2301      	movs	r3, #1
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	2302      	movs	r3, #2
 8009052:	2200      	movs	r2, #0
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 fade 	bl	8009616 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af04      	add	r7, sp, #16
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	4611      	mov	r1, r2
 8009070:	461a      	mov	r2, r3
 8009072:	460b      	mov	r3, r1
 8009074:	80fb      	strh	r3, [r7, #6]
 8009076:	4613      	mov	r3, r2
 8009078:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800907a:	7979      	ldrb	r1, [r7, #5]
 800907c:	2300      	movs	r3, #0
 800907e:	9303      	str	r3, [sp, #12]
 8009080:	88fb      	ldrh	r3, [r7, #6]
 8009082:	9302      	str	r3, [sp, #8]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	2301      	movs	r3, #1
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2302      	movs	r3, #2
 800908e:	2201      	movs	r2, #1
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 fac0 	bl	8009616 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af04      	add	r7, sp, #16
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	4608      	mov	r0, r1
 80090aa:	4611      	mov	r1, r2
 80090ac:	461a      	mov	r2, r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	70fb      	strb	r3, [r7, #3]
 80090b2:	460b      	mov	r3, r1
 80090b4:	70bb      	strb	r3, [r7, #2]
 80090b6:	4613      	mov	r3, r2
 80090b8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80090ba:	7878      	ldrb	r0, [r7, #1]
 80090bc:	78ba      	ldrb	r2, [r7, #2]
 80090be:	78f9      	ldrb	r1, [r7, #3]
 80090c0:	8b3b      	ldrh	r3, [r7, #24]
 80090c2:	9302      	str	r3, [sp, #8]
 80090c4:	7d3b      	ldrb	r3, [r7, #20]
 80090c6:	9301      	str	r3, [sp, #4]
 80090c8:	7c3b      	ldrb	r3, [r7, #16]
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	4603      	mov	r3, r0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fa53 	bl	800957a <USBH_LL_OpenPipe>

  return USBH_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80090ea:	78fb      	ldrb	r3, [r7, #3]
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa72 	bl	80095d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	460b      	mov	r3, r1
 8009108:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f836 	bl	800917c <USBH_GetFreePipe>
 8009110:	4603      	mov	r3, r0
 8009112:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009114:	89fb      	ldrh	r3, [r7, #14]
 8009116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800911a:	4293      	cmp	r3, r2
 800911c:	d00a      	beq.n	8009134 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	89fb      	ldrh	r3, [r7, #14]
 8009122:	f003 030f 	and.w	r3, r3, #15
 8009126:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	33e0      	adds	r3, #224	; 0xe0
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	440b      	add	r3, r1
 8009132:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009134:	89fb      	ldrh	r3, [r7, #14]
 8009136:	b2db      	uxtb	r3, r3
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800914c:	78fb      	ldrb	r3, [r7, #3]
 800914e:	2b0a      	cmp	r3, #10
 8009150:	d80d      	bhi.n	800916e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009152:	78fb      	ldrb	r3, [r7, #3]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	33e0      	adds	r3, #224	; 0xe0
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	78fb      	ldrb	r3, [r7, #3]
 8009160:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	33e0      	adds	r3, #224	; 0xe0
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	440b      	add	r3, r1
 800916c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009188:	2300      	movs	r3, #0
 800918a:	73fb      	strb	r3, [r7, #15]
 800918c:	e00f      	b.n	80091ae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	33e0      	adds	r3, #224	; 0xe0
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d102      	bne.n	80091a8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	e007      	b.n	80091b8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
 80091aa:	3301      	adds	r3, #1
 80091ac:	73fb      	strb	r3, [r7, #15]
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	2b0a      	cmp	r3, #10
 80091b2:	d9ec      	bls.n	800918e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80091b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80091c8:	2201      	movs	r2, #1
 80091ca:	490e      	ldr	r1, [pc, #56]	; (8009204 <MX_USB_HOST_Init+0x40>)
 80091cc:	480e      	ldr	r0, [pc, #56]	; (8009208 <MX_USB_HOST_Init+0x44>)
 80091ce:	f7fe fca1 	bl	8007b14 <USBH_Init>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80091d8:	f7f8 fa8c 	bl	80016f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80091dc:	490b      	ldr	r1, [pc, #44]	; (800920c <MX_USB_HOST_Init+0x48>)
 80091de:	480a      	ldr	r0, [pc, #40]	; (8009208 <MX_USB_HOST_Init+0x44>)
 80091e0:	f7fe fd26 	bl	8007c30 <USBH_RegisterClass>
 80091e4:	4603      	mov	r3, r0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d001      	beq.n	80091ee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80091ea:	f7f8 fa83 	bl	80016f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80091ee:	4806      	ldr	r0, [pc, #24]	; (8009208 <MX_USB_HOST_Init+0x44>)
 80091f0:	f7fe fdaa 	bl	8007d48 <USBH_Start>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80091fa:	f7f8 fa7b 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80091fe:	bf00      	nop
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	08009225 	.word	0x08009225
 8009208:	20000268 	.word	0x20000268
 800920c:	2000000c 	.word	0x2000000c

08009210 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009214:	4802      	ldr	r0, [pc, #8]	; (8009220 <MX_USB_HOST_Process+0x10>)
 8009216:	f7fe fda7 	bl	8007d68 <USBH_Process>
}
 800921a:	bf00      	nop
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000268 	.word	0x20000268

08009224 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	460b      	mov	r3, r1
 800922e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	3b01      	subs	r3, #1
 8009234:	2b04      	cmp	r3, #4
 8009236:	d819      	bhi.n	800926c <USBH_UserProcess+0x48>
 8009238:	a201      	add	r2, pc, #4	; (adr r2, 8009240 <USBH_UserProcess+0x1c>)
 800923a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800923e:	bf00      	nop
 8009240:	0800926d 	.word	0x0800926d
 8009244:	0800925d 	.word	0x0800925d
 8009248:	0800926d 	.word	0x0800926d
 800924c:	08009265 	.word	0x08009265
 8009250:	08009255 	.word	0x08009255
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009254:	4b09      	ldr	r3, [pc, #36]	; (800927c <USBH_UserProcess+0x58>)
 8009256:	2203      	movs	r2, #3
 8009258:	701a      	strb	r2, [r3, #0]
  break;
 800925a:	e008      	b.n	800926e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800925c:	4b07      	ldr	r3, [pc, #28]	; (800927c <USBH_UserProcess+0x58>)
 800925e:	2202      	movs	r2, #2
 8009260:	701a      	strb	r2, [r3, #0]
  break;
 8009262:	e004      	b.n	800926e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009264:	4b05      	ldr	r3, [pc, #20]	; (800927c <USBH_UserProcess+0x58>)
 8009266:	2201      	movs	r2, #1
 8009268:	701a      	strb	r2, [r3, #0]
  break;
 800926a:	e000      	b.n	800926e <USBH_UserProcess+0x4a>

  default:
  break;
 800926c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	200000b8 	.word	0x200000b8

08009280 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b08a      	sub	sp, #40	; 0x28
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009288:	f107 0314 	add.w	r3, r7, #20
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	605a      	str	r2, [r3, #4]
 8009292:	609a      	str	r2, [r3, #8]
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092a0:	d147      	bne.n	8009332 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092a2:	2300      	movs	r3, #0
 80092a4:	613b      	str	r3, [r7, #16]
 80092a6:	4b25      	ldr	r3, [pc, #148]	; (800933c <HAL_HCD_MspInit+0xbc>)
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	4a24      	ldr	r2, [pc, #144]	; (800933c <HAL_HCD_MspInit+0xbc>)
 80092ac:	f043 0301 	orr.w	r3, r3, #1
 80092b0:	6313      	str	r3, [r2, #48]	; 0x30
 80092b2:	4b22      	ldr	r3, [pc, #136]	; (800933c <HAL_HCD_MspInit+0xbc>)
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	f003 0301 	and.w	r3, r3, #1
 80092ba:	613b      	str	r3, [r7, #16]
 80092bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80092be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092c4:	2300      	movs	r3, #0
 80092c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80092cc:	f107 0314 	add.w	r3, r7, #20
 80092d0:	4619      	mov	r1, r3
 80092d2:	481b      	ldr	r0, [pc, #108]	; (8009340 <HAL_HCD_MspInit+0xc0>)
 80092d4:	f7f9 f9ce 	bl	8002674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80092d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80092dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092de:	2302      	movs	r3, #2
 80092e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092e6:	2300      	movs	r3, #0
 80092e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092ea:	230a      	movs	r3, #10
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092ee:	f107 0314 	add.w	r3, r7, #20
 80092f2:	4619      	mov	r1, r3
 80092f4:	4812      	ldr	r0, [pc, #72]	; (8009340 <HAL_HCD_MspInit+0xc0>)
 80092f6:	f7f9 f9bd 	bl	8002674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092fa:	4b10      	ldr	r3, [pc, #64]	; (800933c <HAL_HCD_MspInit+0xbc>)
 80092fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fe:	4a0f      	ldr	r2, [pc, #60]	; (800933c <HAL_HCD_MspInit+0xbc>)
 8009300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009304:	6353      	str	r3, [r2, #52]	; 0x34
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
 800930a:	4b0c      	ldr	r3, [pc, #48]	; (800933c <HAL_HCD_MspInit+0xbc>)
 800930c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800930e:	4a0b      	ldr	r2, [pc, #44]	; (800933c <HAL_HCD_MspInit+0xbc>)
 8009310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009314:	6453      	str	r3, [r2, #68]	; 0x44
 8009316:	4b09      	ldr	r3, [pc, #36]	; (800933c <HAL_HCD_MspInit+0xbc>)
 8009318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009322:	2200      	movs	r2, #0
 8009324:	2100      	movs	r1, #0
 8009326:	2043      	movs	r0, #67	; 0x43
 8009328:	f7f9 f96d 	bl	8002606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800932c:	2043      	movs	r0, #67	; 0x43
 800932e:	f7f9 f986 	bl	800263e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009332:	bf00      	nop
 8009334:	3728      	adds	r7, #40	; 0x28
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	40023800 	.word	0x40023800
 8009340:	40020000 	.word	0x40020000

08009344 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff f8db 	bl	800850e <USBH_LL_IncTimer>
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800936e:	4618      	mov	r0, r3
 8009370:	f7ff f913 	bl	800859a <USBH_LL_Connect>
}
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800938a:	4618      	mov	r0, r3
 800938c:	f7ff f91c 	bl	80085c8 <USBH_LL_Disconnect>
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
 80093a4:	4613      	mov	r3, r2
 80093a6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093c2:	4618      	mov	r0, r3
 80093c4:	f7ff f8cd 	bl	8008562 <USBH_LL_PortEnabled>
}
 80093c8:	bf00      	nop
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093de:	4618      	mov	r0, r3
 80093e0:	f7ff f8cd 	bl	800857e <USBH_LL_PortDisabled>
}
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d12a      	bne.n	8009454 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80093fe:	4a18      	ldr	r2, [pc, #96]	; (8009460 <USBH_LL_Init+0x74>)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a15      	ldr	r2, [pc, #84]	; (8009460 <USBH_LL_Init+0x74>)
 800940a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800940e:	4b14      	ldr	r3, [pc, #80]	; (8009460 <USBH_LL_Init+0x74>)
 8009410:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009414:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009416:	4b12      	ldr	r3, [pc, #72]	; (8009460 <USBH_LL_Init+0x74>)
 8009418:	2208      	movs	r2, #8
 800941a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800941c:	4b10      	ldr	r3, [pc, #64]	; (8009460 <USBH_LL_Init+0x74>)
 800941e:	2201      	movs	r2, #1
 8009420:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009422:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <USBH_LL_Init+0x74>)
 8009424:	2200      	movs	r2, #0
 8009426:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009428:	4b0d      	ldr	r3, [pc, #52]	; (8009460 <USBH_LL_Init+0x74>)
 800942a:	2202      	movs	r2, #2
 800942c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <USBH_LL_Init+0x74>)
 8009430:	2200      	movs	r2, #0
 8009432:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009434:	480a      	ldr	r0, [pc, #40]	; (8009460 <USBH_LL_Init+0x74>)
 8009436:	f7f9 fad2 	bl	80029de <HAL_HCD_Init>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009440:	f7f8 f958 	bl	80016f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009444:	4806      	ldr	r0, [pc, #24]	; (8009460 <USBH_LL_Init+0x74>)
 8009446:	f7f9 fed5 	bl	80031f4 <HAL_HCD_GetCurrentFrame>
 800944a:	4603      	mov	r3, r0
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7ff f84e 	bl	80084f0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20000640 	.word	0x20000640

08009464 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800947a:	4618      	mov	r0, r3
 800947c:	f7f9 fe42 	bl	8003104 <HAL_HCD_Start>
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009484:	7bfb      	ldrb	r3, [r7, #15]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f95e 	bl	8009748 <USBH_Get_USB_Status>
 800948c:	4603      	mov	r3, r0
 800948e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009490:	7bbb      	ldrb	r3, [r7, #14]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7f9 fe4a 	bl	800314a <HAL_HCD_Stop>
 80094b6:	4603      	mov	r3, r0
 80094b8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 f943 	bl	8009748 <USBH_Get_USB_Status>
 80094c2:	4603      	mov	r3, r0
 80094c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80094d8:	2301      	movs	r3, #1
 80094da:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7f9 fe94 	bl	8003210 <HAL_HCD_GetCurrentSpeed>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d00c      	beq.n	8009508 <USBH_LL_GetSpeed+0x38>
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d80d      	bhi.n	800950e <USBH_LL_GetSpeed+0x3e>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <USBH_LL_GetSpeed+0x2c>
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d003      	beq.n	8009502 <USBH_LL_GetSpeed+0x32>
 80094fa:	e008      	b.n	800950e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80094fc:	2300      	movs	r3, #0
 80094fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009500:	e008      	b.n	8009514 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009502:	2301      	movs	r3, #1
 8009504:	73fb      	strb	r3, [r7, #15]
    break;
 8009506:	e005      	b.n	8009514 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009508:	2302      	movs	r3, #2
 800950a:	73fb      	strb	r3, [r7, #15]
    break;
 800950c:	e002      	b.n	8009514 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800950e:	2301      	movs	r3, #1
 8009510:	73fb      	strb	r3, [r7, #15]
    break;
 8009512:	bf00      	nop
  }
  return  speed;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}

0800951e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009534:	4618      	mov	r0, r3
 8009536:	f7f9 fe25 	bl	8003184 <HAL_HCD_ResetPort>
 800953a:	4603      	mov	r3, r0
 800953c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f901 	bl	8009748 <USBH_Get_USB_Status>
 8009546:	4603      	mov	r3, r0
 8009548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800954a:	7bbb      	ldrb	r3, [r7, #14]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009566:	78fa      	ldrb	r2, [r7, #3]
 8009568:	4611      	mov	r1, r2
 800956a:	4618      	mov	r0, r3
 800956c:	f7f9 fe2d 	bl	80031ca <HAL_HCD_HC_GetXferCount>
 8009570:	4603      	mov	r3, r0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800957a:	b590      	push	{r4, r7, lr}
 800957c:	b089      	sub	sp, #36	; 0x24
 800957e:	af04      	add	r7, sp, #16
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	461a      	mov	r2, r3
 8009588:	4603      	mov	r3, r0
 800958a:	70fb      	strb	r3, [r7, #3]
 800958c:	460b      	mov	r3, r1
 800958e:	70bb      	strb	r3, [r7, #2]
 8009590:	4613      	mov	r3, r2
 8009592:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80095a2:	787c      	ldrb	r4, [r7, #1]
 80095a4:	78ba      	ldrb	r2, [r7, #2]
 80095a6:	78f9      	ldrb	r1, [r7, #3]
 80095a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80095aa:	9302      	str	r3, [sp, #8]
 80095ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	4623      	mov	r3, r4
 80095ba:	f7f9 fa72 	bl	8002aa2 <HAL_HCD_HC_Init>
 80095be:	4603      	mov	r3, r0
 80095c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 f8bf 	bl	8009748 <USBH_Get_USB_Status>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd90      	pop	{r4, r7, pc}

080095d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095f2:	78fa      	ldrb	r2, [r7, #3]
 80095f4:	4611      	mov	r1, r2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7f9 faeb 	bl	8002bd2 <HAL_HCD_HC_Halt>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	4618      	mov	r0, r3
 8009604:	f000 f8a0 	bl	8009748 <USBH_Get_USB_Status>
 8009608:	4603      	mov	r3, r0
 800960a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800960c:	7bbb      	ldrb	r3, [r7, #14]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009616:	b590      	push	{r4, r7, lr}
 8009618:	b089      	sub	sp, #36	; 0x24
 800961a:	af04      	add	r7, sp, #16
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	4608      	mov	r0, r1
 8009620:	4611      	mov	r1, r2
 8009622:	461a      	mov	r2, r3
 8009624:	4603      	mov	r3, r0
 8009626:	70fb      	strb	r3, [r7, #3]
 8009628:	460b      	mov	r3, r1
 800962a:	70bb      	strb	r3, [r7, #2]
 800962c:	4613      	mov	r3, r2
 800962e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800963e:	787c      	ldrb	r4, [r7, #1]
 8009640:	78ba      	ldrb	r2, [r7, #2]
 8009642:	78f9      	ldrb	r1, [r7, #3]
 8009644:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009648:	9303      	str	r3, [sp, #12]
 800964a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	9301      	str	r3, [sp, #4]
 8009652:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4623      	mov	r3, r4
 800965a:	f7f9 fadd 	bl	8002c18 <HAL_HCD_HC_SubmitRequest>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f86f 	bl	8009748 <USBH_Get_USB_Status>
 800966a:	4603      	mov	r3, r0
 800966c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	bd90      	pop	{r4, r7, pc}

08009678 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f7f9 fd86 	bl	80031a0 <HAL_HCD_HC_GetURBState>
 8009694:	4603      	mov	r3, r0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b082      	sub	sp, #8
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	460b      	mov	r3, r1
 80096a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d103      	bne.n	80096bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 f872 	bl	80097a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80096bc:	20c8      	movs	r0, #200	; 0xc8
 80096be:	f7f8 fae9 	bl	8001c94 <HAL_Delay>
  return USBH_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
 80096d8:	4613      	mov	r3, r2
 80096da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	68f9      	ldr	r1, [r7, #12]
 80096e8:	4613      	mov	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	440b      	add	r3, r1
 80096f2:	333b      	adds	r3, #59	; 0x3b
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00a      	beq.n	8009710 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80096fa:	78fa      	ldrb	r2, [r7, #3]
 80096fc:	68f9      	ldr	r1, [r7, #12]
 80096fe:	4613      	mov	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	00db      	lsls	r3, r3, #3
 8009706:	440b      	add	r3, r1
 8009708:	3350      	adds	r3, #80	; 0x50
 800970a:	78ba      	ldrb	r2, [r7, #2]
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	e009      	b.n	8009724 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009710:	78fa      	ldrb	r2, [r7, #3]
 8009712:	68f9      	ldr	r1, [r7, #12]
 8009714:	4613      	mov	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4413      	add	r3, r2
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	440b      	add	r3, r1
 800971e:	3351      	adds	r3, #81	; 0x51
 8009720:	78ba      	ldrb	r2, [r7, #2]
 8009722:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7f8 faaa 	bl	8001c94 <HAL_Delay>
}
 8009740:	bf00      	nop
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	4603      	mov	r3, r0
 8009750:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009756:	79fb      	ldrb	r3, [r7, #7]
 8009758:	2b03      	cmp	r3, #3
 800975a:	d817      	bhi.n	800978c <USBH_Get_USB_Status+0x44>
 800975c:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <USBH_Get_USB_Status+0x1c>)
 800975e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009762:	bf00      	nop
 8009764:	08009775 	.word	0x08009775
 8009768:	0800977b 	.word	0x0800977b
 800976c:	08009781 	.word	0x08009781
 8009770:	08009787 	.word	0x08009787
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	73fb      	strb	r3, [r7, #15]
    break;
 8009778:	e00b      	b.n	8009792 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800977a:	2302      	movs	r3, #2
 800977c:	73fb      	strb	r3, [r7, #15]
    break;
 800977e:	e008      	b.n	8009792 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009780:	2301      	movs	r3, #1
 8009782:	73fb      	strb	r3, [r7, #15]
    break;
 8009784:	e005      	b.n	8009792 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009786:	2302      	movs	r3, #2
 8009788:	73fb      	strb	r3, [r7, #15]
    break;
 800978a:	e002      	b.n	8009792 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800978c:	2302      	movs	r3, #2
 800978e:	73fb      	strb	r3, [r7, #15]
    break;
 8009790:	bf00      	nop
  }
  return usb_status;
 8009792:	7bfb      	ldrb	r3, [r7, #15]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80097aa:	79fb      	ldrb	r3, [r7, #7]
 80097ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
 80097b8:	e001      	b.n	80097be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	461a      	mov	r2, r3
 80097c2:	2101      	movs	r1, #1
 80097c4:	4803      	ldr	r0, [pc, #12]	; (80097d4 <MX_DriverVbusFS+0x34>)
 80097c6:	f7f9 f8f1 	bl	80029ac <HAL_GPIO_WritePin>
}
 80097ca:	bf00      	nop
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	40020800 	.word	0x40020800

080097d8 <__errno>:
 80097d8:	4b01      	ldr	r3, [pc, #4]	; (80097e0 <__errno+0x8>)
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	2000002c 	.word	0x2000002c

080097e4 <__libc_init_array>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4d0d      	ldr	r5, [pc, #52]	; (800981c <__libc_init_array+0x38>)
 80097e8:	4c0d      	ldr	r4, [pc, #52]	; (8009820 <__libc_init_array+0x3c>)
 80097ea:	1b64      	subs	r4, r4, r5
 80097ec:	10a4      	asrs	r4, r4, #2
 80097ee:	2600      	movs	r6, #0
 80097f0:	42a6      	cmp	r6, r4
 80097f2:	d109      	bne.n	8009808 <__libc_init_array+0x24>
 80097f4:	4d0b      	ldr	r5, [pc, #44]	; (8009824 <__libc_init_array+0x40>)
 80097f6:	4c0c      	ldr	r4, [pc, #48]	; (8009828 <__libc_init_array+0x44>)
 80097f8:	f000 fca4 	bl	800a144 <_init>
 80097fc:	1b64      	subs	r4, r4, r5
 80097fe:	10a4      	asrs	r4, r4, #2
 8009800:	2600      	movs	r6, #0
 8009802:	42a6      	cmp	r6, r4
 8009804:	d105      	bne.n	8009812 <__libc_init_array+0x2e>
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	f855 3b04 	ldr.w	r3, [r5], #4
 800980c:	4798      	blx	r3
 800980e:	3601      	adds	r6, #1
 8009810:	e7ee      	b.n	80097f0 <__libc_init_array+0xc>
 8009812:	f855 3b04 	ldr.w	r3, [r5], #4
 8009816:	4798      	blx	r3
 8009818:	3601      	adds	r6, #1
 800981a:	e7f2      	b.n	8009802 <__libc_init_array+0x1e>
 800981c:	0800a1bc 	.word	0x0800a1bc
 8009820:	0800a1bc 	.word	0x0800a1bc
 8009824:	0800a1bc 	.word	0x0800a1bc
 8009828:	0800a1c0 	.word	0x0800a1c0

0800982c <malloc>:
 800982c:	4b02      	ldr	r3, [pc, #8]	; (8009838 <malloc+0xc>)
 800982e:	4601      	mov	r1, r0
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	f000 b863 	b.w	80098fc <_malloc_r>
 8009836:	bf00      	nop
 8009838:	2000002c 	.word	0x2000002c

0800983c <free>:
 800983c:	4b02      	ldr	r3, [pc, #8]	; (8009848 <free+0xc>)
 800983e:	4601      	mov	r1, r0
 8009840:	6818      	ldr	r0, [r3, #0]
 8009842:	f000 b80b 	b.w	800985c <_free_r>
 8009846:	bf00      	nop
 8009848:	2000002c 	.word	0x2000002c

0800984c <memset>:
 800984c:	4402      	add	r2, r0
 800984e:	4603      	mov	r3, r0
 8009850:	4293      	cmp	r3, r2
 8009852:	d100      	bne.n	8009856 <memset+0xa>
 8009854:	4770      	bx	lr
 8009856:	f803 1b01 	strb.w	r1, [r3], #1
 800985a:	e7f9      	b.n	8009850 <memset+0x4>

0800985c <_free_r>:
 800985c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800985e:	2900      	cmp	r1, #0
 8009860:	d048      	beq.n	80098f4 <_free_r+0x98>
 8009862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009866:	9001      	str	r0, [sp, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	f1a1 0404 	sub.w	r4, r1, #4
 800986e:	bfb8      	it	lt
 8009870:	18e4      	addlt	r4, r4, r3
 8009872:	f000 f8cd 	bl	8009a10 <__malloc_lock>
 8009876:	4a20      	ldr	r2, [pc, #128]	; (80098f8 <_free_r+0x9c>)
 8009878:	9801      	ldr	r0, [sp, #4]
 800987a:	6813      	ldr	r3, [r2, #0]
 800987c:	4615      	mov	r5, r2
 800987e:	b933      	cbnz	r3, 800988e <_free_r+0x32>
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	6014      	str	r4, [r2, #0]
 8009884:	b003      	add	sp, #12
 8009886:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800988a:	f000 b8c7 	b.w	8009a1c <__malloc_unlock>
 800988e:	42a3      	cmp	r3, r4
 8009890:	d90b      	bls.n	80098aa <_free_r+0x4e>
 8009892:	6821      	ldr	r1, [r4, #0]
 8009894:	1862      	adds	r2, r4, r1
 8009896:	4293      	cmp	r3, r2
 8009898:	bf04      	itt	eq
 800989a:	681a      	ldreq	r2, [r3, #0]
 800989c:	685b      	ldreq	r3, [r3, #4]
 800989e:	6063      	str	r3, [r4, #4]
 80098a0:	bf04      	itt	eq
 80098a2:	1852      	addeq	r2, r2, r1
 80098a4:	6022      	streq	r2, [r4, #0]
 80098a6:	602c      	str	r4, [r5, #0]
 80098a8:	e7ec      	b.n	8009884 <_free_r+0x28>
 80098aa:	461a      	mov	r2, r3
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	b10b      	cbz	r3, 80098b4 <_free_r+0x58>
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	d9fa      	bls.n	80098aa <_free_r+0x4e>
 80098b4:	6811      	ldr	r1, [r2, #0]
 80098b6:	1855      	adds	r5, r2, r1
 80098b8:	42a5      	cmp	r5, r4
 80098ba:	d10b      	bne.n	80098d4 <_free_r+0x78>
 80098bc:	6824      	ldr	r4, [r4, #0]
 80098be:	4421      	add	r1, r4
 80098c0:	1854      	adds	r4, r2, r1
 80098c2:	42a3      	cmp	r3, r4
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	d1dd      	bne.n	8009884 <_free_r+0x28>
 80098c8:	681c      	ldr	r4, [r3, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	6053      	str	r3, [r2, #4]
 80098ce:	4421      	add	r1, r4
 80098d0:	6011      	str	r1, [r2, #0]
 80098d2:	e7d7      	b.n	8009884 <_free_r+0x28>
 80098d4:	d902      	bls.n	80098dc <_free_r+0x80>
 80098d6:	230c      	movs	r3, #12
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	e7d3      	b.n	8009884 <_free_r+0x28>
 80098dc:	6825      	ldr	r5, [r4, #0]
 80098de:	1961      	adds	r1, r4, r5
 80098e0:	428b      	cmp	r3, r1
 80098e2:	bf04      	itt	eq
 80098e4:	6819      	ldreq	r1, [r3, #0]
 80098e6:	685b      	ldreq	r3, [r3, #4]
 80098e8:	6063      	str	r3, [r4, #4]
 80098ea:	bf04      	itt	eq
 80098ec:	1949      	addeq	r1, r1, r5
 80098ee:	6021      	streq	r1, [r4, #0]
 80098f0:	6054      	str	r4, [r2, #4]
 80098f2:	e7c7      	b.n	8009884 <_free_r+0x28>
 80098f4:	b003      	add	sp, #12
 80098f6:	bd30      	pop	{r4, r5, pc}
 80098f8:	200000bc 	.word	0x200000bc

080098fc <_malloc_r>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	1ccd      	adds	r5, r1, #3
 8009900:	f025 0503 	bic.w	r5, r5, #3
 8009904:	3508      	adds	r5, #8
 8009906:	2d0c      	cmp	r5, #12
 8009908:	bf38      	it	cc
 800990a:	250c      	movcc	r5, #12
 800990c:	2d00      	cmp	r5, #0
 800990e:	4606      	mov	r6, r0
 8009910:	db01      	blt.n	8009916 <_malloc_r+0x1a>
 8009912:	42a9      	cmp	r1, r5
 8009914:	d903      	bls.n	800991e <_malloc_r+0x22>
 8009916:	230c      	movs	r3, #12
 8009918:	6033      	str	r3, [r6, #0]
 800991a:	2000      	movs	r0, #0
 800991c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800991e:	f000 f877 	bl	8009a10 <__malloc_lock>
 8009922:	4921      	ldr	r1, [pc, #132]	; (80099a8 <_malloc_r+0xac>)
 8009924:	680a      	ldr	r2, [r1, #0]
 8009926:	4614      	mov	r4, r2
 8009928:	b99c      	cbnz	r4, 8009952 <_malloc_r+0x56>
 800992a:	4f20      	ldr	r7, [pc, #128]	; (80099ac <_malloc_r+0xb0>)
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	b923      	cbnz	r3, 800993a <_malloc_r+0x3e>
 8009930:	4621      	mov	r1, r4
 8009932:	4630      	mov	r0, r6
 8009934:	f000 f83c 	bl	80099b0 <_sbrk_r>
 8009938:	6038      	str	r0, [r7, #0]
 800993a:	4629      	mov	r1, r5
 800993c:	4630      	mov	r0, r6
 800993e:	f000 f837 	bl	80099b0 <_sbrk_r>
 8009942:	1c43      	adds	r3, r0, #1
 8009944:	d123      	bne.n	800998e <_malloc_r+0x92>
 8009946:	230c      	movs	r3, #12
 8009948:	6033      	str	r3, [r6, #0]
 800994a:	4630      	mov	r0, r6
 800994c:	f000 f866 	bl	8009a1c <__malloc_unlock>
 8009950:	e7e3      	b.n	800991a <_malloc_r+0x1e>
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	1b5b      	subs	r3, r3, r5
 8009956:	d417      	bmi.n	8009988 <_malloc_r+0x8c>
 8009958:	2b0b      	cmp	r3, #11
 800995a:	d903      	bls.n	8009964 <_malloc_r+0x68>
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	441c      	add	r4, r3
 8009960:	6025      	str	r5, [r4, #0]
 8009962:	e004      	b.n	800996e <_malloc_r+0x72>
 8009964:	6863      	ldr	r3, [r4, #4]
 8009966:	42a2      	cmp	r2, r4
 8009968:	bf0c      	ite	eq
 800996a:	600b      	streq	r3, [r1, #0]
 800996c:	6053      	strne	r3, [r2, #4]
 800996e:	4630      	mov	r0, r6
 8009970:	f000 f854 	bl	8009a1c <__malloc_unlock>
 8009974:	f104 000b 	add.w	r0, r4, #11
 8009978:	1d23      	adds	r3, r4, #4
 800997a:	f020 0007 	bic.w	r0, r0, #7
 800997e:	1ac2      	subs	r2, r0, r3
 8009980:	d0cc      	beq.n	800991c <_malloc_r+0x20>
 8009982:	1a1b      	subs	r3, r3, r0
 8009984:	50a3      	str	r3, [r4, r2]
 8009986:	e7c9      	b.n	800991c <_malloc_r+0x20>
 8009988:	4622      	mov	r2, r4
 800998a:	6864      	ldr	r4, [r4, #4]
 800998c:	e7cc      	b.n	8009928 <_malloc_r+0x2c>
 800998e:	1cc4      	adds	r4, r0, #3
 8009990:	f024 0403 	bic.w	r4, r4, #3
 8009994:	42a0      	cmp	r0, r4
 8009996:	d0e3      	beq.n	8009960 <_malloc_r+0x64>
 8009998:	1a21      	subs	r1, r4, r0
 800999a:	4630      	mov	r0, r6
 800999c:	f000 f808 	bl	80099b0 <_sbrk_r>
 80099a0:	3001      	adds	r0, #1
 80099a2:	d1dd      	bne.n	8009960 <_malloc_r+0x64>
 80099a4:	e7cf      	b.n	8009946 <_malloc_r+0x4a>
 80099a6:	bf00      	nop
 80099a8:	200000bc 	.word	0x200000bc
 80099ac:	200000c0 	.word	0x200000c0

080099b0 <_sbrk_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d06      	ldr	r5, [pc, #24]	; (80099cc <_sbrk_r+0x1c>)
 80099b4:	2300      	movs	r3, #0
 80099b6:	4604      	mov	r4, r0
 80099b8:	4608      	mov	r0, r1
 80099ba:	602b      	str	r3, [r5, #0]
 80099bc:	f7f8 f882 	bl	8001ac4 <_sbrk>
 80099c0:	1c43      	adds	r3, r0, #1
 80099c2:	d102      	bne.n	80099ca <_sbrk_r+0x1a>
 80099c4:	682b      	ldr	r3, [r5, #0]
 80099c6:	b103      	cbz	r3, 80099ca <_sbrk_r+0x1a>
 80099c8:	6023      	str	r3, [r4, #0]
 80099ca:	bd38      	pop	{r3, r4, r5, pc}
 80099cc:	20000904 	.word	0x20000904

080099d0 <siprintf>:
 80099d0:	b40e      	push	{r1, r2, r3}
 80099d2:	b500      	push	{lr}
 80099d4:	b09c      	sub	sp, #112	; 0x70
 80099d6:	ab1d      	add	r3, sp, #116	; 0x74
 80099d8:	9002      	str	r0, [sp, #8]
 80099da:	9006      	str	r0, [sp, #24]
 80099dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80099e0:	4809      	ldr	r0, [pc, #36]	; (8009a08 <siprintf+0x38>)
 80099e2:	9107      	str	r1, [sp, #28]
 80099e4:	9104      	str	r1, [sp, #16]
 80099e6:	4909      	ldr	r1, [pc, #36]	; (8009a0c <siprintf+0x3c>)
 80099e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ec:	9105      	str	r1, [sp, #20]
 80099ee:	6800      	ldr	r0, [r0, #0]
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	a902      	add	r1, sp, #8
 80099f4:	f000 f874 	bl	8009ae0 <_svfiprintf_r>
 80099f8:	9b02      	ldr	r3, [sp, #8]
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
 80099fe:	b01c      	add	sp, #112	; 0x70
 8009a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a04:	b003      	add	sp, #12
 8009a06:	4770      	bx	lr
 8009a08:	2000002c 	.word	0x2000002c
 8009a0c:	ffff0208 	.word	0xffff0208

08009a10 <__malloc_lock>:
 8009a10:	4801      	ldr	r0, [pc, #4]	; (8009a18 <__malloc_lock+0x8>)
 8009a12:	f000 baf9 	b.w	800a008 <__retarget_lock_acquire_recursive>
 8009a16:	bf00      	nop
 8009a18:	2000090c 	.word	0x2000090c

08009a1c <__malloc_unlock>:
 8009a1c:	4801      	ldr	r0, [pc, #4]	; (8009a24 <__malloc_unlock+0x8>)
 8009a1e:	f000 baf4 	b.w	800a00a <__retarget_lock_release_recursive>
 8009a22:	bf00      	nop
 8009a24:	2000090c 	.word	0x2000090c

08009a28 <__ssputs_r>:
 8009a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2c:	688e      	ldr	r6, [r1, #8]
 8009a2e:	429e      	cmp	r6, r3
 8009a30:	4682      	mov	sl, r0
 8009a32:	460c      	mov	r4, r1
 8009a34:	4690      	mov	r8, r2
 8009a36:	461f      	mov	r7, r3
 8009a38:	d838      	bhi.n	8009aac <__ssputs_r+0x84>
 8009a3a:	898a      	ldrh	r2, [r1, #12]
 8009a3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a40:	d032      	beq.n	8009aa8 <__ssputs_r+0x80>
 8009a42:	6825      	ldr	r5, [r4, #0]
 8009a44:	6909      	ldr	r1, [r1, #16]
 8009a46:	eba5 0901 	sub.w	r9, r5, r1
 8009a4a:	6965      	ldr	r5, [r4, #20]
 8009a4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a54:	3301      	adds	r3, #1
 8009a56:	444b      	add	r3, r9
 8009a58:	106d      	asrs	r5, r5, #1
 8009a5a:	429d      	cmp	r5, r3
 8009a5c:	bf38      	it	cc
 8009a5e:	461d      	movcc	r5, r3
 8009a60:	0553      	lsls	r3, r2, #21
 8009a62:	d531      	bpl.n	8009ac8 <__ssputs_r+0xa0>
 8009a64:	4629      	mov	r1, r5
 8009a66:	f7ff ff49 	bl	80098fc <_malloc_r>
 8009a6a:	4606      	mov	r6, r0
 8009a6c:	b950      	cbnz	r0, 8009a84 <__ssputs_r+0x5c>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	f8ca 3000 	str.w	r3, [sl]
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a7a:	81a3      	strh	r3, [r4, #12]
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a84:	6921      	ldr	r1, [r4, #16]
 8009a86:	464a      	mov	r2, r9
 8009a88:	f000 fac0 	bl	800a00c <memcpy>
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a96:	81a3      	strh	r3, [r4, #12]
 8009a98:	6126      	str	r6, [r4, #16]
 8009a9a:	6165      	str	r5, [r4, #20]
 8009a9c:	444e      	add	r6, r9
 8009a9e:	eba5 0509 	sub.w	r5, r5, r9
 8009aa2:	6026      	str	r6, [r4, #0]
 8009aa4:	60a5      	str	r5, [r4, #8]
 8009aa6:	463e      	mov	r6, r7
 8009aa8:	42be      	cmp	r6, r7
 8009aaa:	d900      	bls.n	8009aae <__ssputs_r+0x86>
 8009aac:	463e      	mov	r6, r7
 8009aae:	4632      	mov	r2, r6
 8009ab0:	6820      	ldr	r0, [r4, #0]
 8009ab2:	4641      	mov	r1, r8
 8009ab4:	f000 fab8 	bl	800a028 <memmove>
 8009ab8:	68a3      	ldr	r3, [r4, #8]
 8009aba:	6822      	ldr	r2, [r4, #0]
 8009abc:	1b9b      	subs	r3, r3, r6
 8009abe:	4432      	add	r2, r6
 8009ac0:	60a3      	str	r3, [r4, #8]
 8009ac2:	6022      	str	r2, [r4, #0]
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	e7db      	b.n	8009a80 <__ssputs_r+0x58>
 8009ac8:	462a      	mov	r2, r5
 8009aca:	f000 fac7 	bl	800a05c <_realloc_r>
 8009ace:	4606      	mov	r6, r0
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d1e1      	bne.n	8009a98 <__ssputs_r+0x70>
 8009ad4:	6921      	ldr	r1, [r4, #16]
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	f7ff fec0 	bl	800985c <_free_r>
 8009adc:	e7c7      	b.n	8009a6e <__ssputs_r+0x46>
	...

08009ae0 <_svfiprintf_r>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	4698      	mov	r8, r3
 8009ae6:	898b      	ldrh	r3, [r1, #12]
 8009ae8:	061b      	lsls	r3, r3, #24
 8009aea:	b09d      	sub	sp, #116	; 0x74
 8009aec:	4607      	mov	r7, r0
 8009aee:	460d      	mov	r5, r1
 8009af0:	4614      	mov	r4, r2
 8009af2:	d50e      	bpl.n	8009b12 <_svfiprintf_r+0x32>
 8009af4:	690b      	ldr	r3, [r1, #16]
 8009af6:	b963      	cbnz	r3, 8009b12 <_svfiprintf_r+0x32>
 8009af8:	2140      	movs	r1, #64	; 0x40
 8009afa:	f7ff feff 	bl	80098fc <_malloc_r>
 8009afe:	6028      	str	r0, [r5, #0]
 8009b00:	6128      	str	r0, [r5, #16]
 8009b02:	b920      	cbnz	r0, 8009b0e <_svfiprintf_r+0x2e>
 8009b04:	230c      	movs	r3, #12
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0c:	e0d1      	b.n	8009cb2 <_svfiprintf_r+0x1d2>
 8009b0e:	2340      	movs	r3, #64	; 0x40
 8009b10:	616b      	str	r3, [r5, #20]
 8009b12:	2300      	movs	r3, #0
 8009b14:	9309      	str	r3, [sp, #36]	; 0x24
 8009b16:	2320      	movs	r3, #32
 8009b18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b20:	2330      	movs	r3, #48	; 0x30
 8009b22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ccc <_svfiprintf_r+0x1ec>
 8009b26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b2a:	f04f 0901 	mov.w	r9, #1
 8009b2e:	4623      	mov	r3, r4
 8009b30:	469a      	mov	sl, r3
 8009b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b36:	b10a      	cbz	r2, 8009b3c <_svfiprintf_r+0x5c>
 8009b38:	2a25      	cmp	r2, #37	; 0x25
 8009b3a:	d1f9      	bne.n	8009b30 <_svfiprintf_r+0x50>
 8009b3c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b40:	d00b      	beq.n	8009b5a <_svfiprintf_r+0x7a>
 8009b42:	465b      	mov	r3, fp
 8009b44:	4622      	mov	r2, r4
 8009b46:	4629      	mov	r1, r5
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f7ff ff6d 	bl	8009a28 <__ssputs_r>
 8009b4e:	3001      	adds	r0, #1
 8009b50:	f000 80aa 	beq.w	8009ca8 <_svfiprintf_r+0x1c8>
 8009b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b56:	445a      	add	r2, fp
 8009b58:	9209      	str	r2, [sp, #36]	; 0x24
 8009b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 80a2 	beq.w	8009ca8 <_svfiprintf_r+0x1c8>
 8009b64:	2300      	movs	r3, #0
 8009b66:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b6e:	f10a 0a01 	add.w	sl, sl, #1
 8009b72:	9304      	str	r3, [sp, #16]
 8009b74:	9307      	str	r3, [sp, #28]
 8009b76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b7a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b7c:	4654      	mov	r4, sl
 8009b7e:	2205      	movs	r2, #5
 8009b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b84:	4851      	ldr	r0, [pc, #324]	; (8009ccc <_svfiprintf_r+0x1ec>)
 8009b86:	f7f6 fb2b 	bl	80001e0 <memchr>
 8009b8a:	9a04      	ldr	r2, [sp, #16]
 8009b8c:	b9d8      	cbnz	r0, 8009bc6 <_svfiprintf_r+0xe6>
 8009b8e:	06d0      	lsls	r0, r2, #27
 8009b90:	bf44      	itt	mi
 8009b92:	2320      	movmi	r3, #32
 8009b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b98:	0711      	lsls	r1, r2, #28
 8009b9a:	bf44      	itt	mi
 8009b9c:	232b      	movmi	r3, #43	; 0x2b
 8009b9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ba2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ba6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ba8:	d015      	beq.n	8009bd6 <_svfiprintf_r+0xf6>
 8009baa:	9a07      	ldr	r2, [sp, #28]
 8009bac:	4654      	mov	r4, sl
 8009bae:	2000      	movs	r0, #0
 8009bb0:	f04f 0c0a 	mov.w	ip, #10
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bba:	3b30      	subs	r3, #48	; 0x30
 8009bbc:	2b09      	cmp	r3, #9
 8009bbe:	d94e      	bls.n	8009c5e <_svfiprintf_r+0x17e>
 8009bc0:	b1b0      	cbz	r0, 8009bf0 <_svfiprintf_r+0x110>
 8009bc2:	9207      	str	r2, [sp, #28]
 8009bc4:	e014      	b.n	8009bf0 <_svfiprintf_r+0x110>
 8009bc6:	eba0 0308 	sub.w	r3, r0, r8
 8009bca:	fa09 f303 	lsl.w	r3, r9, r3
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	46a2      	mov	sl, r4
 8009bd4:	e7d2      	b.n	8009b7c <_svfiprintf_r+0x9c>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	1d19      	adds	r1, r3, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	9103      	str	r1, [sp, #12]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfbb      	ittet	lt
 8009be2:	425b      	neglt	r3, r3
 8009be4:	f042 0202 	orrlt.w	r2, r2, #2
 8009be8:	9307      	strge	r3, [sp, #28]
 8009bea:	9307      	strlt	r3, [sp, #28]
 8009bec:	bfb8      	it	lt
 8009bee:	9204      	strlt	r2, [sp, #16]
 8009bf0:	7823      	ldrb	r3, [r4, #0]
 8009bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8009bf4:	d10c      	bne.n	8009c10 <_svfiprintf_r+0x130>
 8009bf6:	7863      	ldrb	r3, [r4, #1]
 8009bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8009bfa:	d135      	bne.n	8009c68 <_svfiprintf_r+0x188>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	1d1a      	adds	r2, r3, #4
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	9203      	str	r2, [sp, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	bfb8      	it	lt
 8009c08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c0c:	3402      	adds	r4, #2
 8009c0e:	9305      	str	r3, [sp, #20]
 8009c10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009cdc <_svfiprintf_r+0x1fc>
 8009c14:	7821      	ldrb	r1, [r4, #0]
 8009c16:	2203      	movs	r2, #3
 8009c18:	4650      	mov	r0, sl
 8009c1a:	f7f6 fae1 	bl	80001e0 <memchr>
 8009c1e:	b140      	cbz	r0, 8009c32 <_svfiprintf_r+0x152>
 8009c20:	2340      	movs	r3, #64	; 0x40
 8009c22:	eba0 000a 	sub.w	r0, r0, sl
 8009c26:	fa03 f000 	lsl.w	r0, r3, r0
 8009c2a:	9b04      	ldr	r3, [sp, #16]
 8009c2c:	4303      	orrs	r3, r0
 8009c2e:	3401      	adds	r4, #1
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c36:	4826      	ldr	r0, [pc, #152]	; (8009cd0 <_svfiprintf_r+0x1f0>)
 8009c38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c3c:	2206      	movs	r2, #6
 8009c3e:	f7f6 facf 	bl	80001e0 <memchr>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d038      	beq.n	8009cb8 <_svfiprintf_r+0x1d8>
 8009c46:	4b23      	ldr	r3, [pc, #140]	; (8009cd4 <_svfiprintf_r+0x1f4>)
 8009c48:	bb1b      	cbnz	r3, 8009c92 <_svfiprintf_r+0x1b2>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	3307      	adds	r3, #7
 8009c4e:	f023 0307 	bic.w	r3, r3, #7
 8009c52:	3308      	adds	r3, #8
 8009c54:	9303      	str	r3, [sp, #12]
 8009c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c58:	4433      	add	r3, r6
 8009c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5c:	e767      	b.n	8009b2e <_svfiprintf_r+0x4e>
 8009c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c62:	460c      	mov	r4, r1
 8009c64:	2001      	movs	r0, #1
 8009c66:	e7a5      	b.n	8009bb4 <_svfiprintf_r+0xd4>
 8009c68:	2300      	movs	r3, #0
 8009c6a:	3401      	adds	r4, #1
 8009c6c:	9305      	str	r3, [sp, #20]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	f04f 0c0a 	mov.w	ip, #10
 8009c74:	4620      	mov	r0, r4
 8009c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c7a:	3a30      	subs	r2, #48	; 0x30
 8009c7c:	2a09      	cmp	r2, #9
 8009c7e:	d903      	bls.n	8009c88 <_svfiprintf_r+0x1a8>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d0c5      	beq.n	8009c10 <_svfiprintf_r+0x130>
 8009c84:	9105      	str	r1, [sp, #20]
 8009c86:	e7c3      	b.n	8009c10 <_svfiprintf_r+0x130>
 8009c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e7f0      	b.n	8009c74 <_svfiprintf_r+0x194>
 8009c92:	ab03      	add	r3, sp, #12
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	462a      	mov	r2, r5
 8009c98:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <_svfiprintf_r+0x1f8>)
 8009c9a:	a904      	add	r1, sp, #16
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f3af 8000 	nop.w
 8009ca2:	1c42      	adds	r2, r0, #1
 8009ca4:	4606      	mov	r6, r0
 8009ca6:	d1d6      	bne.n	8009c56 <_svfiprintf_r+0x176>
 8009ca8:	89ab      	ldrh	r3, [r5, #12]
 8009caa:	065b      	lsls	r3, r3, #25
 8009cac:	f53f af2c 	bmi.w	8009b08 <_svfiprintf_r+0x28>
 8009cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cb2:	b01d      	add	sp, #116	; 0x74
 8009cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb8:	ab03      	add	r3, sp, #12
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	462a      	mov	r2, r5
 8009cbe:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <_svfiprintf_r+0x1f8>)
 8009cc0:	a904      	add	r1, sp, #16
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	f000 f87a 	bl	8009dbc <_printf_i>
 8009cc8:	e7eb      	b.n	8009ca2 <_svfiprintf_r+0x1c2>
 8009cca:	bf00      	nop
 8009ccc:	0800a180 	.word	0x0800a180
 8009cd0:	0800a18a 	.word	0x0800a18a
 8009cd4:	00000000 	.word	0x00000000
 8009cd8:	08009a29 	.word	0x08009a29
 8009cdc:	0800a186 	.word	0x0800a186

08009ce0 <_printf_common>:
 8009ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce4:	4616      	mov	r6, r2
 8009ce6:	4699      	mov	r9, r3
 8009ce8:	688a      	ldr	r2, [r1, #8]
 8009cea:	690b      	ldr	r3, [r1, #16]
 8009cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	bfb8      	it	lt
 8009cf4:	4613      	movlt	r3, r2
 8009cf6:	6033      	str	r3, [r6, #0]
 8009cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cfc:	4607      	mov	r7, r0
 8009cfe:	460c      	mov	r4, r1
 8009d00:	b10a      	cbz	r2, 8009d06 <_printf_common+0x26>
 8009d02:	3301      	adds	r3, #1
 8009d04:	6033      	str	r3, [r6, #0]
 8009d06:	6823      	ldr	r3, [r4, #0]
 8009d08:	0699      	lsls	r1, r3, #26
 8009d0a:	bf42      	ittt	mi
 8009d0c:	6833      	ldrmi	r3, [r6, #0]
 8009d0e:	3302      	addmi	r3, #2
 8009d10:	6033      	strmi	r3, [r6, #0]
 8009d12:	6825      	ldr	r5, [r4, #0]
 8009d14:	f015 0506 	ands.w	r5, r5, #6
 8009d18:	d106      	bne.n	8009d28 <_printf_common+0x48>
 8009d1a:	f104 0a19 	add.w	sl, r4, #25
 8009d1e:	68e3      	ldr	r3, [r4, #12]
 8009d20:	6832      	ldr	r2, [r6, #0]
 8009d22:	1a9b      	subs	r3, r3, r2
 8009d24:	42ab      	cmp	r3, r5
 8009d26:	dc26      	bgt.n	8009d76 <_printf_common+0x96>
 8009d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d2c:	1e13      	subs	r3, r2, #0
 8009d2e:	6822      	ldr	r2, [r4, #0]
 8009d30:	bf18      	it	ne
 8009d32:	2301      	movne	r3, #1
 8009d34:	0692      	lsls	r2, r2, #26
 8009d36:	d42b      	bmi.n	8009d90 <_printf_common+0xb0>
 8009d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	4638      	mov	r0, r7
 8009d40:	47c0      	blx	r8
 8009d42:	3001      	adds	r0, #1
 8009d44:	d01e      	beq.n	8009d84 <_printf_common+0xa4>
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	68e5      	ldr	r5, [r4, #12]
 8009d4a:	6832      	ldr	r2, [r6, #0]
 8009d4c:	f003 0306 	and.w	r3, r3, #6
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	bf08      	it	eq
 8009d54:	1aad      	subeq	r5, r5, r2
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	6922      	ldr	r2, [r4, #16]
 8009d5a:	bf0c      	ite	eq
 8009d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d60:	2500      	movne	r5, #0
 8009d62:	4293      	cmp	r3, r2
 8009d64:	bfc4      	itt	gt
 8009d66:	1a9b      	subgt	r3, r3, r2
 8009d68:	18ed      	addgt	r5, r5, r3
 8009d6a:	2600      	movs	r6, #0
 8009d6c:	341a      	adds	r4, #26
 8009d6e:	42b5      	cmp	r5, r6
 8009d70:	d11a      	bne.n	8009da8 <_printf_common+0xc8>
 8009d72:	2000      	movs	r0, #0
 8009d74:	e008      	b.n	8009d88 <_printf_common+0xa8>
 8009d76:	2301      	movs	r3, #1
 8009d78:	4652      	mov	r2, sl
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	47c0      	blx	r8
 8009d80:	3001      	adds	r0, #1
 8009d82:	d103      	bne.n	8009d8c <_printf_common+0xac>
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295
 8009d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d8c:	3501      	adds	r5, #1
 8009d8e:	e7c6      	b.n	8009d1e <_printf_common+0x3e>
 8009d90:	18e1      	adds	r1, r4, r3
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	2030      	movs	r0, #48	; 0x30
 8009d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d9a:	4422      	add	r2, r4
 8009d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009da4:	3302      	adds	r3, #2
 8009da6:	e7c7      	b.n	8009d38 <_printf_common+0x58>
 8009da8:	2301      	movs	r3, #1
 8009daa:	4622      	mov	r2, r4
 8009dac:	4649      	mov	r1, r9
 8009dae:	4638      	mov	r0, r7
 8009db0:	47c0      	blx	r8
 8009db2:	3001      	adds	r0, #1
 8009db4:	d0e6      	beq.n	8009d84 <_printf_common+0xa4>
 8009db6:	3601      	adds	r6, #1
 8009db8:	e7d9      	b.n	8009d6e <_printf_common+0x8e>
	...

08009dbc <_printf_i>:
 8009dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	4691      	mov	r9, r2
 8009dc4:	7e27      	ldrb	r7, [r4, #24]
 8009dc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009dc8:	2f78      	cmp	r7, #120	; 0x78
 8009dca:	4680      	mov	r8, r0
 8009dcc:	469a      	mov	sl, r3
 8009dce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dd2:	d807      	bhi.n	8009de4 <_printf_i+0x28>
 8009dd4:	2f62      	cmp	r7, #98	; 0x62
 8009dd6:	d80a      	bhi.n	8009dee <_printf_i+0x32>
 8009dd8:	2f00      	cmp	r7, #0
 8009dda:	f000 80d8 	beq.w	8009f8e <_printf_i+0x1d2>
 8009dde:	2f58      	cmp	r7, #88	; 0x58
 8009de0:	f000 80a3 	beq.w	8009f2a <_printf_i+0x16e>
 8009de4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dec:	e03a      	b.n	8009e64 <_printf_i+0xa8>
 8009dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009df2:	2b15      	cmp	r3, #21
 8009df4:	d8f6      	bhi.n	8009de4 <_printf_i+0x28>
 8009df6:	a001      	add	r0, pc, #4	; (adr r0, 8009dfc <_printf_i+0x40>)
 8009df8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009dfc:	08009e55 	.word	0x08009e55
 8009e00:	08009e69 	.word	0x08009e69
 8009e04:	08009de5 	.word	0x08009de5
 8009e08:	08009de5 	.word	0x08009de5
 8009e0c:	08009de5 	.word	0x08009de5
 8009e10:	08009de5 	.word	0x08009de5
 8009e14:	08009e69 	.word	0x08009e69
 8009e18:	08009de5 	.word	0x08009de5
 8009e1c:	08009de5 	.word	0x08009de5
 8009e20:	08009de5 	.word	0x08009de5
 8009e24:	08009de5 	.word	0x08009de5
 8009e28:	08009f75 	.word	0x08009f75
 8009e2c:	08009e99 	.word	0x08009e99
 8009e30:	08009f57 	.word	0x08009f57
 8009e34:	08009de5 	.word	0x08009de5
 8009e38:	08009de5 	.word	0x08009de5
 8009e3c:	08009f97 	.word	0x08009f97
 8009e40:	08009de5 	.word	0x08009de5
 8009e44:	08009e99 	.word	0x08009e99
 8009e48:	08009de5 	.word	0x08009de5
 8009e4c:	08009de5 	.word	0x08009de5
 8009e50:	08009f5f 	.word	0x08009f5f
 8009e54:	680b      	ldr	r3, [r1, #0]
 8009e56:	1d1a      	adds	r2, r3, #4
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	600a      	str	r2, [r1, #0]
 8009e5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e64:	2301      	movs	r3, #1
 8009e66:	e0a3      	b.n	8009fb0 <_printf_i+0x1f4>
 8009e68:	6825      	ldr	r5, [r4, #0]
 8009e6a:	6808      	ldr	r0, [r1, #0]
 8009e6c:	062e      	lsls	r6, r5, #24
 8009e6e:	f100 0304 	add.w	r3, r0, #4
 8009e72:	d50a      	bpl.n	8009e8a <_printf_i+0xce>
 8009e74:	6805      	ldr	r5, [r0, #0]
 8009e76:	600b      	str	r3, [r1, #0]
 8009e78:	2d00      	cmp	r5, #0
 8009e7a:	da03      	bge.n	8009e84 <_printf_i+0xc8>
 8009e7c:	232d      	movs	r3, #45	; 0x2d
 8009e7e:	426d      	negs	r5, r5
 8009e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e84:	485e      	ldr	r0, [pc, #376]	; (800a000 <_printf_i+0x244>)
 8009e86:	230a      	movs	r3, #10
 8009e88:	e019      	b.n	8009ebe <_printf_i+0x102>
 8009e8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009e8e:	6805      	ldr	r5, [r0, #0]
 8009e90:	600b      	str	r3, [r1, #0]
 8009e92:	bf18      	it	ne
 8009e94:	b22d      	sxthne	r5, r5
 8009e96:	e7ef      	b.n	8009e78 <_printf_i+0xbc>
 8009e98:	680b      	ldr	r3, [r1, #0]
 8009e9a:	6825      	ldr	r5, [r4, #0]
 8009e9c:	1d18      	adds	r0, r3, #4
 8009e9e:	6008      	str	r0, [r1, #0]
 8009ea0:	0628      	lsls	r0, r5, #24
 8009ea2:	d501      	bpl.n	8009ea8 <_printf_i+0xec>
 8009ea4:	681d      	ldr	r5, [r3, #0]
 8009ea6:	e002      	b.n	8009eae <_printf_i+0xf2>
 8009ea8:	0669      	lsls	r1, r5, #25
 8009eaa:	d5fb      	bpl.n	8009ea4 <_printf_i+0xe8>
 8009eac:	881d      	ldrh	r5, [r3, #0]
 8009eae:	4854      	ldr	r0, [pc, #336]	; (800a000 <_printf_i+0x244>)
 8009eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8009eb2:	bf0c      	ite	eq
 8009eb4:	2308      	moveq	r3, #8
 8009eb6:	230a      	movne	r3, #10
 8009eb8:	2100      	movs	r1, #0
 8009eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ebe:	6866      	ldr	r6, [r4, #4]
 8009ec0:	60a6      	str	r6, [r4, #8]
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	bfa2      	ittt	ge
 8009ec6:	6821      	ldrge	r1, [r4, #0]
 8009ec8:	f021 0104 	bicge.w	r1, r1, #4
 8009ecc:	6021      	strge	r1, [r4, #0]
 8009ece:	b90d      	cbnz	r5, 8009ed4 <_printf_i+0x118>
 8009ed0:	2e00      	cmp	r6, #0
 8009ed2:	d04d      	beq.n	8009f70 <_printf_i+0x1b4>
 8009ed4:	4616      	mov	r6, r2
 8009ed6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009eda:	fb03 5711 	mls	r7, r3, r1, r5
 8009ede:	5dc7      	ldrb	r7, [r0, r7]
 8009ee0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ee4:	462f      	mov	r7, r5
 8009ee6:	42bb      	cmp	r3, r7
 8009ee8:	460d      	mov	r5, r1
 8009eea:	d9f4      	bls.n	8009ed6 <_printf_i+0x11a>
 8009eec:	2b08      	cmp	r3, #8
 8009eee:	d10b      	bne.n	8009f08 <_printf_i+0x14c>
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	07df      	lsls	r7, r3, #31
 8009ef4:	d508      	bpl.n	8009f08 <_printf_i+0x14c>
 8009ef6:	6923      	ldr	r3, [r4, #16]
 8009ef8:	6861      	ldr	r1, [r4, #4]
 8009efa:	4299      	cmp	r1, r3
 8009efc:	bfde      	ittt	le
 8009efe:	2330      	movle	r3, #48	; 0x30
 8009f00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f08:	1b92      	subs	r2, r2, r6
 8009f0a:	6122      	str	r2, [r4, #16]
 8009f0c:	f8cd a000 	str.w	sl, [sp]
 8009f10:	464b      	mov	r3, r9
 8009f12:	aa03      	add	r2, sp, #12
 8009f14:	4621      	mov	r1, r4
 8009f16:	4640      	mov	r0, r8
 8009f18:	f7ff fee2 	bl	8009ce0 <_printf_common>
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d14c      	bne.n	8009fba <_printf_i+0x1fe>
 8009f20:	f04f 30ff 	mov.w	r0, #4294967295
 8009f24:	b004      	add	sp, #16
 8009f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2a:	4835      	ldr	r0, [pc, #212]	; (800a000 <_printf_i+0x244>)
 8009f2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	680e      	ldr	r6, [r1, #0]
 8009f34:	061f      	lsls	r7, r3, #24
 8009f36:	f856 5b04 	ldr.w	r5, [r6], #4
 8009f3a:	600e      	str	r6, [r1, #0]
 8009f3c:	d514      	bpl.n	8009f68 <_printf_i+0x1ac>
 8009f3e:	07d9      	lsls	r1, r3, #31
 8009f40:	bf44      	itt	mi
 8009f42:	f043 0320 	orrmi.w	r3, r3, #32
 8009f46:	6023      	strmi	r3, [r4, #0]
 8009f48:	b91d      	cbnz	r5, 8009f52 <_printf_i+0x196>
 8009f4a:	6823      	ldr	r3, [r4, #0]
 8009f4c:	f023 0320 	bic.w	r3, r3, #32
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	2310      	movs	r3, #16
 8009f54:	e7b0      	b.n	8009eb8 <_printf_i+0xfc>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	f043 0320 	orr.w	r3, r3, #32
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	2378      	movs	r3, #120	; 0x78
 8009f60:	4828      	ldr	r0, [pc, #160]	; (800a004 <_printf_i+0x248>)
 8009f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f66:	e7e3      	b.n	8009f30 <_printf_i+0x174>
 8009f68:	065e      	lsls	r6, r3, #25
 8009f6a:	bf48      	it	mi
 8009f6c:	b2ad      	uxthmi	r5, r5
 8009f6e:	e7e6      	b.n	8009f3e <_printf_i+0x182>
 8009f70:	4616      	mov	r6, r2
 8009f72:	e7bb      	b.n	8009eec <_printf_i+0x130>
 8009f74:	680b      	ldr	r3, [r1, #0]
 8009f76:	6826      	ldr	r6, [r4, #0]
 8009f78:	6960      	ldr	r0, [r4, #20]
 8009f7a:	1d1d      	adds	r5, r3, #4
 8009f7c:	600d      	str	r5, [r1, #0]
 8009f7e:	0635      	lsls	r5, r6, #24
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	d501      	bpl.n	8009f88 <_printf_i+0x1cc>
 8009f84:	6018      	str	r0, [r3, #0]
 8009f86:	e002      	b.n	8009f8e <_printf_i+0x1d2>
 8009f88:	0671      	lsls	r1, r6, #25
 8009f8a:	d5fb      	bpl.n	8009f84 <_printf_i+0x1c8>
 8009f8c:	8018      	strh	r0, [r3, #0]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	6123      	str	r3, [r4, #16]
 8009f92:	4616      	mov	r6, r2
 8009f94:	e7ba      	b.n	8009f0c <_printf_i+0x150>
 8009f96:	680b      	ldr	r3, [r1, #0]
 8009f98:	1d1a      	adds	r2, r3, #4
 8009f9a:	600a      	str	r2, [r1, #0]
 8009f9c:	681e      	ldr	r6, [r3, #0]
 8009f9e:	6862      	ldr	r2, [r4, #4]
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4630      	mov	r0, r6
 8009fa4:	f7f6 f91c 	bl	80001e0 <memchr>
 8009fa8:	b108      	cbz	r0, 8009fae <_printf_i+0x1f2>
 8009faa:	1b80      	subs	r0, r0, r6
 8009fac:	6060      	str	r0, [r4, #4]
 8009fae:	6863      	ldr	r3, [r4, #4]
 8009fb0:	6123      	str	r3, [r4, #16]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fb8:	e7a8      	b.n	8009f0c <_printf_i+0x150>
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	4632      	mov	r2, r6
 8009fbe:	4649      	mov	r1, r9
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	47d0      	blx	sl
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d0ab      	beq.n	8009f20 <_printf_i+0x164>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	079b      	lsls	r3, r3, #30
 8009fcc:	d413      	bmi.n	8009ff6 <_printf_i+0x23a>
 8009fce:	68e0      	ldr	r0, [r4, #12]
 8009fd0:	9b03      	ldr	r3, [sp, #12]
 8009fd2:	4298      	cmp	r0, r3
 8009fd4:	bfb8      	it	lt
 8009fd6:	4618      	movlt	r0, r3
 8009fd8:	e7a4      	b.n	8009f24 <_printf_i+0x168>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4632      	mov	r2, r6
 8009fde:	4649      	mov	r1, r9
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	47d0      	blx	sl
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d09b      	beq.n	8009f20 <_printf_i+0x164>
 8009fe8:	3501      	adds	r5, #1
 8009fea:	68e3      	ldr	r3, [r4, #12]
 8009fec:	9903      	ldr	r1, [sp, #12]
 8009fee:	1a5b      	subs	r3, r3, r1
 8009ff0:	42ab      	cmp	r3, r5
 8009ff2:	dcf2      	bgt.n	8009fda <_printf_i+0x21e>
 8009ff4:	e7eb      	b.n	8009fce <_printf_i+0x212>
 8009ff6:	2500      	movs	r5, #0
 8009ff8:	f104 0619 	add.w	r6, r4, #25
 8009ffc:	e7f5      	b.n	8009fea <_printf_i+0x22e>
 8009ffe:	bf00      	nop
 800a000:	0800a191 	.word	0x0800a191
 800a004:	0800a1a2 	.word	0x0800a1a2

0800a008 <__retarget_lock_acquire_recursive>:
 800a008:	4770      	bx	lr

0800a00a <__retarget_lock_release_recursive>:
 800a00a:	4770      	bx	lr

0800a00c <memcpy>:
 800a00c:	440a      	add	r2, r1
 800a00e:	4291      	cmp	r1, r2
 800a010:	f100 33ff 	add.w	r3, r0, #4294967295
 800a014:	d100      	bne.n	800a018 <memcpy+0xc>
 800a016:	4770      	bx	lr
 800a018:	b510      	push	{r4, lr}
 800a01a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a01e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a022:	4291      	cmp	r1, r2
 800a024:	d1f9      	bne.n	800a01a <memcpy+0xe>
 800a026:	bd10      	pop	{r4, pc}

0800a028 <memmove>:
 800a028:	4288      	cmp	r0, r1
 800a02a:	b510      	push	{r4, lr}
 800a02c:	eb01 0402 	add.w	r4, r1, r2
 800a030:	d902      	bls.n	800a038 <memmove+0x10>
 800a032:	4284      	cmp	r4, r0
 800a034:	4623      	mov	r3, r4
 800a036:	d807      	bhi.n	800a048 <memmove+0x20>
 800a038:	1e43      	subs	r3, r0, #1
 800a03a:	42a1      	cmp	r1, r4
 800a03c:	d008      	beq.n	800a050 <memmove+0x28>
 800a03e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a042:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a046:	e7f8      	b.n	800a03a <memmove+0x12>
 800a048:	4402      	add	r2, r0
 800a04a:	4601      	mov	r1, r0
 800a04c:	428a      	cmp	r2, r1
 800a04e:	d100      	bne.n	800a052 <memmove+0x2a>
 800a050:	bd10      	pop	{r4, pc}
 800a052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a05a:	e7f7      	b.n	800a04c <memmove+0x24>

0800a05c <_realloc_r>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	4607      	mov	r7, r0
 800a060:	4614      	mov	r4, r2
 800a062:	460e      	mov	r6, r1
 800a064:	b921      	cbnz	r1, 800a070 <_realloc_r+0x14>
 800a066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a06a:	4611      	mov	r1, r2
 800a06c:	f7ff bc46 	b.w	80098fc <_malloc_r>
 800a070:	b922      	cbnz	r2, 800a07c <_realloc_r+0x20>
 800a072:	f7ff fbf3 	bl	800985c <_free_r>
 800a076:	4625      	mov	r5, r4
 800a078:	4628      	mov	r0, r5
 800a07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a07c:	f000 f814 	bl	800a0a8 <_malloc_usable_size_r>
 800a080:	42a0      	cmp	r0, r4
 800a082:	d20f      	bcs.n	800a0a4 <_realloc_r+0x48>
 800a084:	4621      	mov	r1, r4
 800a086:	4638      	mov	r0, r7
 800a088:	f7ff fc38 	bl	80098fc <_malloc_r>
 800a08c:	4605      	mov	r5, r0
 800a08e:	2800      	cmp	r0, #0
 800a090:	d0f2      	beq.n	800a078 <_realloc_r+0x1c>
 800a092:	4631      	mov	r1, r6
 800a094:	4622      	mov	r2, r4
 800a096:	f7ff ffb9 	bl	800a00c <memcpy>
 800a09a:	4631      	mov	r1, r6
 800a09c:	4638      	mov	r0, r7
 800a09e:	f7ff fbdd 	bl	800985c <_free_r>
 800a0a2:	e7e9      	b.n	800a078 <_realloc_r+0x1c>
 800a0a4:	4635      	mov	r5, r6
 800a0a6:	e7e7      	b.n	800a078 <_realloc_r+0x1c>

0800a0a8 <_malloc_usable_size_r>:
 800a0a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ac:	1f18      	subs	r0, r3, #4
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	bfbc      	itt	lt
 800a0b2:	580b      	ldrlt	r3, [r1, r0]
 800a0b4:	18c0      	addlt	r0, r0, r3
 800a0b6:	4770      	bx	lr

0800a0b8 <round>:
 800a0b8:	ec51 0b10 	vmov	r0, r1, d0
 800a0bc:	b570      	push	{r4, r5, r6, lr}
 800a0be:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a0c2:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a0c6:	2c13      	cmp	r4, #19
 800a0c8:	ee10 2a10 	vmov	r2, s0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	dc19      	bgt.n	800a104 <round+0x4c>
 800a0d0:	2c00      	cmp	r4, #0
 800a0d2:	da09      	bge.n	800a0e8 <round+0x30>
 800a0d4:	3401      	adds	r4, #1
 800a0d6:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a0da:	d103      	bne.n	800a0e4 <round+0x2c>
 800a0dc:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a0e0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	e028      	b.n	800a13a <round+0x82>
 800a0e8:	4d15      	ldr	r5, [pc, #84]	; (800a140 <round+0x88>)
 800a0ea:	4125      	asrs	r5, r4
 800a0ec:	ea01 0605 	and.w	r6, r1, r5
 800a0f0:	4332      	orrs	r2, r6
 800a0f2:	d00e      	beq.n	800a112 <round+0x5a>
 800a0f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a0f8:	fa42 f404 	asr.w	r4, r2, r4
 800a0fc:	4423      	add	r3, r4
 800a0fe:	ea23 0305 	bic.w	r3, r3, r5
 800a102:	e7ef      	b.n	800a0e4 <round+0x2c>
 800a104:	2c33      	cmp	r4, #51	; 0x33
 800a106:	dd07      	ble.n	800a118 <round+0x60>
 800a108:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a10c:	d101      	bne.n	800a112 <round+0x5a>
 800a10e:	f7f6 f8bd 	bl	800028c <__adddf3>
 800a112:	ec41 0b10 	vmov	d0, r0, r1
 800a116:	bd70      	pop	{r4, r5, r6, pc}
 800a118:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800a11c:	f04f 35ff 	mov.w	r5, #4294967295
 800a120:	40f5      	lsrs	r5, r6
 800a122:	4228      	tst	r0, r5
 800a124:	d0f5      	beq.n	800a112 <round+0x5a>
 800a126:	2101      	movs	r1, #1
 800a128:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a12c:	fa01 f404 	lsl.w	r4, r1, r4
 800a130:	1912      	adds	r2, r2, r4
 800a132:	bf28      	it	cs
 800a134:	185b      	addcs	r3, r3, r1
 800a136:	ea22 0105 	bic.w	r1, r2, r5
 800a13a:	4608      	mov	r0, r1
 800a13c:	4619      	mov	r1, r3
 800a13e:	e7e8      	b.n	800a112 <round+0x5a>
 800a140:	000fffff 	.word	0x000fffff

0800a144 <_init>:
 800a144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a146:	bf00      	nop
 800a148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14a:	bc08      	pop	{r3}
 800a14c:	469e      	mov	lr, r3
 800a14e:	4770      	bx	lr

0800a150 <_fini>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	bf00      	nop
 800a154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a156:	bc08      	pop	{r3}
 800a158:	469e      	mov	lr, r3
 800a15a:	4770      	bx	lr
