
MC_CAN_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f94  08008f94  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f9c  08008f9c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f9c  08008f9c  00018f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fa0  08008fa0  00018fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b64  200001ec  08009190  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  08009190  00021d50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b897  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003924  00000000  00000000  0003bab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  0003f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00040388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253d3  00000000  00000000  000411f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014975  00000000  00000000  000665c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5d7f  00000000  00000000  0007af38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150cb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004438  00000000  00000000  00150d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e9c 	.word	0x08008e9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08008e9c 	.word	0x08008e9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fc6f 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f847 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f961 	bl	800084c <MX_GPIO_Init>
  MX_CAN1_Init();
 800058a:	f000 f8ff 	bl	800078c <MX_CAN1_Init>
  MX_ADC1_Init();
 800058e:	f000 f8ab 	bl	80006e8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f931 	bl	80007f8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000596:	f007 fb07 	bl	8007ba8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	//Initialize CAN header - standard id type, set standard Id = filter ID of other device
	CAN_TxHeader_Init(&pTxHeader, 3, CAN_ID_STD, CAN_RTR_DATA, MC_TX);
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <main+0x80>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	2200      	movs	r2, #0
 80005a4:	2103      	movs	r1, #3
 80005a6:	4815      	ldr	r0, [pc, #84]	; (80005fc <main+0x84>)
 80005a8:	f000 f9c8 	bl	800093c <CAN_TxHeader_Init>

	//Initialize CAN filter - filter ID = TxHeader Id of other device, 32 bit scale. Enables and configs filter.
	CAN_Filter_Init(&hcan1, &sFilterConfig, CAN_FILTER_FIFO0, MC_RX, 0, 0, 0, CAN_FILTERSCALE_32BIT);
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <main+0x88>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2201      	movs	r2, #1
 80005b2:	9203      	str	r2, [sp, #12]
 80005b4:	2200      	movs	r2, #0
 80005b6:	9202      	str	r2, [sp, #8]
 80005b8:	2200      	movs	r2, #0
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	2200      	movs	r2, #0
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	4910      	ldr	r1, [pc, #64]	; (8000604 <main+0x8c>)
 80005c4:	4810      	ldr	r0, [pc, #64]	; (8000608 <main+0x90>)
 80005c6:	f000 f9d2 	bl	800096e <CAN_Filter_Init>

	//start CAN
	HAL_CAN_Start(&hcan1);
 80005ca:	480f      	ldr	r0, [pc, #60]	; (8000608 <main+0x90>)
 80005cc:	f001 fa86 	bl	8001adc <HAL_CAN_Start>

	//interrupt on message pending
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005d0:	2102      	movs	r1, #2
 80005d2:	480d      	ldr	r0, [pc, #52]	; (8000608 <main+0x90>)
 80005d4:	f001 fcb3 	bl	8001f3e <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_ADC_Start(&hadc1);
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <main+0x94>)
 80005da:	f000 fd1b 	bl	8001014 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80005de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <main+0x94>)
 80005e4:	f000 fde8 	bl	80011b8 <HAL_ADC_PollForConversion>
		sensor_raw = HAL_ADC_GetValue(&hadc1);
 80005e8:	4808      	ldr	r0, [pc, #32]	; (800060c <main+0x94>)
 80005ea:	f000 fe70 	bl	80012ce <HAL_ADC_GetValue>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <main+0x98>)
 80005f4:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 80005f6:	e7ef      	b.n	80005d8 <main+0x60>
 80005f8:	20000004 	.word	0x20000004
 80005fc:	20000368 	.word	0x20000368
 8000600:	20000000 	.word	0x20000000
 8000604:	20000338 	.word	0x20000338
 8000608:	2000043c 	.word	0x2000043c
 800060c:	20000388 	.word	0x20000388
 8000610:	200003d0 	.word	0x200003d0

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f008 f804 	bl	8008630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000684:	230d      	movs	r3, #13
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000688:	23a8      	movs	r3, #168	; 0xa8
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f003 fb1d 	bl	8003cd8 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f988 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fd7e 	bl	80041c8 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 f971 	bl	80009b8 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_ADC1_Init+0x98>)
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <MX_ADC1_Init+0x9c>)
 80006fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_ADC1_Init+0x98>)
 8000702:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000706:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <MX_ADC1_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800070e:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_ADC1_Init+0x98>)
 8000710:	2201      	movs	r2, #1
 8000712:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000714:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <MX_ADC1_Init+0x98>)
 8000716:	2201      	movs	r2, #1
 8000718:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_ADC1_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_ADC1_Init+0x98>)
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_ADC1_Init+0xa0>)
 800072c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_ADC1_Init+0x98>)
 8000736:	2201      	movs	r2, #1
 8000738:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_ADC1_Init+0x98>)
 8000744:	2201      	movs	r2, #1
 8000746:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_ADC1_Init+0x98>)
 800074a:	f000 fc1f 	bl	8000f8c <HAL_ADC_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000754:	f000 f930 	bl	80009b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000758:	2301      	movs	r3, #1
 800075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_ADC1_Init+0x98>)
 800076a:	f000 fdbd 	bl	80012e8 <HAL_ADC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000774:	f000 f920 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000388 	.word	0x20000388
 8000784:	40012000 	.word	0x40012000
 8000788:	0f000001 	.word	0x0f000001

0800078c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_CAN1_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	; (80007f4 <MX_CAN1_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000796:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <MX_CAN1_Init+0x64>)
 8000798:	220c      	movs	r2, #12
 800079a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800079c:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_CAN1_Init+0x64>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007aa:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80007ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007b6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <MX_CAN1_Init+0x64>)
 80007de:	f000 ffa1 	bl	8001724 <HAL_CAN_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 f8e6 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	2000043c 	.word	0x2000043c
 80007f4:	40006400 	.word	0x40006400

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	; (8000848 <MX_USART2_UART_Init+0x50>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_USART2_UART_Init+0x4c>)
 8000830:	f003 fe9a 	bl	8004568 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083a:	f000 f8bd 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200003f8 	.word	0x200003f8
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <MX_GPIO_Init+0xe4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a31      	ldr	r2, [pc, #196]	; (8000930 <MX_GPIO_Init+0xe4>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b2f      	ldr	r3, [pc, #188]	; (8000930 <MX_GPIO_Init+0xe4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_GPIO_Init+0xe4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a2a      	ldr	r2, [pc, #168]	; (8000930 <MX_GPIO_Init+0xe4>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b28      	ldr	r3, [pc, #160]	; (8000930 <MX_GPIO_Init+0xe4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_GPIO_Init+0xe4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a23      	ldr	r2, [pc, #140]	; (8000930 <MX_GPIO_Init+0xe4>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_GPIO_Init+0xe4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_GPIO_Init+0xe4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_GPIO_Init+0xe4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_GPIO_Init+0xe4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008d8:	4816      	ldr	r0, [pc, #88]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008da:	f002 f83d 	bl	8002958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_GPIO_Init+0xec>)
 80008f4:	f001 fe94 	bl	8002620 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000912:	f001 fe85 	bl	8002620 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8000916:	2201      	movs	r2, #1
 8000918:	2100      	movs	r1, #0
 800091a:	2006      	movs	r0, #6
 800091c:	f001 fe49 	bl	80025b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000920:	2006      	movs	r0, #6
 8000922:	f001 fe62 	bl	80025ea <HAL_NVIC_EnableIRQ>

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020c00 	.word	0x40020c00
 8000938:	40020000 	.word	0x40020000

0800093c <CAN_TxHeader_Init>:

/* USER CODE BEGIN 4 */
static void CAN_TxHeader_Init(CAN_TxHeaderTypeDef *pTxHeader, uint32_t dlc,
		uint32_t ide, uint32_t rtr, uint32_t stdId)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	60b9      	str	r1, [r7, #8]
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	603b      	str	r3, [r7, #0]
	pTxHeader->DLC = dlc; // 'dlc' bytes of data
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	611a      	str	r2, [r3, #16]
	pTxHeader->IDE = ide;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	609a      	str	r2, [r3, #8]
	pTxHeader->RTR = rtr;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	60da      	str	r2, [r3, #12]
	pTxHeader->StdId = stdId; //set standard identifier.
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	601a      	str	r2, [r3, #0]
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <CAN_Filter_Init>:
 * @retval None
 */
static void CAN_Filter_Init(CAN_HandleTypeDef *hcan,
		CAN_FilterTypeDef *sFilterConfig, uint32_t fifo, uint32_t highId,
		uint32_t lowId, uint32_t highMask, uint32_t lowMask, uint32_t scale)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]
 800097a:	603b      	str	r3, [r7, #0]
	sFilterConfig->FilterFIFOAssignment = fifo;
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	611a      	str	r2, [r3, #16]
	sFilterConfig->FilterIdHigh = highId << 5; //must be shifted 5 bits to the left according to reference manual
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	015a      	lsls	r2, r3, #5
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	601a      	str	r2, [r3, #0]
	sFilterConfig->FilterIdLow = lowId;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	605a      	str	r2, [r3, #4]
	sFilterConfig->FilterMaskIdHigh = highMask;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	609a      	str	r2, [r3, #8]
	sFilterConfig->FilterMaskIdLow = lowMask;
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	6a3a      	ldr	r2, [r7, #32]
 800099a:	60da      	str	r2, [r3, #12]
	sFilterConfig->FilterScale = scale;
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009a0:	61da      	str	r2, [r3, #28]
	sFilterConfig->FilterActivation = CAN_FILTER_ENABLE; //enable activation
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	2201      	movs	r2, #1
 80009a6:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(hcan, sFilterConfig); //config CAN filter
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f000 ffb6 	bl	800191c <HAL_CAN_ConfigFilter>
}
 80009b0:	bf00      	nop
 80009b2:	3710      	adds	r7, #16
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a02:	2007      	movs	r0, #7
 8000a04:	f001 fdca 	bl	800259c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a17      	ldr	r2, [pc, #92]	; (8000a90 <HAL_ADC_MspInit+0x7c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d127      	bne.n	8000a86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_ADC_MspInit+0x80>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a72:	2303      	movs	r3, #3
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_ADC_MspInit+0x84>)
 8000a82:	f001 fdcd 	bl	8002620 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3728      	adds	r7, #40	; 0x28
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40012000 	.word	0x40012000
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_CAN_MspInit+0x94>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d134      	bne.n	8000b28 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <HAL_CAN_MspInit+0x98>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <HAL_CAN_MspInit+0x98>)
 8000ac8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_CAN_MspInit+0x98>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_CAN_MspInit+0x98>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a14      	ldr	r2, [pc, #80]	; (8000b34 <HAL_CAN_MspInit+0x98>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <HAL_CAN_MspInit+0x98>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b08:	2309      	movs	r3, #9
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4809      	ldr	r0, [pc, #36]	; (8000b38 <HAL_CAN_MspInit+0x9c>)
 8000b14:	f001 fd84 	bl	8002620 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 8000b18:	2202      	movs	r2, #2
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2014      	movs	r0, #20
 8000b1e:	f001 fd48 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b22:	2014      	movs	r0, #20
 8000b24:	f001 fd61 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40006400 	.word	0x40006400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12b      	bne.n	8000bb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b96:	230c      	movs	r3, #12
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb2:	f001 fd35 	bl	8002620 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb6:	bf00      	nop
 8000bb8:	3728      	adds	r7, #40	; 0x28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40004400 	.word	0x40004400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f974 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09c      	sub	sp, #112	; 0x70
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	char msg[100];
	uint8_t regId = 0x1B; // Register you are reading from or writing to
 8000c26:	231b      	movs	r3, #27
 8000c28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t readCommandId = 0x3D; // Value to tell the controller we are reading
 8000c2c:	233d      	movs	r3, #61	; 0x3d
 8000c2e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	// Transmit over serial
	//sprintf(msg, "Sending value:%d to id:%lu\n", sensor_raw, MC_TX);
	sprintf(msg, "Sending read request for ID:0x1B from %lu\n\r", MC_RX);
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <EXTI0_IRQHandler+0x84>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	491b      	ldr	r1, [pc, #108]	; (8000ca8 <EXTI0_IRQHandler+0x88>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f007 fd00 	bl	8008640 <siprintf>
	uint8_t *msg_int = (uint8_t *)msg;
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	66bb      	str	r3, [r7, #104]	; 0x68
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fac2 	bl	80001d0 <strlen>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	1d39      	adds	r1, r7, #4
 8000c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c56:	4815      	ldr	r0, [pc, #84]	; (8000cac <EXTI0_IRQHandler+0x8c>)
 8000c58:	f003 fcd3 	bl	8004602 <HAL_UART_Transmit>
	//tData[0] = regID;
	//tData[1] = sensor_raw;
	//tData[2] = sensor_raw >> 8;

	// Read from controller
	tData[0] = readCommandId;
 8000c5c:	4a14      	ldr	r2, [pc, #80]	; (8000cb0 <EXTI0_IRQHandler+0x90>)
 8000c5e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000c62:	7013      	strb	r3, [r2, #0]
	tData[1] = regId;
 8000c64:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <EXTI0_IRQHandler+0x90>)
 8000c66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c6a:	7053      	strb	r3, [r2, #1]

	HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, tData, &pTxMailbox);
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <EXTI0_IRQHandler+0x94>)
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <EXTI0_IRQHandler+0x90>)
 8000c70:	4911      	ldr	r1, [pc, #68]	; (8000cb8 <EXTI0_IRQHandler+0x98>)
 8000c72:	4812      	ldr	r0, [pc, #72]	; (8000cbc <EXTI0_IRQHandler+0x9c>)
 8000c74:	f000 ff76 	bl	8001b64 <HAL_CAN_AddTxMessage>
	while (CDC_Transmit_FS(msg_int, strlen(msg)) != USBD_OK)
 8000c78:	bf00      	nop
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff faa7 	bl	80001d0 <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	4619      	mov	r1, r3
 8000c88:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000c8a:	f007 f84b 	bl	8007d24 <CDC_Transmit_FS>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f2      	bne.n	8000c7a <EXTI0_IRQHandler+0x5a>
	{
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f001 fe79 	bl	800298c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3770      	adds	r7, #112	; 0x70
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	08008eb4 	.word	0x08008eb4
 8000cac:	200003f8 	.word	0x200003f8
 8000cb0:	200003d4 	.word	0x200003d4
 8000cb4:	20000364 	.word	0x20000364
 8000cb8:	20000368 	.word	0x20000368
 8000cbc:	2000043c 	.word	0x2000043c

08000cc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b09a      	sub	sp, #104	; 0x68
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cc6:	481f      	ldr	r0, [pc, #124]	; (8000d44 <CAN1_RX0_IRQHandler+0x84>)
 8000cc8:	f001 f95f 	bl	8001f8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, rcvData); //receive byte
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <CAN1_RX0_IRQHandler+0x88>)
 8000cce:	4a1f      	ldr	r2, [pc, #124]	; (8000d4c <CAN1_RX0_IRQHandler+0x8c>)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	481c      	ldr	r0, [pc, #112]	; (8000d44 <CAN1_RX0_IRQHandler+0x84>)
 8000cd4:	f001 f821 	bl	8001d1a <HAL_CAN_GetRxMessage>
	rcvDataVal = 0;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <CAN1_RX0_IRQHandler+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
	rcvDataVal = (rcvData[1] | rcvData[2] << 8);
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <CAN1_RX0_IRQHandler+0x88>)
 8000ce0:	785b      	ldrb	r3, [r3, #1]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <CAN1_RX0_IRQHandler+0x88>)
 8000ce6:	789b      	ldrb	r3, [r3, #2]
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	4313      	orrs	r3, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <CAN1_RX0_IRQHandler+0x90>)
 8000cf0:	601a      	str	r2, [r3, #0]

	char msg[100];
	// Transmit over serial
	sprintf(msg, "Received value:%lu from id:%lu\n", rcvDataVal, MC_RX);
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <CAN1_RX0_IRQHandler+0x90>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <CAN1_RX0_IRQHandler+0x94>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4638      	mov	r0, r7
 8000cfc:	4916      	ldr	r1, [pc, #88]	; (8000d58 <CAN1_RX0_IRQHandler+0x98>)
 8000cfe:	f007 fc9f 	bl	8008640 <siprintf>
	uint8_t *msg_int = (uint8_t *)msg;
 8000d02:	463b      	mov	r3, r7
 8000d04:	667b      	str	r3, [r7, #100]	; 0x64
	HAL_UART_Transmit(&huart2, msg_int, strlen(msg), 1000);
 8000d06:	463b      	mov	r3, r7
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fa61 	bl	80001d0 <strlen>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8000d18:	4810      	ldr	r0, [pc, #64]	; (8000d5c <CAN1_RX0_IRQHandler+0x9c>)
 8000d1a:	f003 fc72 	bl	8004602 <HAL_UART_Transmit>
	while (CDC_Transmit_FS(msg_int, strlen(msg)) != USBD_OK)
 8000d1e:	bf00      	nop
 8000d20:	463b      	mov	r3, r7
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fa54 	bl	80001d0 <strlen>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000d30:	f006 fff8 	bl	8007d24 <CDC_Transmit_FS>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f2      	bne.n	8000d20 <CAN1_RX0_IRQHandler+0x60>
	{
	}
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bf00      	nop
 8000d3e:	3768      	adds	r7, #104	; 0x68
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	2000043c 	.word	0x2000043c
 8000d48:	20000380 	.word	0x20000380
 8000d4c:	200003dc 	.word	0x200003dc
 8000d50:	20000360 	.word	0x20000360
 8000d54:	20000000 	.word	0x20000000
 8000d58:	08008ee0 	.word	0x08008ee0
 8000d5c:	200003f8 	.word	0x200003f8

08000d60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <OTG_FS_IRQHandler+0x10>)
 8000d66:	f001 ff84 	bl	8002c72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20001938 	.word	0x20001938

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f007 fc1a 	bl	80085dc <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20020000 	.word	0x20020000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	20000208 	.word	0x20000208
 8000ddc:	20001d50 	.word	0x20001d50

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <SystemInit+0x28>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a07      	ldr	r2, [pc, #28]	; (8000e08 <SystemInit+0x28>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SystemInit+0x28>)
 8000df6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dfa:	609a      	str	r2, [r3, #8]
#endif
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e12:	e003      	b.n	8000e1c <LoopCopyDataInit>

08000e14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e1a:	3104      	adds	r1, #4

08000e1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e24:	d3f6      	bcc.n	8000e14 <CopyDataInit>
  ldr  r2, =_sbss
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e28:	e002      	b.n	8000e30 <LoopFillZerobss>

08000e2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e2c:	f842 3b04 	str.w	r3, [r2], #4

08000e30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e34:	d3f9      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e36:	f7ff ffd3 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f007 fbd5 	bl	80085e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fb9b 	bl	8000578 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e48:	08008fa4 	.word	0x08008fa4
  ldr  r0, =_sdata
 8000e4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e50:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000e54:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000e58:	20001d50 	.word	0x20001d50

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f001 fb87 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fd96 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fb9f 	bl	8002606 <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f001 fb67 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000010 	.word	0x20000010
 8000f00:	2000000c 	.word	0x2000000c

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000010 	.word	0x20000010
 8000f28:	20000464 	.word	0x20000464

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000464 	.word	0x20000464

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000010 	.word	0x20000010

08000f8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e033      	b.n	800100a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d109      	bne.n	8000fbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fd32 	bl	8000a14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d118      	bne.n	8000ffc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fd2:	f023 0302 	bic.w	r3, r3, #2
 8000fd6:	f043 0202 	orr.w	r2, r3, #2
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 faa4 	bl	800152c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	f023 0303 	bic.w	r3, r3, #3
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8000ffa:	e001      	b.n	8001000 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <HAL_ADC_Start+0x1a>
 800102a:	2302      	movs	r3, #2
 800102c:	e0b2      	b.n	8001194 <HAL_ADC_Start+0x180>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d018      	beq.n	8001076 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001054:	4b52      	ldr	r3, [pc, #328]	; (80011a0 <HAL_ADC_Start+0x18c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a52      	ldr	r2, [pc, #328]	; (80011a4 <HAL_ADC_Start+0x190>)
 800105a:	fba2 2303 	umull	r2, r3, r2, r3
 800105e:	0c9a      	lsrs	r2, r3, #18
 8001060:	4613      	mov	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001068:	e002      	b.n	8001070 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3b01      	subs	r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f9      	bne.n	800106a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b01      	cmp	r3, #1
 8001082:	d17a      	bne.n	800117a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010c2:	d106      	bne.n	80010d2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	f023 0206 	bic.w	r2, r3, #6
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	645a      	str	r2, [r3, #68]	; 0x44
 80010d0:	e002      	b.n	80010d8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <HAL_ADC_Start+0x194>)
 80010e2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010ec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d12a      	bne.n	8001150 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a2b      	ldr	r2, [pc, #172]	; (80011ac <HAL_ADC_Start+0x198>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d015      	beq.n	8001130 <HAL_ADC_Start+0x11c>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <HAL_ADC_Start+0x19c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d105      	bne.n	800111a <HAL_ADC_Start+0x106>
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <HAL_ADC_Start+0x194>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 031f 	and.w	r3, r3, #31
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00a      	beq.n	8001130 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a25      	ldr	r2, [pc, #148]	; (80011b4 <HAL_ADC_Start+0x1a0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d136      	bne.n	8001192 <HAL_ADC_Start+0x17e>
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HAL_ADC_Start+0x194>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	2b00      	cmp	r3, #0
 800112e:	d130      	bne.n	8001192 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d129      	bne.n	8001192 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689a      	ldr	r2, [r3, #8]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	e020      	b.n	8001192 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a15      	ldr	r2, [pc, #84]	; (80011ac <HAL_ADC_Start+0x198>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d11b      	bne.n	8001192 <HAL_ADC_Start+0x17e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d114      	bne.n	8001192 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	e00b      	b.n	8001192 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f043 0210 	orr.w	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f043 0201 	orr.w	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	20000008 	.word	0x20000008
 80011a4:	431bde83 	.word	0x431bde83
 80011a8:	40012300 	.word	0x40012300
 80011ac:	40012000 	.word	0x40012000
 80011b0:	40012100 	.word	0x40012100
 80011b4:	40012200 	.word	0x40012200

080011b8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d4:	d113      	bne.n	80011fe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e4:	d10b      	bne.n	80011fe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f043 0220 	orr.w	r2, r3, #32
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e063      	b.n	80012c6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80011fe:	f7ff fe95 	bl	8000f2c <HAL_GetTick>
 8001202:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001204:	e021      	b.n	800124a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800120c:	d01d      	beq.n	800124a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_ADC_PollForConversion+0x6c>
 8001214:	f7ff fe8a 	bl	8000f2c <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d212      	bcs.n	800124a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b02      	cmp	r3, #2
 8001230:	d00b      	beq.n	800124a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f043 0204 	orr.w	r2, r3, #4
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e03d      	b.n	80012c6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	2b02      	cmp	r3, #2
 8001256:	d1d6      	bne.n	8001206 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f06f 0212 	mvn.w	r2, #18
 8001260:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d123      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11f      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800129c:	2b00      	cmp	r3, #0
 800129e:	d111      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f043 0201 	orr.w	r2, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x1c>
 8001300:	2302      	movs	r3, #2
 8001302:	e105      	b.n	8001510 <HAL_ADC_ConfigChannel+0x228>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2201      	movs	r2, #1
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b09      	cmp	r3, #9
 8001312:	d925      	bls.n	8001360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68d9      	ldr	r1, [r3, #12]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	3b1e      	subs	r3, #30
 800132a:	2207      	movs	r2, #7
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43da      	mvns	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	400a      	ands	r2, r1
 8001338:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68d9      	ldr	r1, [r3, #12]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	4603      	mov	r3, r0
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4403      	add	r3, r0
 8001352:	3b1e      	subs	r3, #30
 8001354:	409a      	lsls	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	e022      	b.n	80013a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6919      	ldr	r1, [r3, #16]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	2207      	movs	r2, #7
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	400a      	ands	r2, r1
 8001382:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6919      	ldr	r1, [r3, #16]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	4603      	mov	r3, r0
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4403      	add	r3, r0
 800139c:	409a      	lsls	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d824      	bhi.n	80013f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b05      	subs	r3, #5
 80013c0:	221f      	movs	r2, #31
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	400a      	ands	r2, r1
 80013ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	3b05      	subs	r3, #5
 80013ea:	fa00 f203 	lsl.w	r2, r0, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	635a      	str	r2, [r3, #52]	; 0x34
 80013f6:	e04c      	b.n	8001492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b0c      	cmp	r3, #12
 80013fe:	d824      	bhi.n	800144a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	3b23      	subs	r3, #35	; 0x23
 8001412:	221f      	movs	r2, #31
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43da      	mvns	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	400a      	ands	r2, r1
 8001420:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3b23      	subs	r3, #35	; 0x23
 800143c:	fa00 f203 	lsl.w	r2, r0, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	631a      	str	r2, [r3, #48]	; 0x30
 8001448:	e023      	b.n	8001492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b41      	subs	r3, #65	; 0x41
 800145c:	221f      	movs	r2, #31
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43da      	mvns	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	400a      	ands	r2, r1
 800146a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	b29b      	uxth	r3, r3
 8001478:	4618      	mov	r0, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	3b41      	subs	r3, #65	; 0x41
 8001486:	fa00 f203 	lsl.w	r2, r0, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	430a      	orrs	r2, r1
 8001490:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_ADC_ConfigChannel+0x234>)
 8001494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a21      	ldr	r2, [pc, #132]	; (8001520 <HAL_ADC_ConfigChannel+0x238>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d109      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x1cc>
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b12      	cmp	r3, #18
 80014a6:	d105      	bne.n	80014b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a19      	ldr	r2, [pc, #100]	; (8001520 <HAL_ADC_ConfigChannel+0x238>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d123      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x21e>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d003      	beq.n	80014ce <HAL_ADC_ConfigChannel+0x1e6>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b11      	cmp	r3, #17
 80014cc:	d11b      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d111      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_ADC_ConfigChannel+0x23c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_ADC_ConfigChannel+0x240>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9a      	lsrs	r2, r3, #18
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f8:	e002      	b.n	8001500 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f9      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40012300 	.word	0x40012300
 8001520:	40012000 	.word	0x40012000
 8001524:	20000008 	.word	0x20000008
 8001528:	431bde83 	.word	0x431bde83

0800152c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001534:	4b79      	ldr	r3, [pc, #484]	; (800171c <ADC_Init+0x1f0>)
 8001536:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	431a      	orrs	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001560:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	021a      	lsls	r2, r3, #8
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689a      	ldr	r2, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6899      	ldr	r1, [r3, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	4a58      	ldr	r2, [pc, #352]	; (8001720 <ADC_Init+0x1f4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d022      	beq.n	800160a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6899      	ldr	r1, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6899      	ldr	r1, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	e00f      	b.n	800162a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001628:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0202 	bic.w	r2, r2, #2
 8001638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6899      	ldr	r1, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7e1b      	ldrb	r3, [r3, #24]
 8001644:	005a      	lsls	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d01b      	beq.n	8001690 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001666:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001676:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	3b01      	subs	r3, #1
 8001684:	035a      	lsls	r2, r3, #13
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	e007      	b.n	80016a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800169e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	051a      	lsls	r2, r3, #20
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6899      	ldr	r1, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016e2:	025a      	lsls	r2, r3, #9
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6899      	ldr	r1, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	029a      	lsls	r2, r3, #10
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	609a      	str	r2, [r3, #8]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40012300 	.word	0x40012300
 8001720:	0f000001 	.word	0x0f000001

08001724 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e0ed      	b.n	8001912 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff f9aa 	bl	8000a9c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0201 	orr.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001758:	f7ff fbe8 	bl	8000f2c <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800175e:	e012      	b.n	8001786 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001760:	f7ff fbe4 	bl	8000f2c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b0a      	cmp	r3, #10
 800176c:	d90b      	bls.n	8001786 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2205      	movs	r2, #5
 800177e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0c5      	b.n	8001912 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0e5      	beq.n	8001760 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f022 0202 	bic.w	r2, r2, #2
 80017a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017a4:	f7ff fbc2 	bl	8000f2c <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017aa:	e012      	b.n	80017d2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017ac:	f7ff fbbe 	bl	8000f2c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b0a      	cmp	r3, #10
 80017b8:	d90b      	bls.n	80017d2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2205      	movs	r2, #5
 80017ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e09f      	b.n	8001912 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e5      	bne.n	80017ac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7e1b      	ldrb	r3, [r3, #24]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d108      	bne.n	80017fa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e007      	b.n	800180a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001808:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	7e5b      	ldrb	r3, [r3, #25]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d108      	bne.n	8001824 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	e007      	b.n	8001834 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001832:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	7e9b      	ldrb	r3, [r3, #26]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d108      	bne.n	800184e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0220 	orr.w	r2, r2, #32
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	e007      	b.n	800185e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 0220 	bic.w	r2, r2, #32
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7edb      	ldrb	r3, [r3, #27]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d108      	bne.n	8001878 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0210 	bic.w	r2, r2, #16
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	e007      	b.n	8001888 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0210 	orr.w	r2, r2, #16
 8001886:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7f1b      	ldrb	r3, [r3, #28]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d108      	bne.n	80018a2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0208 	orr.w	r2, r2, #8
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	e007      	b.n	80018b2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0208 	bic.w	r2, r2, #8
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7f5b      	ldrb	r3, [r3, #29]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d108      	bne.n	80018cc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0204 	orr.w	r2, r2, #4
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	e007      	b.n	80018dc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0204 	bic.w	r2, r2, #4
 80018da:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	ea42 0103 	orr.w	r1, r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	1e5a      	subs	r2, r3, #1
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001932:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001934:	7cfb      	ldrb	r3, [r7, #19]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d003      	beq.n	8001942 <HAL_CAN_ConfigFilter+0x26>
 800193a:	7cfb      	ldrb	r3, [r7, #19]
 800193c:	2b02      	cmp	r3, #2
 800193e:	f040 80be 	bne.w	8001abe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001942:	4b65      	ldr	r3, [pc, #404]	; (8001ad8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001944:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800194c:	f043 0201 	orr.w	r2, r3, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800195c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	431a      	orrs	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	2201      	movs	r2, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	401a      	ands	r2, r3
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	69db      	ldr	r3, [r3, #28]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d123      	bne.n	80019ec <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019c6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	3248      	adds	r2, #72	; 0x48
 80019cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019e0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019e2:	6979      	ldr	r1, [r7, #20]
 80019e4:	3348      	adds	r3, #72	; 0x48
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	69db      	ldr	r3, [r3, #28]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d122      	bne.n	8001a3a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3248      	adds	r2, #72	; 0x48
 8001a1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a30:	6979      	ldr	r1, [r7, #20]
 8001a32:	3348      	adds	r3, #72	; 0x48
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	440b      	add	r3, r1
 8001a38:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d109      	bne.n	8001a56 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001a54:	e007      	b.n	8001a66 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001a80:	e007      	b.n	8001a92 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d107      	bne.n	8001aaa <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ab0:	f023 0201 	bic.w	r2, r3, #1
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e006      	b.n	8001acc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
  }
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40006400 	.word	0x40006400

08001adc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d12e      	bne.n	8001b4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b08:	f7ff fa10 	bl	8000f2c <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b0e:	e012      	b.n	8001b36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b10:	f7ff fa0c 	bl	8000f2c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b0a      	cmp	r3, #10
 8001b1c:	d90b      	bls.n	8001b36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e012      	b.n	8001b5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1e5      	bne.n	8001b10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e006      	b.n	8001b5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
  }
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b78:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b82:	7ffb      	ldrb	r3, [r7, #31]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d003      	beq.n	8001b90 <HAL_CAN_AddTxMessage+0x2c>
 8001b88:	7ffb      	ldrb	r3, [r7, #31]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	f040 80b8 	bne.w	8001d00 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10a      	bne.n	8001bb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d105      	bne.n	8001bb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 80a0 	beq.w	8001cf0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	0e1b      	lsrs	r3, r3, #24
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d907      	bls.n	8001bd0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e09e      	b.n	8001d0e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10d      	bne.n	8001bfe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	6809      	ldr	r1, [r1, #0]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3318      	adds	r3, #24
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	440b      	add	r3, r1
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	e00f      	b.n	8001c1e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c08:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c0e:	68f9      	ldr	r1, [r7, #12]
 8001c10:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c12:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	3318      	adds	r3, #24
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	440b      	add	r3, r1
 8001c1c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	691a      	ldr	r2, [r3, #16]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3318      	adds	r3, #24
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	440b      	add	r3, r1
 8001c2e:	3304      	adds	r3, #4
 8001c30:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	7d1b      	ldrb	r3, [r3, #20]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d111      	bne.n	8001c5e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3318      	adds	r3, #24
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	4413      	add	r3, r2
 8001c46:	3304      	adds	r3, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	6811      	ldr	r1, [r2, #0]
 8001c4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3318      	adds	r3, #24
 8001c56:	011b      	lsls	r3, r3, #4
 8001c58:	440b      	add	r3, r1
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3307      	adds	r3, #7
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	061a      	lsls	r2, r3, #24
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3306      	adds	r3, #6
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3305      	adds	r3, #5
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	3204      	adds	r2, #4
 8001c7e:	7812      	ldrb	r2, [r2, #0]
 8001c80:	4610      	mov	r0, r2
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	6811      	ldr	r1, [r2, #0]
 8001c86:	ea43 0200 	orr.w	r2, r3, r0
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	440b      	add	r3, r1
 8001c90:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001c94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3303      	adds	r3, #3
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	061a      	lsls	r2, r3, #24
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	041b      	lsls	r3, r3, #16
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3301      	adds	r3, #1
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	6811      	ldr	r1, [r2, #0]
 8001cbc:	ea43 0200 	orr.w	r2, r3, r0
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	440b      	add	r3, r1
 8001cc6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001cca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3318      	adds	r3, #24
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6811      	ldr	r1, [r2, #0]
 8001cde:	f043 0201 	orr.w	r2, r3, #1
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3318      	adds	r3, #24
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	440b      	add	r3, r1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e00e      	b.n	8001d0e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e006      	b.n	8001d0e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b087      	sub	sp, #28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d003      	beq.n	8001d3e <HAL_CAN_GetRxMessage+0x24>
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	f040 80f3 	bne.w	8001f24 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10e      	bne.n	8001d62 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d116      	bne.n	8001d80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e0e7      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d107      	bne.n	8001d80 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0d8      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	331b      	adds	r3, #27
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0204 	and.w	r2, r3, #4
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	331b      	adds	r3, #27
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	4413      	add	r3, r2
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0d5b      	lsrs	r3, r3, #21
 8001dae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e00b      	b.n	8001dd0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	331b      	adds	r3, #27
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	4413      	add	r3, r2
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	08db      	lsrs	r3, r3, #3
 8001dc8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	331b      	adds	r3, #27
 8001dd8:	011b      	lsls	r3, r3, #4
 8001dda:	4413      	add	r3, r2
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0202 	and.w	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	331b      	adds	r3, #27
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	4413      	add	r3, r2
 8001df2:	3304      	adds	r3, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 020f 	and.w	r2, r3, #15
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	331b      	adds	r3, #27
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	4413      	add	r3, r2
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	331b      	adds	r3, #27
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	3304      	adds	r3, #4
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	011b      	lsls	r3, r3, #4
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0a1a      	lsrs	r2, r3, #8
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	0c1a      	lsrs	r2, r3, #16
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	3302      	adds	r3, #2
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0e1a      	lsrs	r2, r3, #24
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0a1a      	lsrs	r2, r3, #8
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	3305      	adds	r3, #5
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	011b      	lsls	r3, r3, #4
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	0c1a      	lsrs	r2, r3, #16
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3306      	adds	r3, #6
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	0e1a      	lsrs	r2, r3, #24
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	3307      	adds	r3, #7
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d108      	bne.n	8001f10 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0220 	orr.w	r2, r2, #32
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0220 	orr.w	r2, r2, #32
 8001f1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	e006      	b.n	8001f32 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
  }
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b085      	sub	sp, #20
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f4e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d002      	beq.n	8001f5c <HAL_CAN_ActivateNotification+0x1e>
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d109      	bne.n	8001f70 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6959      	ldr	r1, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e006      	b.n	8001f7e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b08a      	sub	sp, #40	; 0x28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d07c      	beq.n	80020ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d023      	beq.n	8002022 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f983 	bl	80022f8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001ff2:	e016      	b.n	8002022 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	e00c      	b.n	8002022 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d004      	beq.n	800201c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
 800201a:	e002      	b.n	8002022 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f989 	bl	8002334 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d024      	beq.n	8002076 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002034:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f963 	bl	800230c <HAL_CAN_TxMailbox1CompleteCallback>
 8002046:	e016      	b.n	8002076 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204e:	2b00      	cmp	r3, #0
 8002050:	d004      	beq.n	800205c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	e00c      	b.n	8002076 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
 800206e:	e002      	b.n	8002076 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f969 	bl	8002348 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d024      	beq.n	80020ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002088:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f943 	bl	8002320 <HAL_CAN_TxMailbox2CompleteCallback>
 800209a:	e016      	b.n	80020ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
 80020ae:	e00c      	b.n	80020ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
 80020c2:	e002      	b.n	80020ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f949 	bl	800235c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00c      	beq.n	80020ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d007      	beq.n	80020ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2210      	movs	r2, #16
 80020ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00b      	beq.n	8002110 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2208      	movs	r2, #8
 8002108:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f93a 	bl	8002384 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f921 	bl	8002370 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00c      	beq.n	8002152 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002148:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2210      	movs	r2, #16
 8002150:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00b      	beq.n	8002174 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2208      	movs	r2, #8
 800216c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f91c 	bl	80023ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f903 	bl	8002398 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00b      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2210      	movs	r2, #16
 80021ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f906 	bl	80023c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2208      	movs	r2, #8
 80021ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8ff 	bl	80023d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d07b      	beq.n	80022d8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d072      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d008      	beq.n	8002206 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002244:	2b00      	cmp	r3, #0
 8002246:	d043      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800224e:	2b00      	cmp	r3, #0
 8002250:	d03e      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002258:	2b60      	cmp	r3, #96	; 0x60
 800225a:	d02b      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x32a>
 800225c:	2b60      	cmp	r3, #96	; 0x60
 800225e:	d82e      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002260:	2b50      	cmp	r3, #80	; 0x50
 8002262:	d022      	beq.n	80022aa <HAL_CAN_IRQHandler+0x320>
 8002264:	2b50      	cmp	r3, #80	; 0x50
 8002266:	d82a      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d019      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x316>
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d826      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002270:	2b30      	cmp	r3, #48	; 0x30
 8002272:	d010      	beq.n	8002296 <HAL_CAN_IRQHandler+0x30c>
 8002274:	2b30      	cmp	r3, #48	; 0x30
 8002276:	d822      	bhi.n	80022be <HAL_CAN_IRQHandler+0x334>
 8002278:	2b10      	cmp	r3, #16
 800227a:	d002      	beq.n	8002282 <HAL_CAN_IRQHandler+0x2f8>
 800227c:	2b20      	cmp	r3, #32
 800227e:	d005      	beq.n	800228c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002280:	e01d      	b.n	80022be <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800228a:	e019      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	f043 0310 	orr.w	r3, r3, #16
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002294:	e014      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	f043 0320 	orr.w	r3, r3, #32
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800229e:	e00f      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022a8:	e00a      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022b2:	e005      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80022bc:	e000      	b.n	80022c0 <HAL_CAN_IRQHandler+0x336>
            break;
 80022be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2204      	movs	r2, #4
 80022d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f87c 	bl	80023e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022f0:	bf00      	nop
 80022f2:	3728      	adds	r7, #40	; 0x28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002418:	4013      	ands	r3, r2
 800241a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242e:	4a04      	ldr	r2, [pc, #16]	; (8002440 <__NVIC_SetPriorityGrouping+0x44>)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60d3      	str	r3, [r2, #12]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <__NVIC_GetPriorityGrouping+0x18>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	f003 0307 	and.w	r3, r3, #7
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	2b00      	cmp	r3, #0
 8002470:	db0b      	blt.n	800248a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <__NVIC_EnableIRQ+0x38>)
 800247a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	2001      	movs	r0, #1
 8002482:	fa00 f202 	lsl.w	r2, r0, r2
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	; (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	; (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	; 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	; 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	; (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff29 	bl	80023fc <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff3e 	bl	8002444 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff8e 	bl	80024f0 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff ff31 	bl	8002460 <__NVIC_EnableIRQ>
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7ff ffa2 	bl	8002558 <SysTick_Config>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	2300      	movs	r3, #0
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	e16b      	b.n	8002914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800263c:	2201      	movs	r2, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	4013      	ands	r3, r2
 800264e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	429a      	cmp	r2, r3
 8002656:	f040 815a 	bne.w	800290e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d005      	beq.n	8002672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800266e:	2b02      	cmp	r3, #2
 8002670:	d130      	bne.n	80026d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	68da      	ldr	r2, [r3, #12]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a8:	2201      	movs	r2, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0201 	and.w	r2, r3, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d017      	beq.n	8002710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d123      	bne.n	8002764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	08da      	lsrs	r2, r3, #3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	4313      	orrs	r3, r2
 8002754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	08da      	lsrs	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3208      	adds	r2, #8
 800275e:	69b9      	ldr	r1, [r7, #24]
 8002760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 0203 	and.w	r2, r3, #3
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 80b4 	beq.w	800290e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b60      	ldr	r3, [pc, #384]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	4a5f      	ldr	r2, [pc, #380]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b4:	6453      	str	r3, [r2, #68]	; 0x44
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_GPIO_Init+0x30c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027c2:	4a5b      	ldr	r2, [pc, #364]	; (8002930 <HAL_GPIO_Init+0x310>)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	089b      	lsrs	r3, r3, #2
 80027c8:	3302      	adds	r3, #2
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a52      	ldr	r2, [pc, #328]	; (8002934 <HAL_GPIO_Init+0x314>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02b      	beq.n	8002846 <HAL_GPIO_Init+0x226>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a51      	ldr	r2, [pc, #324]	; (8002938 <HAL_GPIO_Init+0x318>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d025      	beq.n	8002842 <HAL_GPIO_Init+0x222>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a50      	ldr	r2, [pc, #320]	; (800293c <HAL_GPIO_Init+0x31c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01f      	beq.n	800283e <HAL_GPIO_Init+0x21e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4f      	ldr	r2, [pc, #316]	; (8002940 <HAL_GPIO_Init+0x320>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x21a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4e      	ldr	r2, [pc, #312]	; (8002944 <HAL_GPIO_Init+0x324>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x216>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4d      	ldr	r2, [pc, #308]	; (8002948 <HAL_GPIO_Init+0x328>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x212>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4c      	ldr	r2, [pc, #304]	; (800294c <HAL_GPIO_Init+0x32c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x20e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4b      	ldr	r2, [pc, #300]	; (8002950 <HAL_GPIO_Init+0x330>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x20a>
 8002826:	2307      	movs	r3, #7
 8002828:	e00e      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282a:	2308      	movs	r3, #8
 800282c:	e00c      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800282e:	2306      	movs	r3, #6
 8002830:	e00a      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002832:	2305      	movs	r3, #5
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002836:	2304      	movs	r3, #4
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x228>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x228>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	; (8002930 <HAL_GPIO_Init+0x310>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002866:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288a:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_GPIO_Init+0x334>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002890:	4b30      	ldr	r3, [pc, #192]	; (8002954 <HAL_GPIO_Init+0x334>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028b4:	4a27      	ldr	r2, [pc, #156]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ba:	4b26      	ldr	r3, [pc, #152]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028de:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <HAL_GPIO_Init+0x334>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002908:	4a12      	ldr	r2, [pc, #72]	; (8002954 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f ae90 	bls.w	800263c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	; 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40021400 	.word	0x40021400
 800294c:	40021800 	.word	0x40021800
 8002950:	40021c00 	.word	0x40021c00
 8002954:	40013c00 	.word	0x40013c00

08002958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	807b      	strh	r3, [r7, #2]
 8002964:	4613      	mov	r3, r2
 8002966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002968:	787b      	ldrb	r3, [r7, #1]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002974:	e003      	b.n	800297e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002976:	887b      	ldrh	r3, [r7, #2]
 8002978:	041a      	lsls	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	619a      	str	r2, [r3, #24]
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	4013      	ands	r3, r2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f806 	bl	80029bc <HAL_GPIO_EXTI_Callback>
  }
}
 80029b0:	bf00      	nop
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40013c00 	.word	0x40013c00

080029bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d4:	b08f      	sub	sp, #60	; 0x3c
 80029d6:	af0a      	add	r7, sp, #40	; 0x28
 80029d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e10f      	b.n	8002c04 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d106      	bne.n	8002a04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f005 fad8 	bl	8007fb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2203      	movs	r2, #3
 8002a08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 f9cb 	bl	8004dbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	687e      	ldr	r6, [r7, #4]
 8002a30:	466d      	mov	r5, sp
 8002a32:	f106 0410 	add.w	r4, r6, #16
 8002a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a46:	1d33      	adds	r3, r6, #4
 8002a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a4a:	6838      	ldr	r0, [r7, #0]
 8002a4c:	f002 f8a2 	bl	8004b94 <USB_CoreInit>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0d0      	b.n	8002c04 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f002 f9b9 	bl	8004de0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	e04a      	b.n	8002b0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	333d      	adds	r3, #61	; 0x3d
 8002a84:	2201      	movs	r2, #1
 8002a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	333c      	adds	r3, #60	; 0x3c
 8002a98:	7bfa      	ldrb	r2, [r7, #15]
 8002a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	b298      	uxth	r0, r3
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3342      	adds	r3, #66	; 0x42
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	333f      	adds	r3, #63	; 0x3f
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ac8:	7bfa      	ldrb	r2, [r7, #15]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3344      	adds	r3, #68	; 0x44
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	1a9b      	subs	r3, r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3348      	adds	r3, #72	; 0x48
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3350      	adds	r3, #80	; 0x50
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	3301      	adds	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d3af      	bcc.n	8002a74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b14:	2300      	movs	r3, #0
 8002b16:	73fb      	strb	r3, [r7, #15]
 8002b18:	e044      	b.n	8002ba4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b1a:	7bfa      	ldrb	r2, [r7, #15]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b42:	7bfa      	ldrb	r2, [r7, #15]
 8002b44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d3b5      	bcc.n	8002b1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	687e      	ldr	r6, [r7, #4]
 8002bb6:	466d      	mov	r5, sp
 8002bb8:	f106 0410 	add.w	r4, r6, #16
 8002bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bcc:	1d33      	adds	r3, r6, #4
 8002bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bd0:	6838      	ldr	r0, [r7, #0]
 8002bd2:	f002 f951 	bl	8004e78 <USB_DevInit>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d005      	beq.n	8002be8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e00d      	b.n	8002c04 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 f9cd 	bl	8005f9c <USB_DevDisconnect>

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_PCD_Start+0x1c>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e020      	b.n	8002c6a <HAL_PCD_Start+0x5e>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d109      	bne.n	8002c4c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d005      	beq.n	8002c4c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 f8a3 	bl	8004d9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f003 f97d 	bl	8005f5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c72:	b590      	push	{r4, r7, lr}
 8002c74:	b08d      	sub	sp, #52	; 0x34
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fa3b 	bl	8006104 <USB_GetMode>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f040 839d 	bne.w	80033d0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 f99f 	bl	8005fde <USB_ReadInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8393 	beq.w	80033ce <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f003 f996 	bl	8005fde <USB_ReadInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d107      	bne.n	8002ccc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f002 0202 	and.w	r2, r2, #2
 8002cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 f984 	bl	8005fde <USB_ReadInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b10      	cmp	r3, #16
 8002cde:	d161      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0210 	bic.w	r2, r2, #16
 8002cee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 020f 	and.w	r2, r3, #15
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	0c5b      	lsrs	r3, r3, #17
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d124      	bne.n	8002d66 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d035      	beq.n	8002d94 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	6a38      	ldr	r0, [r7, #32]
 8002d3c:	f002 ffbb 	bl	8005cb6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4c:	441a      	add	r2, r3
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d5e:	441a      	add	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	619a      	str	r2, [r3, #24]
 8002d64:	e016      	b.n	8002d94 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	0c5b      	lsrs	r3, r3, #17
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d110      	bne.n	8002d94 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d78:	2208      	movs	r2, #8
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6a38      	ldr	r0, [r7, #32]
 8002d7e:	f002 ff9a 	bl	8005cb6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d8e:	441a      	add	r2, r3
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0210 	orr.w	r2, r2, #16
 8002da2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 f918 	bl	8005fde <USB_ReadInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002db8:	d16e      	bne.n	8002e98 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 f91e 	bl	8006004 <USB_ReadDevAllOutEpInterrupt>
 8002dc8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002dca:	e062      	b.n	8002e92 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d057      	beq.n	8002e86 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 f943 	bl	800606c <USB_ReadDevOutEPInterrupt>
 8002de6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2301      	movs	r3, #1
 8002e02:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fdb0 	bl	800396c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e22:	461a      	mov	r2, r3
 8002e24:	2308      	movs	r3, #8
 8002e26:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 feaa 	bl	8003b84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d008      	beq.n	8002e4c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e46:	461a      	mov	r2, r3
 8002e48:	2310      	movs	r3, #16
 8002e4a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e62:	461a      	mov	r2, r3
 8002e64:	2320      	movs	r3, #32
 8002e66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	015a      	lsls	r2, r3, #5
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	4413      	add	r3, r2
 8002e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7e:	461a      	mov	r2, r3
 8002e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e84:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	3301      	adds	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d199      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 f89e 	bl	8005fde <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002eac:	f040 80c0 	bne.w	8003030 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 f8bf 	bl	8006038 <USB_ReadDevAllInEpInterrupt>
 8002eba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002ec0:	e0b2      	b.n	8003028 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80a7 	beq.w	800301c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f003 f8e5 	bl	80060a8 <USB_ReadDevInEPInterrupt>
 8002ede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d057      	beq.n	8002f9a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	69f9      	ldr	r1, [r7, #28]
 8002f06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d132      	bne.n	8002f8e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	3348      	adds	r3, #72	; 0x48
 8002f38:	6819      	ldr	r1, [r3, #0]
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4403      	add	r3, r0
 8002f48:	3344      	adds	r3, #68	; 0x44
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4419      	add	r1, r3
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4403      	add	r3, r0
 8002f5c:	3348      	adds	r3, #72	; 0x48
 8002f5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d113      	bne.n	8002f8e <HAL_PCD_IRQHandler+0x31c>
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3350      	adds	r3, #80	; 0x50
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d108      	bne.n	8002f8e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f86:	461a      	mov	r2, r3
 8002f88:	2101      	movs	r1, #1
 8002f8a:	f003 f8ed 	bl	8006168 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f005 f88e 	bl	80080b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d008      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d008      	beq.n	8002fd2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2310      	movs	r3, #16
 8002fd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe8:	461a      	mov	r2, r3
 8002fea:	2340      	movs	r3, #64	; 0x40
 8002fec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003004:	461a      	mov	r2, r3
 8003006:	2302      	movs	r3, #2
 8003008:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003014:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fc1b 	bl	8003852 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800301c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301e:	3301      	adds	r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	2b00      	cmp	r3, #0
 800302c:	f47f af49 	bne.w	8002ec2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f002 ffd2 	bl	8005fde <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003044:	d122      	bne.n	800308c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003060:	2b01      	cmp	r3, #1
 8003062:	d108      	bne.n	8003076 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800306c:	2100      	movs	r1, #0
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fe26 	bl	8003cc0 <HAL_PCDEx_LPM_Callback>
 8003074:	e002      	b.n	800307c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f005 f894 	bl	80081a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800308a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f002 ffa4 	bl	8005fde <USB_ReadInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030a0:	d112      	bne.n	80030c8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f005 f850 	bl	8008158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f002 ff86 	bl	8005fde <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030dc:	f040 80c7 	bne.w	800326e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2110      	movs	r1, #16
 80030fa:	4618      	mov	r0, r3
 80030fc:	f002 f820 	bl	8005140 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003104:	e056      	b.n	80031b4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003112:	461a      	mov	r2, r3
 8003114:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003118:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800312a:	0151      	lsls	r1, r2, #5
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	440a      	add	r2, r1
 8003130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003134:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003138:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314a:	0151      	lsls	r1, r2, #5
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	440a      	add	r2, r1
 8003150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003154:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003158:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800315a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003166:	461a      	mov	r2, r3
 8003168:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800316c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800317e:	0151      	lsls	r1, r2, #5
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	440a      	add	r2, r1
 8003184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003188:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800318c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319e:	0151      	lsls	r1, r2, #5
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	440a      	add	r2, r1
 80031a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	3301      	adds	r3, #1
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d3a3      	bcc.n	8003106 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031cc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d016      	beq.n	8003208 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ea:	f043 030b 	orr.w	r3, r3, #11
 80031ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003200:	f043 030b 	orr.w	r3, r3, #11
 8003204:	6453      	str	r3, [r2, #68]	; 0x44
 8003206:	e015      	b.n	8003234 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	69fa      	ldr	r2, [r7, #28]
 8003212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003216:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800321a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800321e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800322e:	f043 030b 	orr.w	r3, r3, #11
 8003232:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003242:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003246:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003258:	461a      	mov	r2, r3
 800325a:	f002 ff85 	bl	8006168 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800326c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f002 feb3 	bl	8005fde <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800327e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003282:	d124      	bne.n	80032ce <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f002 ff49 	bl	8006120 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f001 ffb1 	bl	80051fa <USB_GetDevSpeed>
 8003298:	4603      	mov	r3, r0
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681c      	ldr	r4, [r3, #0]
 80032a4:	f001 f92c 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 80032a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	4620      	mov	r0, r4
 80032b4:	f001 fcd0 	bl	8004c58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f004 ff24 	bl	8008106 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fe83 	bl	8005fde <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d10a      	bne.n	80032f8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f004 ff01 	bl	80080ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f002 0208 	and.w	r2, r2, #8
 80032f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f002 fe6e 	bl	8005fde <USB_ReadInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330c:	d10f      	bne.n	800332e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	b2db      	uxtb	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f004 ff63 	bl	80081e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800332c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f002 fe53 	bl	8005fde <USB_ReadInterrupts>
 8003338:	4603      	mov	r3, r0
 800333a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003342:	d10f      	bne.n	8003364 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f004 ff36 	bl	80081c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 fe38 	bl	8005fde <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003378:	d10a      	bne.n	8003390 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f004 ff44 	bl	8008208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800338e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f002 fe22 	bl	8005fde <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d115      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f004 ff34 	bl	8008224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	e000      	b.n	80033d0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80033ce:	bf00      	nop
    }
  }
}
 80033d0:	3734      	adds	r7, #52	; 0x34
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}

080033d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_PCD_SetAddress+0x1a>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e013      	b.n	8003418 <HAL_PCD_SetAddress+0x42>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f002 fd80 	bl	8005f0e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	4608      	mov	r0, r1
 800342a:	4611      	mov	r1, r2
 800342c:	461a      	mov	r2, r3
 800342e:	4603      	mov	r3, r0
 8003430:	70fb      	strb	r3, [r7, #3]
 8003432:	460b      	mov	r3, r1
 8003434:	803b      	strh	r3, [r7, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800343e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003442:	2b00      	cmp	r3, #0
 8003444:	da0f      	bge.n	8003466 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	3338      	adds	r3, #56	; 0x38
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	3304      	adds	r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	705a      	strb	r2, [r3, #1]
 8003464:	e00f      	b.n	8003486 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	1a9b      	subs	r3, r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	3304      	adds	r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003492:	883a      	ldrh	r2, [r7, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	78ba      	ldrb	r2, [r7, #2]
 800349c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034b0:	78bb      	ldrb	r3, [r7, #2]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d102      	bne.n	80034bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_PCD_EP_Open+0xaa>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e00e      	b.n	80034e8 <HAL_PCD_EP_Open+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 feb3 	bl	8005244 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80034e6:	7afb      	ldrb	r3, [r7, #11]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da0f      	bge.n	8003524 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	3338      	adds	r3, #56	; 0x38
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3304      	adds	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	705a      	strb	r2, [r3, #1]
 8003522:	e00f      	b.n	8003544 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_PCD_EP_Close+0x6e>
 800355a:	2302      	movs	r3, #2
 800355c:	e00e      	b.n	800357c <HAL_PCD_EP_Close+0x8c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68f9      	ldr	r1, [r7, #12]
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fef1 	bl	8005354 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	460b      	mov	r3, r1
 8003592:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003594:	7afb      	ldrb	r3, [r7, #11]
 8003596:	f003 020f 	and.w	r2, r3, #15
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d102      	bne.n	80035e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	6979      	ldr	r1, [r7, #20]
 80035f8:	f002 f9cc 	bl	8005994 <USB_EP0StartXfer>
 80035fc:	e008      	b.n	8003610 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	6979      	ldr	r1, [r7, #20]
 800360c:	f001 ff7e 	bl	800550c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	460b      	mov	r3, r1
 8003624:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800363c:	681b      	ldr	r3, [r3, #0]
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
 8003656:	460b      	mov	r3, r1
 8003658:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f003 020f 	and.w	r2, r3, #15
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	3338      	adds	r3, #56	; 0x38
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4413      	add	r3, r2
 800366e:	3304      	adds	r3, #4
 8003670:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2200      	movs	r2, #0
 8003682:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2201      	movs	r2, #1
 8003688:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	b2da      	uxtb	r2, r3
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d102      	bne.n	80036a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036a4:	7afb      	ldrb	r3, [r7, #11]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	461a      	mov	r2, r3
 80036ba:	6979      	ldr	r1, [r7, #20]
 80036bc:	f002 f96a 	bl	8005994 <USB_EP0StartXfer>
 80036c0:	e008      	b.n	80036d4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	6979      	ldr	r1, [r7, #20]
 80036d0:	f001 ff1c 	bl	800550c <USB_EPStartXfer>
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	460b      	mov	r3, r1
 80036e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036ea:	78fb      	ldrb	r3, [r7, #3]
 80036ec:	f003 020f 	and.w	r2, r3, #15
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d901      	bls.n	80036fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e050      	b.n	800379e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	da0f      	bge.n	8003724 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003704:	78fb      	ldrb	r3, [r7, #3]
 8003706:	f003 020f 	and.w	r2, r3, #15
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	3338      	adds	r3, #56	; 0x38
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	705a      	strb	r2, [r3, #1]
 8003722:	e00d      	b.n	8003740 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	1a9b      	subs	r3, r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	3304      	adds	r3, #4
 8003738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003758:	2b01      	cmp	r3, #1
 800375a:	d101      	bne.n	8003760 <HAL_PCD_EP_SetStall+0x82>
 800375c:	2302      	movs	r3, #2
 800375e:	e01e      	b.n	800379e <HAL_PCD_EP_SetStall+0xc0>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	4618      	mov	r0, r3
 8003770:	f002 faf9 	bl	8005d66 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	b2d9      	uxtb	r1, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800378e:	461a      	mov	r2, r3
 8003790:	f002 fcea 	bl	8006168 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037b2:	78fb      	ldrb	r3, [r7, #3]
 80037b4:	f003 020f 	and.w	r2, r3, #15
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d901      	bls.n	80037c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e042      	b.n	800384a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	da0f      	bge.n	80037ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	3338      	adds	r3, #56	; 0x38
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4413      	add	r3, r2
 80037e0:	3304      	adds	r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	705a      	strb	r2, [r3, #1]
 80037ea:	e00f      	b.n	800380c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 020f 	and.w	r2, r3, #15
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	3304      	adds	r3, #4
 8003804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003812:	78fb      	ldrb	r3, [r7, #3]
 8003814:	f003 030f 	and.w	r3, r3, #15
 8003818:	b2da      	uxtb	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_PCD_EP_ClrStall+0x86>
 8003828:	2302      	movs	r3, #2
 800382a:	e00e      	b.n	800384a <HAL_PCD_EP_ClrStall+0xa4>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68f9      	ldr	r1, [r7, #12]
 800383a:	4618      	mov	r0, r3
 800383c:	f002 fb01 	bl	8005e42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b08a      	sub	sp, #40	; 0x28
 8003856:	af02      	add	r7, sp, #8
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3338      	adds	r3, #56	; 0x38
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	429a      	cmp	r2, r3
 8003884:	d901      	bls.n	800388a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e06c      	b.n	8003964 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	429a      	cmp	r2, r3
 800389e:	d902      	bls.n	80038a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3303      	adds	r3, #3
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ae:	e02b      	b.n	8003908 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d902      	bls.n	80038cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	3303      	adds	r3, #3
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	68d9      	ldr	r1, [r3, #12]
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	4603      	mov	r3, r0
 80038ea:	6978      	ldr	r0, [r7, #20]
 80038ec:	f002 f9a5 	bl	8005c3a <USB_WritePacket>

    ep->xfer_buff  += len;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	441a      	add	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	699a      	ldr	r2, [r3, #24]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	441a      	add	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	b29b      	uxth	r3, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	429a      	cmp	r2, r3
 800391c:	d809      	bhi.n	8003932 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003926:	429a      	cmp	r2, r3
 8003928:	d203      	bcs.n	8003932 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1be      	bne.n	80038b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	429a      	cmp	r2, r3
 800393c:	d811      	bhi.n	8003962 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	2201      	movs	r2, #1
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	43db      	mvns	r3, r3
 8003958:	6939      	ldr	r1, [r7, #16]
 800395a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800395e:	4013      	ands	r3, r2
 8003960:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	333c      	adds	r3, #60	; 0x3c
 8003984:	3304      	adds	r3, #4
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	f040 80a0 	bne.w	8003ae4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d015      	beq.n	80039da <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a72      	ldr	r2, [pc, #456]	; (8003b7c <PCD_EP_OutXfrComplete_int+0x210>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	f240 80dd 	bls.w	8003b72 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80d7 	beq.w	8003b72 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	015a      	lsls	r2, r3, #5
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4413      	add	r3, r2
 80039cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d0:	461a      	mov	r2, r3
 80039d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d6:	6093      	str	r3, [r2, #8]
 80039d8:	e0cb      	b.n	8003b72 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	461a      	mov	r2, r3
 80039f2:	2320      	movs	r3, #32
 80039f4:	6093      	str	r3, [r2, #8]
 80039f6:	e0bc      	b.n	8003b72 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f040 80b7 	bne.w	8003b72 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a5d      	ldr	r2, [pc, #372]	; (8003b7c <PCD_EP_OutXfrComplete_int+0x210>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d90f      	bls.n	8003a2c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a22:	461a      	mov	r2, r3
 8003a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a28:	6093      	str	r3, [r2, #8]
 8003a2a:	e0a2      	b.n	8003b72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a3e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	0159      	lsls	r1, r3, #5
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	440b      	add	r3, r1
 8003a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003a52:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4403      	add	r3, r0
 8003a62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003a66:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4403      	add	r3, r0
 8003a8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4419      	add	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4403      	add	r3, r0
 8003aa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003aa4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d114      	bne.n	8003ad6 <PCD_EP_OutXfrComplete_int+0x16a>
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ace:	461a      	mov	r2, r3
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	f002 fb49 	bl	8006168 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	4619      	mov	r1, r3
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f004 facf 	bl	8008080 <HAL_PCD_DataOutStageCallback>
 8003ae2:	e046      	b.n	8003b72 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a26      	ldr	r2, [pc, #152]	; (8003b80 <PCD_EP_OutXfrComplete_int+0x214>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d124      	bne.n	8003b36 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	461a      	mov	r2, r3
 8003b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b08:	6093      	str	r3, [r2, #8]
 8003b0a:	e032      	b.n	8003b72 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	461a      	mov	r2, r3
 8003b24:	2320      	movs	r3, #32
 8003b26:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f004 faa6 	bl	8008080 <HAL_PCD_DataOutStageCallback>
 8003b34:	e01d      	b.n	8003b72 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d114      	bne.n	8003b66 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d108      	bne.n	8003b66 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2100      	movs	r1, #0
 8003b62:	f002 fb01 	bl	8006168 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f004 fa87 	bl	8008080 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3718      	adds	r7, #24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	4f54300a 	.word	0x4f54300a
 8003b80:	4f54310a 	.word	0x4f54310a

08003b84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	333c      	adds	r3, #60	; 0x3c
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a15      	ldr	r2, [pc, #84]	; (8003c0c <PCD_EP_OutSetupPacket_int+0x88>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d90e      	bls.n	8003bd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f004 fa3f 	bl	800805c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <PCD_EP_OutSetupPacket_int+0x88>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d90c      	bls.n	8003c00 <PCD_EP_OutSetupPacket_int+0x7c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d108      	bne.n	8003c00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	f002 fab4 	bl	8006168 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	4f54300a 	.word	0x4f54300a

08003c10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d107      	bne.n	8003c3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c2e:	883b      	ldrh	r3, [r7, #0]
 8003c30:	0419      	lsls	r1, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c3c:	e028      	b.n	8003c90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	4413      	add	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e00d      	b.n	8003c6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	3340      	adds	r3, #64	; 0x40
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	4413      	add	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	7bfa      	ldrb	r2, [r7, #15]
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d3ec      	bcc.n	8003c52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c78:	883b      	ldrh	r3, [r7, #0]
 8003c7a:	0418      	lsls	r0, r3, #16
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	4302      	orrs	r2, r0
 8003c88:	3340      	adds	r3, #64	; 0x40
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	887a      	ldrh	r2, [r7, #2]
 8003cb0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e264      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d075      	beq.n	8003de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf6:	4ba3      	ldr	r3, [pc, #652]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d00c      	beq.n	8003d1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d02:	4ba0      	ldr	r3, [pc, #640]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d112      	bne.n	8003d34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0e:	4b9d      	ldr	r3, [pc, #628]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1a:	d10b      	bne.n	8003d34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	4b99      	ldr	r3, [pc, #612]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d05b      	beq.n	8003de0 <HAL_RCC_OscConfig+0x108>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d157      	bne.n	8003de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e23f      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d106      	bne.n	8003d4c <HAL_RCC_OscConfig+0x74>
 8003d3e:	4b91      	ldr	r3, [pc, #580]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a90      	ldr	r2, [pc, #576]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e01d      	b.n	8003d88 <HAL_RCC_OscConfig+0xb0>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x98>
 8003d56:	4b8b      	ldr	r3, [pc, #556]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a8a      	ldr	r2, [pc, #552]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a87      	ldr	r2, [pc, #540]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e00b      	b.n	8003d88 <HAL_RCC_OscConfig+0xb0>
 8003d70:	4b84      	ldr	r3, [pc, #528]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a83      	ldr	r2, [pc, #524]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	4b81      	ldr	r3, [pc, #516]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a80      	ldr	r2, [pc, #512]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fd f8cc 	bl	8000f2c <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fd f8c8 	bl	8000f2c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e204      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0xc0>
 8003db6:	e014      	b.n	8003de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7fd f8b8 	bl	8000f2c <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc0:	f7fd f8b4 	bl	8000f2c <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e1f0      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd2:	4b6c      	ldr	r3, [pc, #432]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f0      	bne.n	8003dc0 <HAL_RCC_OscConfig+0xe8>
 8003dde:	e000      	b.n	8003de2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d063      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dee:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00b      	beq.n	8003e12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfa:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d11c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e06:	4b5f      	ldr	r3, [pc, #380]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d116      	bne.n	8003e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e12:	4b5c      	ldr	r3, [pc, #368]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d005      	beq.n	8003e2a <HAL_RCC_OscConfig+0x152>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d001      	beq.n	8003e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e1c4      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2a:	4b56      	ldr	r3, [pc, #344]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4952      	ldr	r1, [pc, #328]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3e:	e03a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e48:	4b4f      	ldr	r3, [pc, #316]	; (8003f88 <HAL_RCC_OscConfig+0x2b0>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fd f86d 	bl	8000f2c <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	e008      	b.n	8003e68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e56:	f7fd f869 	bl	8000f2c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e1a5      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e68:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d0f0      	beq.n	8003e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e74:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4940      	ldr	r1, [pc, #256]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	600b      	str	r3, [r1, #0]
 8003e88:	e015      	b.n	8003eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_RCC_OscConfig+0x2b0>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fd f84c 	bl	8000f2c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e98:	f7fd f848 	bl	8000f2c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e184      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eaa:	4b36      	ldr	r3, [pc, #216]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d030      	beq.n	8003f24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d016      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eca:	4b30      	ldr	r3, [pc, #192]	; (8003f8c <HAL_RCC_OscConfig+0x2b4>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd f82c 	bl	8000f2c <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ed8:	f7fd f828 	bl	8000f2c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e164      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eea:	4b26      	ldr	r3, [pc, #152]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x200>
 8003ef6:	e015      	b.n	8003f24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef8:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x2b4>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efe:	f7fd f815 	bl	8000f2c <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f06:	f7fd f811 	bl	8000f2c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e14d      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	4b1a      	ldr	r3, [pc, #104]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a0 	beq.w	8004072 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f36:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10f      	bne.n	8003f62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f50:	6413      	str	r3, [r2, #64]	; 0x40
 8003f52:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <HAL_RCC_OscConfig+0x2ac>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f62:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_OscConfig+0x2b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d121      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6e:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <HAL_RCC_OscConfig+0x2b8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <HAL_RCC_OscConfig+0x2b8>)
 8003f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f7a:	f7fc ffd7 	bl	8000f2c <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f80:	e011      	b.n	8003fa6 <HAL_RCC_OscConfig+0x2ce>
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	42470000 	.word	0x42470000
 8003f8c:	42470e80 	.word	0x42470e80
 8003f90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f94:	f7fc ffca 	bl	8000f2c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e106      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa6:	4b85      	ldr	r3, [pc, #532]	; (80041bc <HAL_RCC_OscConfig+0x4e4>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x2f0>
 8003fba:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a80      	ldr	r2, [pc, #512]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc6:	e01c      	b.n	8004002 <HAL_RCC_OscConfig+0x32a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d10c      	bne.n	8003fea <HAL_RCC_OscConfig+0x312>
 8003fd0:	4b7b      	ldr	r3, [pc, #492]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	4a7a      	ldr	r2, [pc, #488]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003fd6:	f043 0304 	orr.w	r3, r3, #4
 8003fda:	6713      	str	r3, [r2, #112]	; 0x70
 8003fdc:	4b78      	ldr	r3, [pc, #480]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	4a77      	ldr	r2, [pc, #476]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe8:	e00b      	b.n	8004002 <HAL_RCC_OscConfig+0x32a>
 8003fea:	4b75      	ldr	r3, [pc, #468]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a74      	ldr	r2, [pc, #464]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	4b72      	ldr	r3, [pc, #456]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	4a71      	ldr	r2, [pc, #452]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8003ffc:	f023 0304 	bic.w	r3, r3, #4
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d015      	beq.n	8004036 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fc ff8f 	bl	8000f2c <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fc ff8b 	bl	8000f2c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e0c5      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004028:	4b65      	ldr	r3, [pc, #404]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ee      	beq.n	8004012 <HAL_RCC_OscConfig+0x33a>
 8004034:	e014      	b.n	8004060 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004036:	f7fc ff79 	bl	8000f2c <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403e:	f7fc ff75 	bl	8000f2c <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	; 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e0af      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004054:	4b5a      	ldr	r3, [pc, #360]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ee      	bne.n	800403e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d105      	bne.n	8004072 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004066:	4b56      	ldr	r3, [pc, #344]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	4a55      	ldr	r2, [pc, #340]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 800406c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 809b 	beq.w	80041b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800407c:	4b50      	ldr	r3, [pc, #320]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b08      	cmp	r3, #8
 8004086:	d05c      	beq.n	8004142 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d141      	bne.n	8004114 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004090:	4b4c      	ldr	r3, [pc, #304]	; (80041c4 <HAL_RCC_OscConfig+0x4ec>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004096:	f7fc ff49 	bl	8000f2c <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409e:	f7fc ff45 	bl	8000f2c <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e081      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b0:	4b43      	ldr	r3, [pc, #268]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f0      	bne.n	800409e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	019b      	lsls	r3, r3, #6
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	3b01      	subs	r3, #1
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	431a      	orrs	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	4937      	ldr	r1, [pc, #220]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e6:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <HAL_RCC_OscConfig+0x4ec>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fc ff1e 	bl	8000f2c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fc ff1a 	bl	8000f2c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e056      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004106:	4b2e      	ldr	r3, [pc, #184]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x41c>
 8004112:	e04e      	b.n	80041b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <HAL_RCC_OscConfig+0x4ec>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411a:	f7fc ff07 	bl	8000f2c <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004122:	f7fc ff03 	bl	8000f2c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e03f      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004134:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCC_OscConfig+0x44a>
 8004140:	e037      	b.n	80041b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e032      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800414e:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <HAL_RCC_OscConfig+0x4e8>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d028      	beq.n	80041ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d121      	bne.n	80041ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d11a      	bne.n	80041ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004184:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004186:	4293      	cmp	r3, r2
 8004188:	d111      	bne.n	80041ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d107      	bne.n	80041ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40007000 	.word	0x40007000
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470060 	.word	0x42470060

080041c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0cc      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041dc:	4b68      	ldr	r3, [pc, #416]	; (8004380 <HAL_RCC_ClockConfig+0x1b8>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d90c      	bls.n	8004204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ea:	4b65      	ldr	r3, [pc, #404]	; (8004380 <HAL_RCC_ClockConfig+0x1b8>)
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b63      	ldr	r3, [pc, #396]	; (8004380 <HAL_RCC_ClockConfig+0x1b8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e0b8      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800421c:	4b59      	ldr	r3, [pc, #356]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a58      	ldr	r2, [pc, #352]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004226:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004234:	4b53      	ldr	r3, [pc, #332]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4a52      	ldr	r2, [pc, #328]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800423e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004240:	4b50      	ldr	r3, [pc, #320]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	494d      	ldr	r1, [pc, #308]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d044      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d107      	bne.n	8004276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	4b47      	ldr	r3, [pc, #284]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d119      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e07f      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b02      	cmp	r3, #2
 800427c:	d003      	beq.n	8004286 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004282:	2b03      	cmp	r3, #3
 8004284:	d107      	bne.n	8004296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004286:	4b3f      	ldr	r3, [pc, #252]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e06f      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004296:	4b3b      	ldr	r3, [pc, #236]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e067      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a6:	4b37      	ldr	r3, [pc, #220]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f023 0203 	bic.w	r2, r3, #3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4934      	ldr	r1, [pc, #208]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b8:	f7fc fe38 	bl	8000f2c <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c0:	f7fc fe34 	bl	8000f2c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e04f      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d6:	4b2b      	ldr	r3, [pc, #172]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 020c 	and.w	r2, r3, #12
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d1eb      	bne.n	80042c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e8:	4b25      	ldr	r3, [pc, #148]	; (8004380 <HAL_RCC_ClockConfig+0x1b8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d20c      	bcs.n	8004310 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0307 	and.w	r3, r3, #7
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e032      	b.n	8004376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800431c:	4b19      	ldr	r3, [pc, #100]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	4916      	ldr	r1, [pc, #88]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0308 	and.w	r3, r3, #8
 8004336:	2b00      	cmp	r3, #0
 8004338:	d009      	beq.n	800434e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433a:	4b12      	ldr	r3, [pc, #72]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	490e      	ldr	r1, [pc, #56]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	4313      	orrs	r3, r2
 800434c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800434e:	f000 f821 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8004352:	4602      	mov	r2, r0
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	091b      	lsrs	r3, r3, #4
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	490a      	ldr	r1, [pc, #40]	; (8004388 <HAL_RCC_ClockConfig+0x1c0>)
 8004360:	5ccb      	ldrb	r3, [r1, r3]
 8004362:	fa22 f303 	lsr.w	r3, r2, r3
 8004366:	4a09      	ldr	r2, [pc, #36]	; (800438c <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_RCC_ClockConfig+0x1c8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7fc fd98 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023c00 	.word	0x40023c00
 8004384:	40023800 	.word	0x40023800
 8004388:	08008f48 	.word	0x08008f48
 800438c:	20000008 	.word	0x20000008
 8004390:	2000000c 	.word	0x2000000c

08004394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004394:	b5b0      	push	{r4, r5, r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800439a:	2100      	movs	r1, #0
 800439c:	6079      	str	r1, [r7, #4]
 800439e:	2100      	movs	r1, #0
 80043a0:	60f9      	str	r1, [r7, #12]
 80043a2:	2100      	movs	r1, #0
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80043a6:	2100      	movs	r1, #0
 80043a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043aa:	4952      	ldr	r1, [pc, #328]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80043ac:	6889      	ldr	r1, [r1, #8]
 80043ae:	f001 010c 	and.w	r1, r1, #12
 80043b2:	2908      	cmp	r1, #8
 80043b4:	d00d      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80043b6:	2908      	cmp	r1, #8
 80043b8:	f200 8094 	bhi.w	80044e4 <HAL_RCC_GetSysClockFreq+0x150>
 80043bc:	2900      	cmp	r1, #0
 80043be:	d002      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0x32>
 80043c0:	2904      	cmp	r1, #4
 80043c2:	d003      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x38>
 80043c4:	e08e      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c6:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80043c8:	60bb      	str	r3, [r7, #8]
       break;
 80043ca:	e08e      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043cc:	4b4b      	ldr	r3, [pc, #300]	; (80044fc <HAL_RCC_GetSysClockFreq+0x168>)
 80043ce:	60bb      	str	r3, [r7, #8]
      break;
 80043d0:	e08b      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d2:	4948      	ldr	r1, [pc, #288]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80043d4:	6849      	ldr	r1, [r1, #4]
 80043d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80043da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043dc:	4945      	ldr	r1, [pc, #276]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80043de:	6849      	ldr	r1, [r1, #4]
 80043e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80043e4:	2900      	cmp	r1, #0
 80043e6:	d024      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e8:	4942      	ldr	r1, [pc, #264]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80043ea:	6849      	ldr	r1, [r1, #4]
 80043ec:	0989      	lsrs	r1, r1, #6
 80043ee:	4608      	mov	r0, r1
 80043f0:	f04f 0100 	mov.w	r1, #0
 80043f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80043f8:	f04f 0500 	mov.w	r5, #0
 80043fc:	ea00 0204 	and.w	r2, r0, r4
 8004400:	ea01 0305 	and.w	r3, r1, r5
 8004404:	493d      	ldr	r1, [pc, #244]	; (80044fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004406:	fb01 f003 	mul.w	r0, r1, r3
 800440a:	2100      	movs	r1, #0
 800440c:	fb01 f102 	mul.w	r1, r1, r2
 8004410:	1844      	adds	r4, r0, r1
 8004412:	493a      	ldr	r1, [pc, #232]	; (80044fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004414:	fba2 0101 	umull	r0, r1, r2, r1
 8004418:	1863      	adds	r3, r4, r1
 800441a:	4619      	mov	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	461a      	mov	r2, r3
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	f7fb ff2c 	bl	8000280 <__aeabi_uldivmod>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4613      	mov	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	e04a      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004432:	4b30      	ldr	r3, [pc, #192]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	099b      	lsrs	r3, r3, #6
 8004438:	461a      	mov	r2, r3
 800443a:	f04f 0300 	mov.w	r3, #0
 800443e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004442:	f04f 0100 	mov.w	r1, #0
 8004446:	ea02 0400 	and.w	r4, r2, r0
 800444a:	ea03 0501 	and.w	r5, r3, r1
 800444e:	4620      	mov	r0, r4
 8004450:	4629      	mov	r1, r5
 8004452:	f04f 0200 	mov.w	r2, #0
 8004456:	f04f 0300 	mov.w	r3, #0
 800445a:	014b      	lsls	r3, r1, #5
 800445c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004460:	0142      	lsls	r2, r0, #5
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	1b00      	subs	r0, r0, r4
 8004468:	eb61 0105 	sbc.w	r1, r1, r5
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	018b      	lsls	r3, r1, #6
 8004476:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800447a:	0182      	lsls	r2, r0, #6
 800447c:	1a12      	subs	r2, r2, r0
 800447e:	eb63 0301 	sbc.w	r3, r3, r1
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f04f 0100 	mov.w	r1, #0
 800448a:	00d9      	lsls	r1, r3, #3
 800448c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004490:	00d0      	lsls	r0, r2, #3
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	1912      	adds	r2, r2, r4
 8004498:	eb45 0303 	adc.w	r3, r5, r3
 800449c:	f04f 0000 	mov.w	r0, #0
 80044a0:	f04f 0100 	mov.w	r1, #0
 80044a4:	0299      	lsls	r1, r3, #10
 80044a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044aa:	0290      	lsls	r0, r2, #10
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	f7fb fee0 	bl	8000280 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4613      	mov	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044c8:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	3301      	adds	r3, #1
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	60bb      	str	r3, [r7, #8]
      break;
 80044e2:	e002      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80044e6:	60bb      	str	r3, [r7, #8]
      break;
 80044e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ea:	68bb      	ldr	r3, [r7, #8]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bdb0      	pop	{r4, r5, r7, pc}
 80044f4:	40023800 	.word	0x40023800
 80044f8:	00f42400 	.word	0x00f42400
 80044fc:	018cba80 	.word	0x018cba80

08004500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <HAL_RCC_GetHCLKFreq+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000008 	.word	0x20000008

08004518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800451c:	f7ff fff0 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	0a9b      	lsrs	r3, r3, #10
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4903      	ldr	r1, [pc, #12]	; (800453c <HAL_RCC_GetPCLK1Freq+0x24>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40023800 	.word	0x40023800
 800453c:	08008f58 	.word	0x08008f58

08004540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004544:	f7ff ffdc 	bl	8004500 <HAL_RCC_GetHCLKFreq>
 8004548:	4602      	mov	r2, r0
 800454a:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	0b5b      	lsrs	r3, r3, #13
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4903      	ldr	r1, [pc, #12]	; (8004564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004556:	5ccb      	ldrb	r3, [r1, r3]
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40023800 	.word	0x40023800
 8004564:	08008f58 	.word	0x08008f58

08004568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e03f      	b.n	80045fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fc fad4 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f929 	bl	8004804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b08a      	sub	sp, #40	; 0x28
 8004606:	af02      	add	r7, sp, #8
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b20      	cmp	r3, #32
 8004620:	d17c      	bne.n	800471c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_UART_Transmit+0x2c>
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e075      	b.n	800471e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_UART_Transmit+0x3e>
 800463c:	2302      	movs	r3, #2
 800463e:	e06e      	b.n	800471e <HAL_UART_Transmit+0x11c>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2221      	movs	r2, #33	; 0x21
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004656:	f7fc fc69 	bl	8000f2c <HAL_GetTick>
 800465a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004670:	d108      	bne.n	8004684 <HAL_UART_Transmit+0x82>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d104      	bne.n	8004684 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	e003      	b.n	800468c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004688:	2300      	movs	r3, #0
 800468a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004694:	e02a      	b.n	80046ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2200      	movs	r2, #0
 800469e:	2180      	movs	r1, #128	; 0x80
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f840 	bl	8004726 <UART_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e036      	b.n	800471e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10b      	bne.n	80046ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	3302      	adds	r3, #2
 80046ca:	61bb      	str	r3, [r7, #24]
 80046cc:	e007      	b.n	80046de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	781a      	ldrb	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	3301      	adds	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1cf      	bne.n	8004696 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2200      	movs	r2, #0
 80046fe:	2140      	movs	r1, #64	; 0x40
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f810 	bl	8004726 <UART_WaitOnFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e006      	b.n	800471e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004718:	2300      	movs	r3, #0
 800471a:	e000      	b.n	800471e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800471c:	2302      	movs	r3, #2
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	3720      	adds	r7, #32
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b090      	sub	sp, #64	; 0x40
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	603b      	str	r3, [r7, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004736:	e050      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d04c      	beq.n	80047da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0x30>
 8004746:	f7fc fbf1 	bl	8000f2c <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004752:	429a      	cmp	r2, r3
 8004754:	d241      	bcs.n	80047da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800476c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004776:	637a      	str	r2, [r7, #52]	; 0x34
 8004778:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800477c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	613b      	str	r3, [r7, #16]
   return(result);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047aa:	623a      	str	r2, [r7, #32]
 80047ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	69f9      	ldr	r1, [r7, #28]
 80047b0:	6a3a      	ldr	r2, [r7, #32]
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e5      	bne.n	800478a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e00f      	b.n	80047fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4013      	ands	r3, r2
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	bf0c      	ite	eq
 80047ea:	2301      	moveq	r3, #1
 80047ec:	2300      	movne	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d09f      	beq.n	8004738 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3740      	adds	r7, #64	; 0x40
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004808:	b09f      	sub	sp, #124	; 0x7c
 800480a:	af00      	add	r7, sp, #0
 800480c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800480e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481a:	68d9      	ldr	r1, [r3, #12]
 800481c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	ea40 0301 	orr.w	r3, r0, r1
 8004824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	431a      	orrs	r2, r3
 8004830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	431a      	orrs	r2, r3
 8004836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	4313      	orrs	r3, r2
 800483c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800483e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004848:	f021 010c 	bic.w	r1, r1, #12
 800484c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004852:	430b      	orrs	r3, r1
 8004854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004862:	6999      	ldr	r1, [r3, #24]
 8004864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	ea40 0301 	orr.w	r3, r0, r1
 800486c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800486e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	4bc5      	ldr	r3, [pc, #788]	; (8004b88 <UART_SetConfig+0x384>)
 8004874:	429a      	cmp	r2, r3
 8004876:	d004      	beq.n	8004882 <UART_SetConfig+0x7e>
 8004878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4bc3      	ldr	r3, [pc, #780]	; (8004b8c <UART_SetConfig+0x388>)
 800487e:	429a      	cmp	r2, r3
 8004880:	d103      	bne.n	800488a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004882:	f7ff fe5d 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8004886:	6778      	str	r0, [r7, #116]	; 0x74
 8004888:	e002      	b.n	8004890 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800488a:	f7ff fe45 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 800488e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004898:	f040 80b6 	bne.w	8004a08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800489c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489e:	461c      	mov	r4, r3
 80048a0:	f04f 0500 	mov.w	r5, #0
 80048a4:	4622      	mov	r2, r4
 80048a6:	462b      	mov	r3, r5
 80048a8:	1891      	adds	r1, r2, r2
 80048aa:	6439      	str	r1, [r7, #64]	; 0x40
 80048ac:	415b      	adcs	r3, r3
 80048ae:	647b      	str	r3, [r7, #68]	; 0x44
 80048b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048b4:	1912      	adds	r2, r2, r4
 80048b6:	eb45 0303 	adc.w	r3, r5, r3
 80048ba:	f04f 0000 	mov.w	r0, #0
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	00d9      	lsls	r1, r3, #3
 80048c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048c8:	00d0      	lsls	r0, r2, #3
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	1911      	adds	r1, r2, r4
 80048d0:	6639      	str	r1, [r7, #96]	; 0x60
 80048d2:	416b      	adcs	r3, r5
 80048d4:	667b      	str	r3, [r7, #100]	; 0x64
 80048d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	461a      	mov	r2, r3
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80048e4:	415b      	adcs	r3, r3
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80048f0:	f7fb fcc6 	bl	8000280 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4ba5      	ldr	r3, [pc, #660]	; (8004b90 <UART_SetConfig+0x38c>)
 80048fa:	fba3 2302 	umull	r2, r3, r3, r2
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	011e      	lsls	r6, r3, #4
 8004902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004904:	461c      	mov	r4, r3
 8004906:	f04f 0500 	mov.w	r5, #0
 800490a:	4622      	mov	r2, r4
 800490c:	462b      	mov	r3, r5
 800490e:	1891      	adds	r1, r2, r2
 8004910:	6339      	str	r1, [r7, #48]	; 0x30
 8004912:	415b      	adcs	r3, r3
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
 8004916:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800491a:	1912      	adds	r2, r2, r4
 800491c:	eb45 0303 	adc.w	r3, r5, r3
 8004920:	f04f 0000 	mov.w	r0, #0
 8004924:	f04f 0100 	mov.w	r1, #0
 8004928:	00d9      	lsls	r1, r3, #3
 800492a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800492e:	00d0      	lsls	r0, r2, #3
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	1911      	adds	r1, r2, r4
 8004936:	65b9      	str	r1, [r7, #88]	; 0x58
 8004938:	416b      	adcs	r3, r5
 800493a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800493c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	461a      	mov	r2, r3
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	1891      	adds	r1, r2, r2
 8004948:	62b9      	str	r1, [r7, #40]	; 0x28
 800494a:	415b      	adcs	r3, r3
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004952:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004956:	f7fb fc93 	bl	8000280 <__aeabi_uldivmod>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4b8c      	ldr	r3, [pc, #560]	; (8004b90 <UART_SetConfig+0x38c>)
 8004960:	fba3 1302 	umull	r1, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	2164      	movs	r1, #100	; 0x64
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	3332      	adds	r3, #50	; 0x32
 8004972:	4a87      	ldr	r2, [pc, #540]	; (8004b90 <UART_SetConfig+0x38c>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004980:	441e      	add	r6, r3
 8004982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004984:	4618      	mov	r0, r3
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	1894      	adds	r4, r2, r2
 8004990:	623c      	str	r4, [r7, #32]
 8004992:	415b      	adcs	r3, r3
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800499a:	1812      	adds	r2, r2, r0
 800499c:	eb41 0303 	adc.w	r3, r1, r3
 80049a0:	f04f 0400 	mov.w	r4, #0
 80049a4:	f04f 0500 	mov.w	r5, #0
 80049a8:	00dd      	lsls	r5, r3, #3
 80049aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049ae:	00d4      	lsls	r4, r2, #3
 80049b0:	4622      	mov	r2, r4
 80049b2:	462b      	mov	r3, r5
 80049b4:	1814      	adds	r4, r2, r0
 80049b6:	653c      	str	r4, [r7, #80]	; 0x50
 80049b8:	414b      	adcs	r3, r1
 80049ba:	657b      	str	r3, [r7, #84]	; 0x54
 80049bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	461a      	mov	r2, r3
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	1891      	adds	r1, r2, r2
 80049c8:	61b9      	str	r1, [r7, #24]
 80049ca:	415b      	adcs	r3, r3
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80049d6:	f7fb fc53 	bl	8000280 <__aeabi_uldivmod>
 80049da:	4602      	mov	r2, r0
 80049dc:	460b      	mov	r3, r1
 80049de:	4b6c      	ldr	r3, [pc, #432]	; (8004b90 <UART_SetConfig+0x38c>)
 80049e0:	fba3 1302 	umull	r1, r3, r3, r2
 80049e4:	095b      	lsrs	r3, r3, #5
 80049e6:	2164      	movs	r1, #100	; 0x64
 80049e8:	fb01 f303 	mul.w	r3, r1, r3
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	3332      	adds	r3, #50	; 0x32
 80049f2:	4a67      	ldr	r2, [pc, #412]	; (8004b90 <UART_SetConfig+0x38c>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	f003 0207 	and.w	r2, r3, #7
 80049fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4432      	add	r2, r6
 8004a04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a06:	e0b9      	b.n	8004b7c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a0a:	461c      	mov	r4, r3
 8004a0c:	f04f 0500 	mov.w	r5, #0
 8004a10:	4622      	mov	r2, r4
 8004a12:	462b      	mov	r3, r5
 8004a14:	1891      	adds	r1, r2, r2
 8004a16:	6139      	str	r1, [r7, #16]
 8004a18:	415b      	adcs	r3, r3
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a20:	1912      	adds	r2, r2, r4
 8004a22:	eb45 0303 	adc.w	r3, r5, r3
 8004a26:	f04f 0000 	mov.w	r0, #0
 8004a2a:	f04f 0100 	mov.w	r1, #0
 8004a2e:	00d9      	lsls	r1, r3, #3
 8004a30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a34:	00d0      	lsls	r0, r2, #3
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	eb12 0804 	adds.w	r8, r2, r4
 8004a3e:	eb43 0905 	adc.w	r9, r3, r5
 8004a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f04f 0100 	mov.w	r1, #0
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	008b      	lsls	r3, r1, #2
 8004a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004a5a:	0082      	lsls	r2, r0, #2
 8004a5c:	4640      	mov	r0, r8
 8004a5e:	4649      	mov	r1, r9
 8004a60:	f7fb fc0e 	bl	8000280 <__aeabi_uldivmod>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4b49      	ldr	r3, [pc, #292]	; (8004b90 <UART_SetConfig+0x38c>)
 8004a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6e:	095b      	lsrs	r3, r3, #5
 8004a70:	011e      	lsls	r6, r3, #4
 8004a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a74:	4618      	mov	r0, r3
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	1894      	adds	r4, r2, r2
 8004a80:	60bc      	str	r4, [r7, #8]
 8004a82:	415b      	adcs	r3, r3
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a8a:	1812      	adds	r2, r2, r0
 8004a8c:	eb41 0303 	adc.w	r3, r1, r3
 8004a90:	f04f 0400 	mov.w	r4, #0
 8004a94:	f04f 0500 	mov.w	r5, #0
 8004a98:	00dd      	lsls	r5, r3, #3
 8004a9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004a9e:	00d4      	lsls	r4, r2, #3
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	1814      	adds	r4, r2, r0
 8004aa6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004aa8:	414b      	adcs	r3, r1
 8004aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	f04f 0300 	mov.w	r3, #0
 8004abe:	008b      	lsls	r3, r1, #2
 8004ac0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ac4:	0082      	lsls	r2, r0, #2
 8004ac6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004aca:	f7fb fbd9 	bl	8000280 <__aeabi_uldivmod>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4b2f      	ldr	r3, [pc, #188]	; (8004b90 <UART_SetConfig+0x38c>)
 8004ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	2164      	movs	r1, #100	; 0x64
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	3332      	adds	r3, #50	; 0x32
 8004ae6:	4a2a      	ldr	r2, [pc, #168]	; (8004b90 <UART_SetConfig+0x38c>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af2:	441e      	add	r6, r3
 8004af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af6:	4618      	mov	r0, r3
 8004af8:	f04f 0100 	mov.w	r1, #0
 8004afc:	4602      	mov	r2, r0
 8004afe:	460b      	mov	r3, r1
 8004b00:	1894      	adds	r4, r2, r2
 8004b02:	603c      	str	r4, [r7, #0]
 8004b04:	415b      	adcs	r3, r3
 8004b06:	607b      	str	r3, [r7, #4]
 8004b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b0c:	1812      	adds	r2, r2, r0
 8004b0e:	eb41 0303 	adc.w	r3, r1, r3
 8004b12:	f04f 0400 	mov.w	r4, #0
 8004b16:	f04f 0500 	mov.w	r5, #0
 8004b1a:	00dd      	lsls	r5, r3, #3
 8004b1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b20:	00d4      	lsls	r4, r2, #3
 8004b22:	4622      	mov	r2, r4
 8004b24:	462b      	mov	r3, r5
 8004b26:	eb12 0a00 	adds.w	sl, r2, r0
 8004b2a:	eb43 0b01 	adc.w	fp, r3, r1
 8004b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	008b      	lsls	r3, r1, #2
 8004b42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b46:	0082      	lsls	r2, r0, #2
 8004b48:	4650      	mov	r0, sl
 8004b4a:	4659      	mov	r1, fp
 8004b4c:	f7fb fb98 	bl	8000280 <__aeabi_uldivmod>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <UART_SetConfig+0x38c>)
 8004b56:	fba3 1302 	umull	r1, r3, r3, r2
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	2164      	movs	r1, #100	; 0x64
 8004b5e:	fb01 f303 	mul.w	r3, r1, r3
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	3332      	adds	r3, #50	; 0x32
 8004b68:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <UART_SetConfig+0x38c>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	f003 020f 	and.w	r2, r3, #15
 8004b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4432      	add	r2, r6
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	377c      	adds	r7, #124	; 0x7c
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b86:	bf00      	nop
 8004b88:	40011000 	.word	0x40011000
 8004b8c:	40011400 	.word	0x40011400
 8004b90:	51eb851f 	.word	0x51eb851f

08004b94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b94:	b084      	sub	sp, #16
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
 8004b9e:	f107 001c 	add.w	r0, r7, #28
 8004ba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d122      	bne.n	8004bf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d105      	bne.n	8004be6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f001 fb1c 	bl	8006224 <USB_CoreReset>
 8004bec:	4603      	mov	r3, r0
 8004bee:	73fb      	strb	r3, [r7, #15]
 8004bf0:	e01a      	b.n	8004c28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f001 fb10 	bl	8006224 <USB_CoreReset>
 8004c04:	4603      	mov	r3, r0
 8004c06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38
 8004c1a:	e005      	b.n	8004c28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10b      	bne.n	8004c46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f043 0206 	orr.w	r2, r3, #6
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c52:	b004      	add	sp, #16
 8004c54:	4770      	bx	lr
	...

08004c58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d165      	bne.n	8004d38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4a41      	ldr	r2, [pc, #260]	; (8004d74 <USB_SetTurnaroundTime+0x11c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d906      	bls.n	8004c82 <USB_SetTurnaroundTime+0x2a>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4a40      	ldr	r2, [pc, #256]	; (8004d78 <USB_SetTurnaroundTime+0x120>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d202      	bcs.n	8004c82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e062      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	4a3c      	ldr	r2, [pc, #240]	; (8004d78 <USB_SetTurnaroundTime+0x120>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d306      	bcc.n	8004c98 <USB_SetTurnaroundTime+0x40>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4a3b      	ldr	r2, [pc, #236]	; (8004d7c <USB_SetTurnaroundTime+0x124>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d202      	bcs.n	8004c98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004c92:	230e      	movs	r3, #14
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e057      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4a38      	ldr	r2, [pc, #224]	; (8004d7c <USB_SetTurnaroundTime+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d306      	bcc.n	8004cae <USB_SetTurnaroundTime+0x56>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4a37      	ldr	r2, [pc, #220]	; (8004d80 <USB_SetTurnaroundTime+0x128>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d202      	bcs.n	8004cae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ca8:	230d      	movs	r3, #13
 8004caa:	617b      	str	r3, [r7, #20]
 8004cac:	e04c      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	4a33      	ldr	r2, [pc, #204]	; (8004d80 <USB_SetTurnaroundTime+0x128>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d306      	bcc.n	8004cc4 <USB_SetTurnaroundTime+0x6c>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4a32      	ldr	r2, [pc, #200]	; (8004d84 <USB_SetTurnaroundTime+0x12c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d802      	bhi.n	8004cc4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	e041      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	; (8004d84 <USB_SetTurnaroundTime+0x12c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d906      	bls.n	8004cda <USB_SetTurnaroundTime+0x82>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4a2e      	ldr	r2, [pc, #184]	; (8004d88 <USB_SetTurnaroundTime+0x130>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d802      	bhi.n	8004cda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004cd4:	230b      	movs	r3, #11
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	e036      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <USB_SetTurnaroundTime+0x130>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d906      	bls.n	8004cf0 <USB_SetTurnaroundTime+0x98>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a29      	ldr	r2, [pc, #164]	; (8004d8c <USB_SetTurnaroundTime+0x134>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d802      	bhi.n	8004cf0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004cea:	230a      	movs	r3, #10
 8004cec:	617b      	str	r3, [r7, #20]
 8004cee:	e02b      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a26      	ldr	r2, [pc, #152]	; (8004d8c <USB_SetTurnaroundTime+0x134>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d906      	bls.n	8004d06 <USB_SetTurnaroundTime+0xae>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a25      	ldr	r2, [pc, #148]	; (8004d90 <USB_SetTurnaroundTime+0x138>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d202      	bcs.n	8004d06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d00:	2309      	movs	r3, #9
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e020      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <USB_SetTurnaroundTime+0x138>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d306      	bcc.n	8004d1c <USB_SetTurnaroundTime+0xc4>
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	4a20      	ldr	r2, [pc, #128]	; (8004d94 <USB_SetTurnaroundTime+0x13c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d802      	bhi.n	8004d1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d16:	2308      	movs	r3, #8
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	e015      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	; (8004d94 <USB_SetTurnaroundTime+0x13c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d906      	bls.n	8004d32 <USB_SetTurnaroundTime+0xda>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <USB_SetTurnaroundTime+0x140>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d202      	bcs.n	8004d32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004d2c:	2307      	movs	r3, #7
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	e00a      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004d32:	2306      	movs	r3, #6
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e007      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004d3e:	2309      	movs	r3, #9
 8004d40:	617b      	str	r3, [r7, #20]
 8004d42:	e001      	b.n	8004d48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004d44:	2309      	movs	r3, #9
 8004d46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	68da      	ldr	r2, [r3, #12]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	029b      	lsls	r3, r3, #10
 8004d5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	00d8acbf 	.word	0x00d8acbf
 8004d78:	00e4e1c0 	.word	0x00e4e1c0
 8004d7c:	00f42400 	.word	0x00f42400
 8004d80:	01067380 	.word	0x01067380
 8004d84:	011a499f 	.word	0x011a499f
 8004d88:	01312cff 	.word	0x01312cff
 8004d8c:	014ca43f 	.word	0x014ca43f
 8004d90:	016e3600 	.word	0x016e3600
 8004d94:	01a6ab1f 	.word	0x01a6ab1f
 8004d98:	01e84800 	.word	0x01e84800

08004d9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f043 0201 	orr.w	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f023 0201 	bic.w	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d115      	bne.n	8004e2e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e0e:	2001      	movs	r0, #1
 8004e10:	f7fc f898 	bl	8000f44 <HAL_Delay>
      ms++;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 f972 	bl	8006104 <USB_GetMode>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d01e      	beq.n	8004e64 <USB_SetCurrentMode+0x84>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b31      	cmp	r3, #49	; 0x31
 8004e2a:	d9f0      	bls.n	8004e0e <USB_SetCurrentMode+0x2e>
 8004e2c:	e01a      	b.n	8004e64 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d115      	bne.n	8004e60 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e40:	2001      	movs	r0, #1
 8004e42:	f7fc f87f 	bl	8000f44 <HAL_Delay>
      ms++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f001 f959 	bl	8006104 <USB_GetMode>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <USB_SetCurrentMode+0x84>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b31      	cmp	r3, #49	; 0x31
 8004e5c:	d9f0      	bls.n	8004e40 <USB_SetCurrentMode+0x60>
 8004e5e:	e001      	b.n	8004e64 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e005      	b.n	8004e70 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b32      	cmp	r3, #50	; 0x32
 8004e68:	d101      	bne.n	8004e6e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e78:	b084      	sub	sp, #16
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	e009      	b.n	8004eac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	3340      	adds	r3, #64	; 0x40
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	2b0e      	cmp	r3, #14
 8004eb0:	d9f2      	bls.n	8004e98 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11c      	bne.n	8004ef2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ec6:	f043 0302 	orr.w	r3, r3, #2
 8004eca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38
 8004ef0:	e00b      	b.n	8004f0a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f10:	461a      	mov	r2, r3
 8004f12:	2300      	movs	r3, #0
 8004f14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f24:	461a      	mov	r2, r3
 8004f26:	680b      	ldr	r3, [r1, #0]
 8004f28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10c      	bne.n	8004f4a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f36:	2100      	movs	r1, #0
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f945 	bl	80051c8 <USB_SetDevSpeed>
 8004f3e:	e008      	b.n	8004f52 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f40:	2101      	movs	r1, #1
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f940 	bl	80051c8 <USB_SetDevSpeed>
 8004f48:	e003      	b.n	8004f52 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f4a:	2103      	movs	r1, #3
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f93b 	bl	80051c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f52:	2110      	movs	r1, #16
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f8f3 	bl	8005140 <USB_FlushTxFifo>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f90f 	bl	8005188 <USB_FlushRxFifo>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f86:	461a      	mov	r2, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f92:	461a      	mov	r2, r3
 8004f94:	2300      	movs	r3, #0
 8004f96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	e043      	b.n	8005026 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fb4:	d118      	bne.n	8004fe8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e013      	b.n	8004ffa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	e008      	b.n	8004ffa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	461a      	mov	r2, r3
 8005008:	2300      	movs	r3, #0
 800500a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005018:	461a      	mov	r2, r3
 800501a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800501e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	3301      	adds	r3, #1
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	429a      	cmp	r2, r3
 800502c:	d3b7      	bcc.n	8004f9e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	e043      	b.n	80050bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800504a:	d118      	bne.n	800507e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10a      	bne.n	8005068 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	015a      	lsls	r2, r3, #5
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4413      	add	r3, r2
 800505a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505e:	461a      	mov	r2, r3
 8005060:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e013      	b.n	8005090 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	461a      	mov	r2, r3
 8005076:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	e008      	b.n	8005090 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	461a      	mov	r2, r3
 800508c:	2300      	movs	r3, #0
 800508e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	461a      	mov	r2, r3
 80050b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	3301      	adds	r3, #1
 80050ba:	613b      	str	r3, [r7, #16]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d3b7      	bcc.n	8005034 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80050e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d105      	bne.n	80050f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f043 0210 	orr.w	r2, r3, #16
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	4b0f      	ldr	r3, [pc, #60]	; (800513c <USB_DevInit+0x2c4>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	f043 0208 	orr.w	r2, r3, #8
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d107      	bne.n	800512c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005124:	f043 0304 	orr.w	r3, r3, #4
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005138:	b004      	add	sp, #16
 800513a:	4770      	bx	lr
 800513c:	803c3800 	.word	0x803c3800

08005140 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	019b      	lsls	r3, r3, #6
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3301      	adds	r3, #1
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	4a08      	ldr	r2, [pc, #32]	; (8005184 <USB_FlushTxFifo+0x44>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e006      	b.n	8005178 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0320 	and.w	r3, r3, #32
 8005172:	2b20      	cmp	r3, #32
 8005174:	d0f1      	beq.n	800515a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	00030d40 	.word	0x00030d40

08005188 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2210      	movs	r2, #16
 8005198:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	3301      	adds	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <USB_FlushRxFifo+0x3c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e006      	b.n	80051b8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d0f1      	beq.n	800519a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	00030d40 	.word	0x00030d40

080051c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	68f9      	ldr	r1, [r7, #12]
 80051e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051e8:	4313      	orrs	r3, r2
 80051ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b087      	sub	sp, #28
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0306 	and.w	r3, r3, #6
 8005212:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d102      	bne.n	8005220 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]
 800521e:	e00a      	b.n	8005236 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d002      	beq.n	800522c <USB_GetDevSpeed+0x32>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2b06      	cmp	r3, #6
 800522a:	d102      	bne.n	8005232 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800522c:	2302      	movs	r3, #2
 800522e:	75fb      	strb	r3, [r7, #23]
 8005230:	e001      	b.n	8005236 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005232:	230f      	movs	r3, #15
 8005234:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005236:	7dfb      	ldrb	r3, [r7, #23]
}
 8005238:	4618      	mov	r0, r3
 800523a:	371c      	adds	r7, #28
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	785b      	ldrb	r3, [r3, #1]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d13a      	bne.n	80052d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 030f 	and.w	r3, r3, #15
 8005270:	2101      	movs	r1, #1
 8005272:	fa01 f303 	lsl.w	r3, r1, r3
 8005276:	b29b      	uxth	r3, r3
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800527e:	4313      	orrs	r3, r2
 8005280:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	015a      	lsls	r2, r3, #5
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d155      	bne.n	8005344 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	78db      	ldrb	r3, [r3, #3]
 80052b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	059b      	lsls	r3, r3, #22
 80052ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052bc:	4313      	orrs	r3, r2
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	e036      	b.n	8005344 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	69da      	ldr	r2, [r3, #28]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	2101      	movs	r1, #1
 80052e8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ec:	041b      	lsls	r3, r3, #16
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052f4:	4313      	orrs	r3, r2
 80052f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d11a      	bne.n	8005344 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	78db      	ldrb	r3, [r3, #3]
 8005328:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800532a:	430b      	orrs	r3, r1
 800532c:	4313      	orrs	r3, r2
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	440a      	add	r2, r1
 8005336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005342:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d161      	bne.n	8005434 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005386:	d11f      	bne.n	80053c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	2101      	movs	r1, #1
 80053da:	fa01 f303 	lsl.w	r3, r1, r3
 80053de:	b29b      	uxth	r3, r3
 80053e0:	43db      	mvns	r3, r3
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e8:	4013      	ands	r3, r2
 80053ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f2:	69da      	ldr	r2, [r3, #28]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	2101      	movs	r1, #1
 80053fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005402:	b29b      	uxth	r3, r3
 8005404:	43db      	mvns	r3, r3
 8005406:	68f9      	ldr	r1, [r7, #12]
 8005408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800540c:	4013      	ands	r3, r2
 800540e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	0159      	lsls	r1, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	440b      	add	r3, r1
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	4619      	mov	r1, r3
 800542c:	4b35      	ldr	r3, [pc, #212]	; (8005504 <USB_DeactivateEndpoint+0x1b0>)
 800542e:	4013      	ands	r3, r2
 8005430:	600b      	str	r3, [r1, #0]
 8005432:	e060      	b.n	80054f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800544a:	d11f      	bne.n	800548c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	0151      	lsls	r1, r2, #5
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	440a      	add	r2, r1
 8005462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005466:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800546a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	440a      	add	r2, r1
 8005482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005486:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800548a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	2101      	movs	r1, #1
 800549e:	fa01 f303 	lsl.w	r3, r1, r3
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	43db      	mvns	r3, r3
 80054a6:	68f9      	ldr	r1, [r7, #12]
 80054a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ac:	4013      	ands	r3, r2
 80054ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	2101      	movs	r1, #1
 80054c2:	fa01 f303 	lsl.w	r3, r1, r3
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	43db      	mvns	r3, r3
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054d0:	4013      	ands	r3, r2
 80054d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	0159      	lsls	r1, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	440b      	add	r3, r1
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	4619      	mov	r1, r3
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <USB_DeactivateEndpoint+0x1b4>)
 80054f2:	4013      	ands	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	ec337800 	.word	0xec337800
 8005508:	eff37800 	.word	0xeff37800

0800550c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af02      	add	r7, sp, #8
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b01      	cmp	r3, #1
 800552a:	f040 815c 	bne.w	80057e6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d132      	bne.n	800559c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	69fa      	ldr	r2, [r7, #28]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005550:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005554:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005558:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	0151      	lsls	r1, r2, #5
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	440a      	add	r2, r1
 8005570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	440a      	add	r2, r1
 8005590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005594:	0cdb      	lsrs	r3, r3, #19
 8005596:	04db      	lsls	r3, r3, #19
 8005598:	6113      	str	r3, [r2, #16]
 800559a:	e074      	b.n	8005686 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	0151      	lsls	r1, r2, #5
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	440a      	add	r2, r1
 80055b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b6:	0cdb      	lsrs	r3, r3, #19
 80055b8:	04db      	lsls	r3, r3, #19
 80055ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	6959      	ldr	r1, [r3, #20]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	440b      	add	r3, r1
 80055f8:	1e59      	subs	r1, r3, #1
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005602:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005604:	4b9d      	ldr	r3, [pc, #628]	; (800587c <USB_EPStartXfer+0x370>)
 8005606:	400b      	ands	r3, r1
 8005608:	69b9      	ldr	r1, [r7, #24]
 800560a:	0148      	lsls	r0, r1, #5
 800560c:	69f9      	ldr	r1, [r7, #28]
 800560e:	4401      	add	r1, r0
 8005610:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005614:	4313      	orrs	r3, r2
 8005616:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562e:	69b9      	ldr	r1, [r7, #24]
 8005630:	0148      	lsls	r0, r1, #5
 8005632:	69f9      	ldr	r1, [r7, #28]
 8005634:	4401      	add	r1, r0
 8005636:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800563a:	4313      	orrs	r3, r2
 800563c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	78db      	ldrb	r3, [r3, #3]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d11f      	bne.n	8005686 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005660:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005664:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005680:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005684:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d14b      	bne.n	8005724 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d009      	beq.n	80056a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	461a      	mov	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	78db      	ldrb	r3, [r3, #3]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d128      	bne.n	8005702 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d110      	bne.n	80056e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	015a      	lsls	r2, r3, #5
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	4413      	add	r3, r2
 80056c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	0151      	lsls	r1, r2, #5
 80056d2:	69fa      	ldr	r2, [r7, #28]
 80056d4:	440a      	add	r2, r1
 80056d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	e00f      	b.n	8005702 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005700:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e12f      	b.n	8005984 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005742:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	78db      	ldrb	r3, [r3, #3]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d015      	beq.n	8005778 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8117 	beq.w	8005984 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	2101      	movs	r1, #1
 8005768:	fa01 f303 	lsl.w	r3, r1, r3
 800576c:	69f9      	ldr	r1, [r7, #28]
 800576e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005772:	4313      	orrs	r3, r2
 8005774:	634b      	str	r3, [r1, #52]	; 0x34
 8005776:	e105      	b.n	8005984 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d110      	bne.n	80057aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	e00f      	b.n	80057ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	68d9      	ldr	r1, [r3, #12]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	781a      	ldrb	r2, [r3, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	b298      	uxth	r0, r3
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	4603      	mov	r3, r0
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 fa2b 	bl	8005c3a <USB_WritePacket>
 80057e4:	e0ce      	b.n	8005984 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005800:	0cdb      	lsrs	r3, r3, #19
 8005802:	04db      	lsls	r3, r3, #19
 8005804:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005820:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005824:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005828:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d126      	bne.n	8005880 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005848:	69b9      	ldr	r1, [r7, #24]
 800584a:	0148      	lsls	r0, r1, #5
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	4401      	add	r1, r0
 8005850:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005854:	4313      	orrs	r3, r2
 8005856:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005872:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005876:	6113      	str	r3, [r2, #16]
 8005878:	e036      	b.n	80058e8 <USB_EPStartXfer+0x3dc>
 800587a:	bf00      	nop
 800587c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4413      	add	r3, r2
 800588a:	1e5a      	subs	r2, r3, #1
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	fbb2 f3f3 	udiv	r3, r2, r3
 8005894:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	8afb      	ldrh	r3, [r7, #22]
 80058a6:	04d9      	lsls	r1, r3, #19
 80058a8:	4b39      	ldr	r3, [pc, #228]	; (8005990 <USB_EPStartXfer+0x484>)
 80058aa:	400b      	ands	r3, r1
 80058ac:	69b9      	ldr	r1, [r7, #24]
 80058ae:	0148      	lsls	r0, r1, #5
 80058b0:	69f9      	ldr	r1, [r7, #28]
 80058b2:	4401      	add	r1, r0
 80058b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058b8:	4313      	orrs	r3, r2
 80058ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	8af9      	ldrh	r1, [r7, #22]
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058d8:	69b9      	ldr	r1, [r7, #24]
 80058da:	0148      	lsls	r0, r1, #5
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	4401      	add	r1, r0
 80058e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058e4:	4313      	orrs	r3, r2
 80058e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10d      	bne.n	800590a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	68d9      	ldr	r1, [r3, #12]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	460a      	mov	r2, r1
 8005908:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	78db      	ldrb	r3, [r3, #3]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d128      	bne.n	8005964 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	2b00      	cmp	r3, #0
 8005920:	d110      	bne.n	8005944 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	e00f      	b.n	8005964 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	0151      	lsls	r1, r2, #5
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	440a      	add	r2, r1
 800595a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800595e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005962:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69ba      	ldr	r2, [r7, #24]
 8005974:	0151      	lsls	r1, r2, #5
 8005976:	69fa      	ldr	r2, [r7, #28]
 8005978:	440a      	add	r2, r1
 800597a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800597e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005982:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	1ff80000 	.word	0x1ff80000

08005994 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	4613      	mov	r3, r2
 80059a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	f040 80cd 	bne.w	8005b50 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d132      	bne.n	8005a24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1c:	0cdb      	lsrs	r3, r3, #19
 8005a1e:	04db      	lsls	r3, r3, #19
 8005a20:	6113      	str	r3, [r2, #16]
 8005a22:	e04e      	b.n	8005ac2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3e:	0cdb      	lsrs	r3, r3, #19
 8005a40:	04db      	lsls	r3, r3, #19
 8005a42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	0151      	lsls	r1, r2, #5
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	440a      	add	r2, r1
 8005a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d903      	bls.n	8005a7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	689a      	ldr	r2, [r3, #8]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab2:	6939      	ldr	r1, [r7, #16]
 8005ab4:	0148      	lsls	r0, r1, #5
 8005ab6:	6979      	ldr	r1, [r7, #20]
 8005ab8:	4401      	add	r1, r0
 8005aba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d11e      	bne.n	8005b06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d009      	beq.n	8005ae4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	461a      	mov	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	0151      	lsls	r1, r2, #5
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	440a      	add	r2, r1
 8005afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005afe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	e092      	b.n	8005c2c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d07e      	beq.n	8005c2c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	2101      	movs	r1, #1
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	6979      	ldr	r1, [r7, #20]
 8005b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	634b      	str	r3, [r1, #52]	; 0x34
 8005b4e:	e06d      	b.n	8005c2c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6a:	0cdb      	lsrs	r3, r3, #19
 8005b6c:	04db      	lsls	r3, r3, #19
 8005b6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b92:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bda:	6939      	ldr	r1, [r7, #16]
 8005bdc:	0148      	lsls	r0, r1, #5
 8005bde:	6979      	ldr	r1, [r7, #20]
 8005be0:	4401      	add	r1, r0
 8005be2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005be6:	4313      	orrs	r3, r2
 8005be8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d10d      	bne.n	8005c0c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	68d9      	ldr	r1, [r3, #12]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	460a      	mov	r2, r1
 8005c0a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	693a      	ldr	r2, [r7, #16]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b089      	sub	sp, #36	; 0x24
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	4611      	mov	r1, r2
 8005c46:	461a      	mov	r2, r3
 8005c48:	460b      	mov	r3, r1
 8005c4a:	71fb      	strb	r3, [r7, #7]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d123      	bne.n	8005ca8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c60:	88bb      	ldrh	r3, [r7, #4]
 8005c62:	3303      	adds	r3, #3
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e018      	b.n	8005ca0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	031a      	lsls	r2, r3, #12
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	3301      	adds	r3, #1
 8005c86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	3301      	adds	r3, #1
 8005c92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	3301      	adds	r3, #1
 8005c98:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3e2      	bcc.n	8005c6e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3724      	adds	r7, #36	; 0x24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b08b      	sub	sp, #44	; 0x2c
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	e014      	b.n	8005d0c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	3301      	adds	r3, #1
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	623b      	str	r3, [r7, #32]
 8005d0c:	6a3a      	ldr	r2, [r7, #32]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d3e6      	bcc.n	8005ce2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d14:	8bfb      	ldrh	r3, [r7, #30]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01e      	beq.n	8005d58 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d24:	461a      	mov	r2, r3
 8005d26:	f107 0310 	add.w	r3, r7, #16
 8005d2a:	6812      	ldr	r2, [r2, #0]
 8005d2c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	00db      	lsls	r3, r3, #3
 8005d36:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	701a      	strb	r2, [r3, #0]
      i++;
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	3301      	adds	r3, #1
 8005d44:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	3301      	adds	r3, #1
 8005d4a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d4c:	8bfb      	ldrh	r3, [r7, #30]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d52:	8bfb      	ldrh	r3, [r7, #30]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1ea      	bne.n	8005d2e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	372c      	adds	r7, #44	; 0x2c
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d12c      	bne.n	8005ddc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db12      	blt.n	8005dba <USB_EPSetStall+0x54>
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00f      	beq.n	8005dba <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	0151      	lsls	r1, r2, #5
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	440a      	add	r2, r1
 8005db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005db8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e02b      	b.n	8005e34 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	db12      	blt.n	8005e14 <USB_EPSetStall+0xae>
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00f      	beq.n	8005e14 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e12:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	0151      	lsls	r1, r2, #5
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	440a      	add	r2, r1
 8005e2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e42:	b480      	push	{r7}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d128      	bne.n	8005eb0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	78db      	ldrb	r3, [r3, #3]
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d003      	beq.n	8005e8e <USB_EPClearStall+0x4c>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	78db      	ldrb	r3, [r3, #3]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d138      	bne.n	8005f00 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	0151      	lsls	r1, r2, #5
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	440a      	add	r2, r1
 8005ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	e027      	b.n	8005f00 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ece:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	78db      	ldrb	r3, [r3, #3]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	d003      	beq.n	8005ee0 <USB_EPClearStall+0x9e>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	78db      	ldrb	r3, [r3, #3]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d10f      	bne.n	8005f00 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005efe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr

08005f0e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	b085      	sub	sp, #20
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f30:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b085      	sub	sp, #20
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f74:	f023 0303 	bic.w	r3, r3, #3
 8005f78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f88:	f023 0302 	bic.w	r3, r3, #2
 8005f8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fca:	f043 0302 	orr.w	r3, r3, #2
 8005fce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3714      	adds	r7, #20
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b085      	sub	sp, #20
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	4013      	ands	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	0c1b      	lsrs	r3, r3, #16
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	4013      	ands	r3, r2
 800605a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	b29b      	uxth	r3, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	4013      	ands	r3, r2
 8006098:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800609a:	68bb      	ldr	r3, [r7, #8]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	460b      	mov	r3, r1
 80060b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	fa22 f303 	lsr.w	r3, r2, r3
 80060d8:	01db      	lsls	r3, r3, #7
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4013      	ands	r3, r2
 80060f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060f6:	68bb      	ldr	r3, [r7, #8]
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	f003 0301 	and.w	r3, r3, #1
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006156:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006158:	2300      	movs	r3, #0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	460b      	mov	r3, r1
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	333c      	adds	r3, #60	; 0x3c
 800617e:	3304      	adds	r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4a26      	ldr	r2, [pc, #152]	; (8006220 <USB_EP0_OutStart+0xb8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d90a      	bls.n	80061a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800619c:	d101      	bne.n	80061a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e037      	b.n	8006212 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a8:	461a      	mov	r2, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d0:	f043 0318 	orr.w	r3, r3, #24
 80061d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80061e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10f      	bne.n	8006210 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800620e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	4f54300a 	.word	0x4f54300a

08006224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3301      	adds	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	4a13      	ldr	r2, [pc, #76]	; (8006284 <USB_CoreReset+0x60>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d901      	bls.n	8006240 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e01a      	b.n	8006276 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	2b00      	cmp	r3, #0
 8006246:	daf3      	bge.n	8006230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	f043 0201 	orr.w	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	4a09      	ldr	r2, [pc, #36]	; (8006284 <USB_CoreReset+0x60>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d901      	bls.n	8006268 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e006      	b.n	8006276 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d0f1      	beq.n	8006258 <USB_CoreReset+0x34>

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	00030d40 	.word	0x00030d40

08006288 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	460b      	mov	r3, r1
 8006292:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006294:	f44f 708e 	mov.w	r0, #284	; 0x11c
 8006298:	f002 f95c 	bl	8008554 <USBD_static_malloc>
 800629c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80062ac:	2302      	movs	r3, #2
 80062ae:	e066      	b.n	800637e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7c1b      	ldrb	r3, [r3, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d119      	bne.n	80062f4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062c4:	2202      	movs	r2, #2
 80062c6:	2181      	movs	r1, #129	; 0x81
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f002 f820 	bl	800830e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d8:	2202      	movs	r2, #2
 80062da:	2101      	movs	r1, #1
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f002 f816 	bl	800830e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2210      	movs	r2, #16
 80062ee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80062f2:	e016      	b.n	8006322 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	2202      	movs	r2, #2
 80062f8:	2181      	movs	r1, #129	; 0x81
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f002 f807 	bl	800830e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006306:	2340      	movs	r3, #64	; 0x40
 8006308:	2202      	movs	r2, #2
 800630a:	2101      	movs	r1, #1
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 fffe 	bl	800830e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2210      	movs	r2, #16
 800631e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006322:	2308      	movs	r3, #8
 8006324:	2203      	movs	r2, #3
 8006326:	2182      	movs	r1, #130	; 0x82
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fff0 	bl	800830e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  hcdc->RxState = 0U;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	7c1b      	ldrb	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800635e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006362:	2101      	movs	r1, #1
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f002 f8c1 	bl	80084ec <USBD_LL_PrepareReceive>
 800636a:	e007      	b.n	800637c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006372:	2340      	movs	r3, #64	; 0x40
 8006374:	2101      	movs	r1, #1
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f002 f8b8 	bl	80084ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006392:	2181      	movs	r1, #129	; 0x81
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 ffe0 	bl	800835a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80063a0:	2101      	movs	r1, #1
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 ffd9 	bl	800835a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80063b0:	2182      	movs	r1, #130	; 0x82
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f001 ffd1 	bl	800835a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00e      	beq.n	80063f0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063e2:	4618      	mov	r0, r3
 80063e4:	f002 f8c4 	bl	8008570 <USBD_static_free>
    pdev->pClassData = NULL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800640c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006420:	2303      	movs	r3, #3
 8006422:	e0af      	b.n	8006584 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800642c:	2b00      	cmp	r3, #0
 800642e:	d03f      	beq.n	80064b0 <USBD_CDC_Setup+0xb4>
 8006430:	2b20      	cmp	r3, #32
 8006432:	f040 809f 	bne.w	8006574 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	88db      	ldrh	r3, [r3, #6]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d02e      	beq.n	800649c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b25b      	sxtb	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	da16      	bge.n	8006476 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006454:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	88d2      	ldrh	r2, [r2, #6]
 800645a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	88db      	ldrh	r3, [r3, #6]
 8006460:	2b07      	cmp	r3, #7
 8006462:	bf28      	it	cs
 8006464:	2307      	movcs	r3, #7
 8006466:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	89fa      	ldrh	r2, [r7, #14]
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fb19 	bl	8007aa6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006474:	e085      	b.n	8006582 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	785a      	ldrb	r2, [r3, #1]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	88db      	ldrh	r3, [r3, #6]
 8006484:	b2da      	uxtb	r2, r3
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800648c:	6939      	ldr	r1, [r7, #16]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	88db      	ldrh	r3, [r3, #6]
 8006492:	461a      	mov	r2, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fb32 	bl	8007afe <USBD_CtlPrepareRx>
      break;
 800649a:	e072      	b.n	8006582 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	7850      	ldrb	r0, [r2, #1]
 80064a8:	2200      	movs	r2, #0
 80064aa:	6839      	ldr	r1, [r7, #0]
 80064ac:	4798      	blx	r3
      break;
 80064ae:	e068      	b.n	8006582 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	2b0b      	cmp	r3, #11
 80064b6:	d852      	bhi.n	800655e <USBD_CDC_Setup+0x162>
 80064b8:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <USBD_CDC_Setup+0xc4>)
 80064ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064be:	bf00      	nop
 80064c0:	080064f1 	.word	0x080064f1
 80064c4:	0800656d 	.word	0x0800656d
 80064c8:	0800655f 	.word	0x0800655f
 80064cc:	0800655f 	.word	0x0800655f
 80064d0:	0800655f 	.word	0x0800655f
 80064d4:	0800655f 	.word	0x0800655f
 80064d8:	0800655f 	.word	0x0800655f
 80064dc:	0800655f 	.word	0x0800655f
 80064e0:	0800655f 	.word	0x0800655f
 80064e4:	0800655f 	.word	0x0800655f
 80064e8:	0800651b 	.word	0x0800651b
 80064ec:	08006545 	.word	0x08006545
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d107      	bne.n	800650c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064fc:	f107 030a 	add.w	r3, r7, #10
 8006500:	2202      	movs	r2, #2
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 face 	bl	8007aa6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800650a:	e032      	b.n	8006572 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 fa58 	bl	80079c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006514:	2303      	movs	r3, #3
 8006516:	75fb      	strb	r3, [r7, #23]
          break;
 8006518:	e02b      	b.n	8006572 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b03      	cmp	r3, #3
 8006524:	d107      	bne.n	8006536 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006526:	f107 030d 	add.w	r3, r7, #13
 800652a:	2201      	movs	r2, #1
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f001 fab9 	bl	8007aa6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006534:	e01d      	b.n	8006572 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f001 fa43 	bl	80079c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800653e:	2303      	movs	r3, #3
 8006540:	75fb      	strb	r3, [r7, #23]
          break;
 8006542:	e016      	b.n	8006572 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b03      	cmp	r3, #3
 800654e:	d00f      	beq.n	8006570 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006550:	6839      	ldr	r1, [r7, #0]
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f001 fa36 	bl	80079c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006558:	2303      	movs	r3, #3
 800655a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800655c:	e008      	b.n	8006570 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f001 fa2f 	bl	80079c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006566:	2303      	movs	r3, #3
 8006568:	75fb      	strb	r3, [r7, #23]
          break;
 800656a:	e002      	b.n	8006572 <USBD_CDC_Setup+0x176>
          break;
 800656c:	bf00      	nop
 800656e:	e008      	b.n	8006582 <USBD_CDC_Setup+0x186>
          break;
 8006570:	bf00      	nop
      }
      break;
 8006572:	e006      	b.n	8006582 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 fa24 	bl	80079c4 <USBD_CtlError>
      ret = USBD_FAIL;
 800657c:	2303      	movs	r3, #3
 800657e:	75fb      	strb	r3, [r7, #23]
      break;
 8006580:	bf00      	nop
  }

  return (uint8_t)ret;
 8006582:	7dfb      	ldrb	r3, [r7, #23]
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800659e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e04f      	b.n	800664e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80065b6:	78fa      	ldrb	r2, [r7, #3]
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	3318      	adds	r3, #24
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d029      	beq.n	8006620 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80065cc:	78fa      	ldrb	r2, [r7, #3]
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	3318      	adds	r3, #24
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	78f9      	ldrb	r1, [r7, #3]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	460b      	mov	r3, r1
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	1a5b      	subs	r3, r3, r1
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4403      	add	r3, r0
 80065ec:	3344      	adds	r3, #68	; 0x44
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80065f4:	fb03 f301 	mul.w	r3, r3, r1
 80065f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d110      	bne.n	8006620 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80065fe:	78fa      	ldrb	r2, [r7, #3]
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	3318      	adds	r3, #24
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006612:	78f9      	ldrb	r1, [r7, #3]
 8006614:	2300      	movs	r3, #0
 8006616:	2200      	movs	r2, #0
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 ff46 	bl	80084aa <USBD_LL_Transmit>
 800661e:	e015      	b.n	800664c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	f8d2 0108 	ldr.w	r0, [r2, #264]	; 0x108
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	f502 7188 	add.w	r1, r2, #272	; 0x110
 8006648:	78fa      	ldrb	r2, [r7, #3]
 800664a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006668:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	e015      	b.n	80066a4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 ff56 	bl	800852e <USBD_LL_GetRxDataSize>
 8006682:	4602      	mov	r2, r0
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 800669e:	4611      	mov	r1, r2
 80066a0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e01b      	b.n	80066fe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <USBD_CDC_EP0_RxReady+0x50>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 80066d6:	2bff      	cmp	r3, #255	; 0xff
 80066d8:	d010      	beq.n	80066fc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f892 0100 	ldrb.w	r0, [r2, #256]	; 0x100
                                                      (uint8_t *)hcdc->data,
 80066e8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	f892 2101 	ldrb.w	r2, [r2, #257]	; 0x101
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066f0:	b292      	uxth	r2, r2
 80066f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	22ff      	movs	r2, #255	; 0xff
 80066f8:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }

  return (uint8_t)USBD_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2243      	movs	r2, #67	; 0x43
 8006714:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006716:	4b03      	ldr	r3, [pc, #12]	; (8006724 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	2000009c 	.word	0x2000009c

08006728 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2243      	movs	r2, #67	; 0x43
 8006734:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006736:	4b03      	ldr	r3, [pc, #12]	; (8006744 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006738:	4618      	mov	r0, r3
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	20000058 	.word	0x20000058

08006748 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2243      	movs	r2, #67	; 0x43
 8006754:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006756:	4b03      	ldr	r3, [pc, #12]	; (8006764 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	200000e0 	.word	0x200000e0

08006768 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	220a      	movs	r2, #10
 8006774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006776:	4b03      	ldr	r3, [pc, #12]	; (8006784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006778:	4618      	mov	r0, r3
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	20000014 	.word	0x20000014

08006788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006798:	2303      	movs	r3, #3
 800679a:	e004      	b.n	80067a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b087      	sub	sp, #28
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067c4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e008      	b.n	80067e2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  hcdc->TxLength = length;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

  return (uint8_t)USBD_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006806:	2303      	movs	r3, #3
 8006808:	e004      	b.n	8006814 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  return (uint8_t)USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800682e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800683e:	2303      	movs	r3, #3
 8006840:	e01a      	b.n	8006878 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8006848:	2b00      	cmp	r3, #0
 800684a:	d114      	bne.n	8006876 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2201      	movs	r2, #1
 8006850:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800686a:	2181      	movs	r1, #129	; 0x81
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 fe1c 	bl	80084aa <USBD_LL_Transmit>

    ret = USBD_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800688e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	e016      	b.n	80068cc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	7c1b      	ldrb	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80068ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b0:	2101      	movs	r1, #1
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f001 fe1a 	bl	80084ec <USBD_LL_PrepareReceive>
 80068b8:	e007      	b.n	80068ca <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80068c0:	2340      	movs	r3, #64	; 0x40
 80068c2:	2101      	movs	r1, #1
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fe11 	bl	80084ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	4613      	mov	r3, r2
 80068e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e01f      	b.n	800692c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	79fa      	ldrb	r2, [r7, #7]
 800691e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f001 fc8d 	bl	8008240 <USBD_LL_Init>
 8006926:	4603      	mov	r3, r0
 8006928:	75fb      	strb	r3, [r7, #23]

  return ret;
 800692a:	7dfb      	ldrb	r3, [r7, #23]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3718      	adds	r7, #24
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006948:	2303      	movs	r3, #3
 800694a:	e016      	b.n	800697a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006968:	f107 020e 	add.w	r2, r7, #14
 800696c:	4610      	mov	r0, r2
 800696e:	4798      	blx	r3
 8006970:	4602      	mov	r2, r0
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 fca4 	bl	80082d8 <USBD_LL_Start>
 8006990:	4603      	mov	r3, r0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069bc:	2303      	movs	r3, #3
 80069be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	4611      	mov	r1, r2
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	4798      	blx	r3
 80069da:	4603      	mov	r3, r0
 80069dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069de:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	78fa      	ldrb	r2, [r7, #3]
 8006a08:	4611      	mov	r1, r2
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	4798      	blx	r3
  }

  return USBD_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a28:	6839      	ldr	r1, [r7, #0]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 ff90 	bl	8007950 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006a3e:	461a      	mov	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a4c:	f003 031f 	and.w	r3, r3, #31
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d01a      	beq.n	8006a8a <USBD_LL_SetupStage+0x72>
 8006a54:	2b02      	cmp	r3, #2
 8006a56:	d822      	bhi.n	8006a9e <USBD_LL_SetupStage+0x86>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <USBD_LL_SetupStage+0x4a>
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d00a      	beq.n	8006a76 <USBD_LL_SetupStage+0x5e>
 8006a60:	e01d      	b.n	8006a9e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fa62 	bl	8006f34 <USBD_StdDevReq>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]
      break;
 8006a74:	e020      	b.n	8006ab8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fac6 	bl	8007010 <USBD_StdItfReq>
 8006a84:	4603      	mov	r3, r0
 8006a86:	73fb      	strb	r3, [r7, #15]
      break;
 8006a88:	e016      	b.n	8006ab8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fb05 	bl	80070a2 <USBD_StdEPReq>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9c:	e00c      	b.n	8006ab8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006aa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 fc73 	bl	8008398 <USBD_LL_StallEP>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ab6:	bf00      	nop
  }

  return ret;
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b086      	sub	sp, #24
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	460b      	mov	r3, r1
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d138      	bne.n	8006b48 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006adc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d14a      	bne.n	8006b7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d913      	bls.n	8006b1c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	1ad2      	subs	r2, r2, r3
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	bf28      	it	cs
 8006b0e:	4613      	movcs	r3, r2
 8006b10:	461a      	mov	r2, r3
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f001 f80f 	bl	8007b38 <USBD_CtlContinueRx>
 8006b1a:	e030      	b.n	8006b7e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d10b      	bne.n	8006b40 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f001 f80a 	bl	8007b5a <USBD_CtlSendStatus>
 8006b46:	e01a      	b.n	8006b7e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b03      	cmp	r3, #3
 8006b52:	d114      	bne.n	8006b7e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	7afa      	ldrb	r2, [r7, #11]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	4798      	blx	r3
 8006b70:	4603      	mov	r3, r0
 8006b72:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d001      	beq.n	8006b7e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	e000      	b.n	8006b80 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3718      	adds	r7, #24
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	460b      	mov	r3, r1
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b96:	7afb      	ldrb	r3, [r7, #11]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d16b      	bne.n	8006c74 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3314      	adds	r3, #20
 8006ba0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d156      	bne.n	8006c5a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d914      	bls.n	8006be2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	1ad2      	subs	r2, r2, r3
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6879      	ldr	r1, [r7, #4]
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 ff84 	bl	8007adc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f001 fc86 	bl	80084ec <USBD_LL_PrepareReceive>
 8006be0:	e03b      	b.n	8006c5a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d11c      	bne.n	8006c28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d316      	bcc.n	8006c28 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d20f      	bcs.n	8006c28 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 ff65 	bl	8007adc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2100      	movs	r1, #0
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f001 fc63 	bl	80084ec <USBD_LL_PrepareReceive>
 8006c26:	e018      	b.n	8006c5a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b03      	cmp	r3, #3
 8006c32:	d10b      	bne.n	8006c4c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c4c:	2180      	movs	r1, #128	; 0x80
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f001 fba2 	bl	8008398 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 ff93 	bl	8007b80 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d122      	bne.n	8006caa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7ff fe98 	bl	800699a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c72:	e01a      	b.n	8006caa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b03      	cmp	r3, #3
 8006c7e:	d114      	bne.n	8006caa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00e      	beq.n	8006caa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	7afa      	ldrb	r2, [r7, #11]
 8006c96:	4611      	mov	r1, r2
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	4798      	blx	r3
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	e000      	b.n	8006cac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e02f      	b.n	8006d48 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00f      	beq.n	8006d12 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6852      	ldr	r2, [r2, #4]
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d12:	2340      	movs	r3, #64	; 0x40
 8006d14:	2200      	movs	r2, #0
 8006d16:	2100      	movs	r1, #0
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 faf8 	bl	800830e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2240      	movs	r2, #64	; 0x40
 8006d2a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d2e:	2340      	movs	r3, #64	; 0x40
 8006d30:	2200      	movs	r2, #0
 8006d32:	2180      	movs	r1, #128	; 0x80
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 faea 	bl	800830e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3708      	adds	r7, #8
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	460b      	mov	r3, r1
 8006d5a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2204      	movs	r2, #4
 8006d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d106      	bne.n	8006dbe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e012      	b.n	8006e08 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d10b      	bne.n	8006e06 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	e014      	b.n	8006e54 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d10d      	bne.n	8006e52 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	78fa      	ldrb	r2, [r7, #3]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e014      	b.n	8006ea0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d10d      	bne.n	8006e9e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	78fa      	ldrb	r2, [r7, #3]
 8006e98:	4611      	mov	r1, r2
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d009      	beq.n	8006eec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6852      	ldr	r2, [r2, #4]
 8006ee4:	b2d2      	uxtb	r2, r2
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	4798      	blx	r3
  }

  return USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b087      	sub	sp, #28
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f14:	8a3b      	ldrh	r3, [r7, #16]
 8006f16:	021b      	lsls	r3, r3, #8
 8006f18:	b21a      	sxth	r2, r3
 8006f1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	b21b      	sxth	r3, r3
 8006f22:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f24:	89fb      	ldrh	r3, [r7, #14]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f4a:	2b40      	cmp	r3, #64	; 0x40
 8006f4c:	d005      	beq.n	8006f5a <USBD_StdDevReq+0x26>
 8006f4e:	2b40      	cmp	r3, #64	; 0x40
 8006f50:	d853      	bhi.n	8006ffa <USBD_StdDevReq+0xc6>
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00b      	beq.n	8006f6e <USBD_StdDevReq+0x3a>
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d14f      	bne.n	8006ffa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6c:	e04a      	b.n	8007004 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b09      	cmp	r3, #9
 8006f74:	d83b      	bhi.n	8006fee <USBD_StdDevReq+0xba>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <USBD_StdDevReq+0x48>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fd1 	.word	0x08006fd1
 8006f80:	08006fe5 	.word	0x08006fe5
 8006f84:	08006fef 	.word	0x08006fef
 8006f88:	08006fdb 	.word	0x08006fdb
 8006f8c:	08006fef 	.word	0x08006fef
 8006f90:	08006faf 	.word	0x08006faf
 8006f94:	08006fa5 	.word	0x08006fa5
 8006f98:	08006fef 	.word	0x08006fef
 8006f9c:	08006fc7 	.word	0x08006fc7
 8006fa0:	08006fb9 	.word	0x08006fb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f9de 	bl	8007368 <USBD_GetDescriptor>
          break;
 8006fac:	e024      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fb43 	bl	800763c <USBD_SetAddress>
          break;
 8006fb6:	e01f      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb82 	bl	80076c4 <USBD_SetConfig>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73fb      	strb	r3, [r7, #15]
          break;
 8006fc4:	e018      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fc21 	bl	8007810 <USBD_GetConfig>
          break;
 8006fce:	e013      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fc52 	bl	800787c <USBD_GetStatus>
          break;
 8006fd8:	e00e      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fc81 	bl	80078e4 <USBD_SetFeature>
          break;
 8006fe2:	e009      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fc90 	bl	800790c <USBD_ClrFeature>
          break;
 8006fec:	e004      	b.n	8006ff8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fce7 	bl	80079c4 <USBD_CtlError>
          break;
 8006ff6:	bf00      	nop
      }
      break;
 8006ff8:	e004      	b.n	8007004 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fce1 	bl	80079c4 <USBD_CtlError>
      break;
 8007002:	bf00      	nop
  }

  return ret;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop

08007010 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007026:	2b40      	cmp	r3, #64	; 0x40
 8007028:	d005      	beq.n	8007036 <USBD_StdItfReq+0x26>
 800702a:	2b40      	cmp	r3, #64	; 0x40
 800702c:	d82f      	bhi.n	800708e <USBD_StdItfReq+0x7e>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <USBD_StdItfReq+0x26>
 8007032:	2b20      	cmp	r3, #32
 8007034:	d12b      	bne.n	800708e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703c:	b2db      	uxtb	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	2b02      	cmp	r3, #2
 8007042:	d81d      	bhi.n	8007080 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	889b      	ldrh	r3, [r3, #4]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b01      	cmp	r3, #1
 800704c:	d813      	bhi.n	8007076 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	4798      	blx	r3
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	88db      	ldrh	r3, [r3, #6]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d110      	bne.n	800708a <USBD_StdItfReq+0x7a>
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10d      	bne.n	800708a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fd73 	bl	8007b5a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007074:	e009      	b.n	800708a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fca3 	bl	80079c4 <USBD_CtlError>
          break;
 800707e:	e004      	b.n	800708a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fc9e 	bl	80079c4 <USBD_CtlError>
          break;
 8007088:	e000      	b.n	800708c <USBD_StdItfReq+0x7c>
          break;
 800708a:	bf00      	nop
      }
      break;
 800708c:	e004      	b.n	8007098 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fc97 	bl	80079c4 <USBD_CtlError>
      break;
 8007096:	bf00      	nop
  }

  return ret;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80070ac:	2300      	movs	r3, #0
 80070ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	889b      	ldrh	r3, [r3, #4]
 80070b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070be:	2b40      	cmp	r3, #64	; 0x40
 80070c0:	d007      	beq.n	80070d2 <USBD_StdEPReq+0x30>
 80070c2:	2b40      	cmp	r3, #64	; 0x40
 80070c4:	f200 8145 	bhi.w	8007352 <USBD_StdEPReq+0x2b0>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00c      	beq.n	80070e6 <USBD_StdEPReq+0x44>
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	f040 8140 	bne.w	8007352 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	6839      	ldr	r1, [r7, #0]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	4798      	blx	r3
 80070e0:	4603      	mov	r3, r0
 80070e2:	73fb      	strb	r3, [r7, #15]
      break;
 80070e4:	e13a      	b.n	800735c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	785b      	ldrb	r3, [r3, #1]
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d007      	beq.n	80070fe <USBD_StdEPReq+0x5c>
 80070ee:	2b03      	cmp	r3, #3
 80070f0:	f300 8129 	bgt.w	8007346 <USBD_StdEPReq+0x2a4>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d07f      	beq.n	80071f8 <USBD_StdEPReq+0x156>
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d03c      	beq.n	8007176 <USBD_StdEPReq+0xd4>
 80070fc:	e123      	b.n	8007346 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d002      	beq.n	8007110 <USBD_StdEPReq+0x6e>
 800710a:	2b03      	cmp	r3, #3
 800710c:	d016      	beq.n	800713c <USBD_StdEPReq+0x9a>
 800710e:	e02c      	b.n	800716a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <USBD_StdEPReq+0x90>
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b80      	cmp	r3, #128	; 0x80
 800711a:	d00a      	beq.n	8007132 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f939 	bl	8008398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007126:	2180      	movs	r1, #128	; 0x80
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 f935 	bl	8008398 <USBD_LL_StallEP>
 800712e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007130:	e020      	b.n	8007174 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fc45 	bl	80079c4 <USBD_CtlError>
              break;
 800713a:	e01b      	b.n	8007174 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	885b      	ldrh	r3, [r3, #2]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10e      	bne.n	8007162 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007144:	7bbb      	ldrb	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <USBD_StdEPReq+0xc0>
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b80      	cmp	r3, #128	; 0x80
 800714e:	d008      	beq.n	8007162 <USBD_StdEPReq+0xc0>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	88db      	ldrh	r3, [r3, #6]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f001 f91b 	bl	8008398 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fcf9 	bl	8007b5a <USBD_CtlSendStatus>

              break;
 8007168:	e004      	b.n	8007174 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fc29 	bl	80079c4 <USBD_CtlError>
              break;
 8007172:	bf00      	nop
          }
          break;
 8007174:	e0ec      	b.n	8007350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d002      	beq.n	8007188 <USBD_StdEPReq+0xe6>
 8007182:	2b03      	cmp	r3, #3
 8007184:	d016      	beq.n	80071b4 <USBD_StdEPReq+0x112>
 8007186:	e030      	b.n	80071ea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <USBD_StdEPReq+0x108>
 800718e:	7bbb      	ldrb	r3, [r7, #14]
 8007190:	2b80      	cmp	r3, #128	; 0x80
 8007192:	d00a      	beq.n	80071aa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 f8fd 	bl	8008398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800719e:	2180      	movs	r1, #128	; 0x80
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f001 f8f9 	bl	8008398 <USBD_LL_StallEP>
 80071a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071a8:	e025      	b.n	80071f6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fc09 	bl	80079c4 <USBD_CtlError>
              break;
 80071b2:	e020      	b.n	80071f6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	885b      	ldrh	r3, [r3, #2]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d11b      	bne.n	80071f4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	4619      	mov	r1, r3
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f001 f903 	bl	80083d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fcc2 	bl	8007b5a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80071e8:	e004      	b.n	80071f4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fbe9 	bl	80079c4 <USBD_CtlError>
              break;
 80071f2:	e000      	b.n	80071f6 <USBD_StdEPReq+0x154>
              break;
 80071f4:	bf00      	nop
          }
          break;
 80071f6:	e0ab      	b.n	8007350 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d002      	beq.n	800720a <USBD_StdEPReq+0x168>
 8007204:	2b03      	cmp	r3, #3
 8007206:	d032      	beq.n	800726e <USBD_StdEPReq+0x1cc>
 8007208:	e097      	b.n	800733a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d007      	beq.n	8007220 <USBD_StdEPReq+0x17e>
 8007210:	7bbb      	ldrb	r3, [r7, #14]
 8007212:	2b80      	cmp	r3, #128	; 0x80
 8007214:	d004      	beq.n	8007220 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fbd3 	bl	80079c4 <USBD_CtlError>
                break;
 800721e:	e091      	b.n	8007344 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	da0b      	bge.n	8007240 <USBD_StdEPReq+0x19e>
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	3310      	adds	r3, #16
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4413      	add	r3, r2
 800723c:	3304      	adds	r3, #4
 800723e:	e00b      	b.n	8007258 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	4413      	add	r3, r2
 8007256:	3304      	adds	r3, #4
 8007258:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2202      	movs	r2, #2
 8007264:	4619      	mov	r1, r3
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fc1d 	bl	8007aa6 <USBD_CtlSendData>
              break;
 800726c:	e06a      	b.n	8007344 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800726e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007272:	2b00      	cmp	r3, #0
 8007274:	da11      	bge.n	800729a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	f003 020f 	and.w	r2, r3, #15
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	3324      	adds	r3, #36	; 0x24
 800728a:	881b      	ldrh	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d117      	bne.n	80072c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fb96 	bl	80079c4 <USBD_CtlError>
                  break;
 8007298:	e054      	b.n	8007344 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	f003 020f 	and.w	r2, r3, #15
 80072a0:	6879      	ldr	r1, [r7, #4]
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	440b      	add	r3, r1
 80072ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d104      	bne.n	80072c0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fb83 	bl	80079c4 <USBD_CtlError>
                  break;
 80072be:	e041      	b.n	8007344 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	da0b      	bge.n	80072e0 <USBD_StdEPReq+0x23e>
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
 80072ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ce:	4613      	mov	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	4413      	add	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	3310      	adds	r3, #16
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	3304      	adds	r3, #4
 80072de:	e00b      	b.n	80072f8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	4413      	add	r3, r2
 80072f6:	3304      	adds	r3, #4
 80072f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072fa:	7bbb      	ldrb	r3, [r7, #14]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <USBD_StdEPReq+0x264>
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b80      	cmp	r3, #128	; 0x80
 8007304:	d103      	bne.n	800730e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2200      	movs	r2, #0
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	e00e      	b.n	800732c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800730e:	7bbb      	ldrb	r3, [r7, #14]
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 f87e 	bl	8008414 <USBD_LL_IsStallEP>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2201      	movs	r2, #1
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e002      	b.n	800732c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2202      	movs	r2, #2
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fbb7 	bl	8007aa6 <USBD_CtlSendData>
              break;
 8007338:	e004      	b.n	8007344 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fb41 	bl	80079c4 <USBD_CtlError>
              break;
 8007342:	bf00      	nop
          }
          break;
 8007344:	e004      	b.n	8007350 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fb3b 	bl	80079c4 <USBD_CtlError>
          break;
 800734e:	bf00      	nop
      }
      break;
 8007350:	e004      	b.n	800735c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8007352:	6839      	ldr	r1, [r7, #0]
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fb35 	bl	80079c4 <USBD_CtlError>
      break;
 800735a:	bf00      	nop
  }

  return ret;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	885b      	ldrh	r3, [r3, #2]
 8007382:	0a1b      	lsrs	r3, r3, #8
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	2b06      	cmp	r3, #6
 800738a:	f200 8128 	bhi.w	80075de <USBD_GetDescriptor+0x276>
 800738e:	a201      	add	r2, pc, #4	; (adr r2, 8007394 <USBD_GetDescriptor+0x2c>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073b1 	.word	0x080073b1
 8007398:	080073c9 	.word	0x080073c9
 800739c:	08007409 	.word	0x08007409
 80073a0:	080075df 	.word	0x080075df
 80073a4:	080075df 	.word	0x080075df
 80073a8:	0800757f 	.word	0x0800757f
 80073ac:	080075ab 	.word	0x080075ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	7c12      	ldrb	r2, [r2, #16]
 80073bc:	f107 0108 	add.w	r1, r7, #8
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
 80073c4:	60f8      	str	r0, [r7, #12]
      break;
 80073c6:	e112      	b.n	80075ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	7c1b      	ldrb	r3, [r3, #16]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10d      	bne.n	80073ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d8:	f107 0208 	add.w	r2, r7, #8
 80073dc:	4610      	mov	r0, r2
 80073de:	4798      	blx	r3
 80073e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3301      	adds	r3, #1
 80073e6:	2202      	movs	r2, #2
 80073e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073ea:	e100      	b.n	80075ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f4:	f107 0208 	add.w	r2, r7, #8
 80073f8:	4610      	mov	r0, r2
 80073fa:	4798      	blx	r3
 80073fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	3301      	adds	r3, #1
 8007402:	2202      	movs	r2, #2
 8007404:	701a      	strb	r2, [r3, #0]
      break;
 8007406:	e0f2      	b.n	80075ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	885b      	ldrh	r3, [r3, #2]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b05      	cmp	r3, #5
 8007410:	f200 80ac 	bhi.w	800756c <USBD_GetDescriptor+0x204>
 8007414:	a201      	add	r2, pc, #4	; (adr r2, 800741c <USBD_GetDescriptor+0xb4>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	08007435 	.word	0x08007435
 8007420:	08007469 	.word	0x08007469
 8007424:	0800749d 	.word	0x0800749d
 8007428:	080074d1 	.word	0x080074d1
 800742c:	08007505 	.word	0x08007505
 8007430:	08007539 	.word	0x08007539
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	7c12      	ldrb	r2, [r2, #16]
 800744c:	f107 0108 	add.w	r1, r7, #8
 8007450:	4610      	mov	r0, r2
 8007452:	4798      	blx	r3
 8007454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007456:	e091      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fab2 	bl	80079c4 <USBD_CtlError>
            err++;
 8007460:	7afb      	ldrb	r3, [r7, #11]
 8007462:	3301      	adds	r3, #1
 8007464:	72fb      	strb	r3, [r7, #11]
          break;
 8007466:	e089      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	7c12      	ldrb	r2, [r2, #16]
 8007480:	f107 0108 	add.w	r1, r7, #8
 8007484:	4610      	mov	r0, r2
 8007486:	4798      	blx	r3
 8007488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800748a:	e077      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fa98 	bl	80079c4 <USBD_CtlError>
            err++;
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	3301      	adds	r3, #1
 8007498:	72fb      	strb	r3, [r7, #11]
          break;
 800749a:	e06f      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	7c12      	ldrb	r2, [r2, #16]
 80074b4:	f107 0108 	add.w	r1, r7, #8
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
 80074bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074be:	e05d      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fa7e 	bl	80079c4 <USBD_CtlError>
            err++;
 80074c8:	7afb      	ldrb	r3, [r7, #11]
 80074ca:	3301      	adds	r3, #1
 80074cc:	72fb      	strb	r3, [r7, #11]
          break;
 80074ce:	e055      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00b      	beq.n	80074f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	7c12      	ldrb	r2, [r2, #16]
 80074e8:	f107 0108 	add.w	r1, r7, #8
 80074ec:	4610      	mov	r0, r2
 80074ee:	4798      	blx	r3
 80074f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074f2:	e043      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa64 	bl	80079c4 <USBD_CtlError>
            err++;
 80074fc:	7afb      	ldrb	r3, [r7, #11]
 80074fe:	3301      	adds	r3, #1
 8007500:	72fb      	strb	r3, [r7, #11]
          break;
 8007502:	e03b      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007516:	695b      	ldr	r3, [r3, #20]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7c12      	ldrb	r2, [r2, #16]
 800751c:	f107 0108 	add.w	r1, r7, #8
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
 8007524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007526:	e029      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fa4a 	bl	80079c4 <USBD_CtlError>
            err++;
 8007530:	7afb      	ldrb	r3, [r7, #11]
 8007532:	3301      	adds	r3, #1
 8007534:	72fb      	strb	r3, [r7, #11]
          break;
 8007536:	e021      	b.n	800757c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00b      	beq.n	800755c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	7c12      	ldrb	r2, [r2, #16]
 8007550:	f107 0108 	add.w	r1, r7, #8
 8007554:	4610      	mov	r0, r2
 8007556:	4798      	blx	r3
 8007558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800755a:	e00f      	b.n	800757c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa30 	bl	80079c4 <USBD_CtlError>
            err++;
 8007564:	7afb      	ldrb	r3, [r7, #11]
 8007566:	3301      	adds	r3, #1
 8007568:	72fb      	strb	r3, [r7, #11]
          break;
 800756a:	e007      	b.n	800757c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa28 	bl	80079c4 <USBD_CtlError>
          err++;
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	3301      	adds	r3, #1
 8007578:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800757a:	bf00      	nop
      }
      break;
 800757c:	e037      	b.n	80075ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	7c1b      	ldrb	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800758c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800758e:	f107 0208 	add.w	r2, r7, #8
 8007592:	4610      	mov	r0, r2
 8007594:	4798      	blx	r3
 8007596:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007598:	e029      	b.n	80075ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fa11 	bl	80079c4 <USBD_CtlError>
        err++;
 80075a2:	7afb      	ldrb	r3, [r7, #11]
 80075a4:	3301      	adds	r3, #1
 80075a6:	72fb      	strb	r3, [r7, #11]
      break;
 80075a8:	e021      	b.n	80075ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	7c1b      	ldrb	r3, [r3, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d10d      	bne.n	80075ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	f107 0208 	add.w	r2, r7, #8
 80075be:	4610      	mov	r0, r2
 80075c0:	4798      	blx	r3
 80075c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3301      	adds	r3, #1
 80075c8:	2207      	movs	r2, #7
 80075ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075cc:	e00f      	b.n	80075ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f9f7 	bl	80079c4 <USBD_CtlError>
        err++;
 80075d6:	7afb      	ldrb	r3, [r7, #11]
 80075d8:	3301      	adds	r3, #1
 80075da:	72fb      	strb	r3, [r7, #11]
      break;
 80075dc:	e007      	b.n	80075ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f9ef 	bl	80079c4 <USBD_CtlError>
      err++;
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	3301      	adds	r3, #1
 80075ea:	72fb      	strb	r3, [r7, #11]
      break;
 80075ec:	bf00      	nop
  }

  if (err != 0U)
 80075ee:	7afb      	ldrb	r3, [r7, #11]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11e      	bne.n	8007632 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	88db      	ldrh	r3, [r3, #6]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d016      	beq.n	800762a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80075fc:	893b      	ldrh	r3, [r7, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00e      	beq.n	8007620 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	88da      	ldrh	r2, [r3, #6]
 8007606:	893b      	ldrh	r3, [r7, #8]
 8007608:	4293      	cmp	r3, r2
 800760a:	bf28      	it	cs
 800760c:	4613      	movcs	r3, r2
 800760e:	b29b      	uxth	r3, r3
 8007610:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007612:	893b      	ldrh	r3, [r7, #8]
 8007614:	461a      	mov	r2, r3
 8007616:	68f9      	ldr	r1, [r7, #12]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fa44 	bl	8007aa6 <USBD_CtlSendData>
 800761e:	e009      	b.n	8007634 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 f9ce 	bl	80079c4 <USBD_CtlError>
 8007628:	e004      	b.n	8007634 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa95 	bl	8007b5a <USBD_CtlSendStatus>
 8007630:	e000      	b.n	8007634 <USBD_GetDescriptor+0x2cc>
    return;
 8007632:	bf00      	nop
  }
}
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop

0800763c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	889b      	ldrh	r3, [r3, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d131      	bne.n	80076b2 <USBD_SetAddress+0x76>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	88db      	ldrh	r3, [r3, #6]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d12d      	bne.n	80076b2 <USBD_SetAddress+0x76>
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	885b      	ldrh	r3, [r3, #2]
 800765a:	2b7f      	cmp	r3, #127	; 0x7f
 800765c:	d829      	bhi.n	80076b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	885b      	ldrh	r3, [r3, #2]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007668:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b03      	cmp	r3, #3
 8007674:	d104      	bne.n	8007680 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f9a3 	bl	80079c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767e:	e01d      	b.n	80076bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7bfa      	ldrb	r2, [r7, #15]
 8007684:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 feed 	bl	800846c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa61 	bl	8007b5a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a6:	e009      	b.n	80076bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b0:	e004      	b.n	80076bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076b2:	6839      	ldr	r1, [r7, #0]
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 f985 	bl	80079c4 <USBD_CtlError>
  }
}
 80076ba:	bf00      	nop
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	4b4c      	ldr	r3, [pc, #304]	; (800780c <USBD_SetConfig+0x148>)
 80076da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076dc:	4b4b      	ldr	r3, [pc, #300]	; (800780c <USBD_SetConfig+0x148>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d905      	bls.n	80076f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f96c 	bl	80079c4 <USBD_CtlError>
    return USBD_FAIL;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e088      	b.n	8007802 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d002      	beq.n	8007702 <USBD_SetConfig+0x3e>
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d025      	beq.n	800774c <USBD_SetConfig+0x88>
 8007700:	e071      	b.n	80077e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007702:	4b42      	ldr	r3, [pc, #264]	; (800780c <USBD_SetConfig+0x148>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d01c      	beq.n	8007744 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800770a:	4b40      	ldr	r3, [pc, #256]	; (800780c <USBD_SetConfig+0x148>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007714:	4b3d      	ldr	r3, [pc, #244]	; (800780c <USBD_SetConfig+0x148>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff f948 	bl	80069b0 <USBD_SetClassConfig>
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d004      	beq.n	8007734 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800772a:	6839      	ldr	r1, [r7, #0]
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f949 	bl	80079c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007732:	e065      	b.n	8007800 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fa10 	bl	8007b5a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2203      	movs	r2, #3
 800773e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007742:	e05d      	b.n	8007800 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fa08 	bl	8007b5a <USBD_CtlSendStatus>
      break;
 800774a:	e059      	b.n	8007800 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800774c:	4b2f      	ldr	r3, [pc, #188]	; (800780c <USBD_SetConfig+0x148>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d112      	bne.n	800777a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800775c:	4b2b      	ldr	r3, [pc, #172]	; (800780c <USBD_SetConfig+0x148>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007766:	4b29      	ldr	r3, [pc, #164]	; (800780c <USBD_SetConfig+0x148>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f7ff f93b 	bl	80069e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f9f1 	bl	8007b5a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007778:	e042      	b.n	8007800 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800777a:	4b24      	ldr	r3, [pc, #144]	; (800780c <USBD_SetConfig+0x148>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	429a      	cmp	r2, r3
 8007786:	d02a      	beq.n	80077de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff f929 	bl	80069e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007796:	4b1d      	ldr	r3, [pc, #116]	; (800780c <USBD_SetConfig+0x148>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077a0:	4b1a      	ldr	r3, [pc, #104]	; (800780c <USBD_SetConfig+0x148>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	4619      	mov	r1, r3
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff f902 	bl	80069b0 <USBD_SetClassConfig>
 80077ac:	4603      	mov	r3, r0
 80077ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00f      	beq.n	80077d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f903 	bl	80079c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff f90e 	bl	80069e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077d4:	e014      	b.n	8007800 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f9bf 	bl	8007b5a <USBD_CtlSendStatus>
      break;
 80077dc:	e010      	b.n	8007800 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f9bb 	bl	8007b5a <USBD_CtlSendStatus>
      break;
 80077e4:	e00c      	b.n	8007800 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f8eb 	bl	80079c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <USBD_SetConfig+0x148>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff f8f7 	bl	80069e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80077fa:	2303      	movs	r3, #3
 80077fc:	73fb      	strb	r3, [r7, #15]
      break;
 80077fe:	bf00      	nop
  }

  return ret;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	2000020c 	.word	0x2000020c

08007810 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	88db      	ldrh	r3, [r3, #6]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d004      	beq.n	800782c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8cd 	bl	80079c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800782a:	e023      	b.n	8007874 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	dc02      	bgt.n	800783e <USBD_GetConfig+0x2e>
 8007838:	2b00      	cmp	r3, #0
 800783a:	dc03      	bgt.n	8007844 <USBD_GetConfig+0x34>
 800783c:	e015      	b.n	800786a <USBD_GetConfig+0x5a>
 800783e:	2b03      	cmp	r3, #3
 8007840:	d00b      	beq.n	800785a <USBD_GetConfig+0x4a>
 8007842:	e012      	b.n	800786a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	3308      	adds	r3, #8
 800784e:	2201      	movs	r2, #1
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f927 	bl	8007aa6 <USBD_CtlSendData>
        break;
 8007858:	e00c      	b.n	8007874 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3304      	adds	r3, #4
 800785e:	2201      	movs	r2, #1
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f91f 	bl	8007aa6 <USBD_CtlSendData>
        break;
 8007868:	e004      	b.n	8007874 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f8a9 	bl	80079c4 <USBD_CtlError>
        break;
 8007872:	bf00      	nop
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800788c:	b2db      	uxtb	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	2b02      	cmp	r3, #2
 8007892:	d81e      	bhi.n	80078d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	88db      	ldrh	r3, [r3, #6]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d004      	beq.n	80078a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f890 	bl	80079c4 <USBD_CtlError>
        break;
 80078a4:	e01a      	b.n	80078dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f043 0202 	orr.w	r2, r3, #2
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	330c      	adds	r3, #12
 80078c6:	2202      	movs	r2, #2
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f8eb 	bl	8007aa6 <USBD_CtlSendData>
      break;
 80078d0:	e004      	b.n	80078dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f875 	bl	80079c4 <USBD_CtlError>
      break;
 80078da:	bf00      	nop
  }
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	885b      	ldrh	r3, [r3, #2]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d106      	bne.n	8007904 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f92b 	bl	8007b5a <USBD_CtlSendStatus>
  }
}
 8007904:	bf00      	nop
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	2b02      	cmp	r3, #2
 8007922:	d80b      	bhi.n	800793c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	885b      	ldrh	r3, [r3, #2]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d10c      	bne.n	8007946 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f910 	bl	8007b5a <USBD_CtlSendStatus>
      }
      break;
 800793a:	e004      	b.n	8007946 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f840 	bl	80079c4 <USBD_CtlError>
      break;
 8007944:	e000      	b.n	8007948 <USBD_ClrFeature+0x3c>
      break;
 8007946:	bf00      	nop
  }
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	781a      	ldrb	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3301      	adds	r3, #1
 800796a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	781a      	ldrb	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	3301      	adds	r3, #1
 8007978:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7ff fabb 	bl	8006ef6 <SWAPBYTE>
 8007980:	4603      	mov	r3, r0
 8007982:	461a      	mov	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3301      	adds	r3, #1
 800798c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff faae 	bl	8006ef6 <SWAPBYTE>
 800799a:	4603      	mov	r3, r0
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3301      	adds	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80079ae:	68f8      	ldr	r0, [r7, #12]
 80079b0:	f7ff faa1 	bl	8006ef6 <SWAPBYTE>
 80079b4:	4603      	mov	r3, r0
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	80da      	strh	r2, [r3, #6]
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fce1 	bl	8008398 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079d6:	2100      	movs	r1, #0
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fcdd 	bl	8008398 <USBD_LL_StallEP>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d036      	beq.n	8007a6a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007a00:	6938      	ldr	r0, [r7, #16]
 8007a02:	f000 f836 	bl	8007a72 <USBD_GetLen>
 8007a06:	4603      	mov	r3, r0
 8007a08:	3301      	adds	r3, #1
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	4413      	add	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	7812      	ldrb	r2, [r2, #0]
 8007a1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a20:	7dfb      	ldrb	r3, [r7, #23]
 8007a22:	3301      	adds	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	2203      	movs	r2, #3
 8007a2e:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	3301      	adds	r3, #1
 8007a34:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a36:	e013      	b.n	8007a60 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	3301      	adds	r3, #1
 8007a48:	613b      	str	r3, [r7, #16]
    idx++;
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	4413      	add	r3, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e7      	bne.n	8007a38 <USBD_GetString+0x52>
 8007a68:	e000      	b.n	8007a6c <USBD_GetString+0x86>
    return;
 8007a6a:	bf00      	nop
  }
}
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a82:	e005      	b.n	8007a90 <USBD_GetLen+0x1e>
  {
    len++;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	3301      	adds	r3, #1
 8007a88:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1f5      	bne.n	8007a84 <USBD_GetLen+0x12>
  }

  return len;
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	2100      	movs	r1, #0
 8007acc:	68f8      	ldr	r0, [r7, #12]
 8007ace:	f000 fcec 	bl	80084aa <USBD_LL_Transmit>

  return USBD_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	2100      	movs	r1, #0
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fcdb 	bl	80084aa <USBD_LL_Transmit>

  return USBD_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	2100      	movs	r1, #0
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fcdf 	bl	80084ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fcce 	bl	80084ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2204      	movs	r2, #4
 8007b66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fc9a 	bl	80084aa <USBD_LL_Transmit>

  return USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2205      	movs	r2, #5
 8007b8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b90:	2300      	movs	r3, #0
 8007b92:	2200      	movs	r2, #0
 8007b94:	2100      	movs	r1, #0
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fca8 	bl	80084ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007bac:	2200      	movs	r2, #0
 8007bae:	4912      	ldr	r1, [pc, #72]	; (8007bf8 <MX_USB_DEVICE_Init+0x50>)
 8007bb0:	4812      	ldr	r0, [pc, #72]	; (8007bfc <MX_USB_DEVICE_Init+0x54>)
 8007bb2:	f7fe fe8f 	bl	80068d4 <USBD_Init>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007bbc:	f7f8 fefc 	bl	80009b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007bc0:	490f      	ldr	r1, [pc, #60]	; (8007c00 <MX_USB_DEVICE_Init+0x58>)
 8007bc2:	480e      	ldr	r0, [pc, #56]	; (8007bfc <MX_USB_DEVICE_Init+0x54>)
 8007bc4:	f7fe feb6 	bl	8006934 <USBD_RegisterClass>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bce:	f7f8 fef3 	bl	80009b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007bd2:	490c      	ldr	r1, [pc, #48]	; (8007c04 <MX_USB_DEVICE_Init+0x5c>)
 8007bd4:	4809      	ldr	r0, [pc, #36]	; (8007bfc <MX_USB_DEVICE_Init+0x54>)
 8007bd6:	f7fe fdd7 	bl	8006788 <USBD_CDC_RegisterInterface>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007be0:	f7f8 feea 	bl	80009b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007be4:	4805      	ldr	r0, [pc, #20]	; (8007bfc <MX_USB_DEVICE_Init+0x54>)
 8007be6:	f7fe fecc 	bl	8006982 <USBD_Start>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bf0:	f7f8 fee2 	bl	80009b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bf4:	bf00      	nop
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000138 	.word	0x20000138
 8007bfc:	20000468 	.word	0x20000468
 8007c00:	20000020 	.word	0x20000020
 8007c04:	20000124 	.word	0x20000124

08007c08 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4905      	ldr	r1, [pc, #20]	; (8007c24 <CDC_Init_FS+0x1c>)
 8007c10:	4805      	ldr	r0, [pc, #20]	; (8007c28 <CDC_Init_FS+0x20>)
 8007c12:	f7fe fdce 	bl	80067b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c16:	4905      	ldr	r1, [pc, #20]	; (8007c2c <CDC_Init_FS+0x24>)
 8007c18:	4803      	ldr	r0, [pc, #12]	; (8007c28 <CDC_Init_FS+0x20>)
 8007c1a:	f7fe fde8 	bl	80067ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20000f38 	.word	0x20000f38
 8007c28:	20000468 	.word	0x20000468
 8007c2c:	20000738 	.word	0x20000738

08007c30 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c34:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	6039      	str	r1, [r7, #0]
 8007c4a:	71fb      	strb	r3, [r7, #7]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b23      	cmp	r3, #35	; 0x23
 8007c54:	d84a      	bhi.n	8007cec <CDC_Control_FS+0xac>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <CDC_Control_FS+0x1c>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007ced 	.word	0x08007ced
 8007c60:	08007ced 	.word	0x08007ced
 8007c64:	08007ced 	.word	0x08007ced
 8007c68:	08007ced 	.word	0x08007ced
 8007c6c:	08007ced 	.word	0x08007ced
 8007c70:	08007ced 	.word	0x08007ced
 8007c74:	08007ced 	.word	0x08007ced
 8007c78:	08007ced 	.word	0x08007ced
 8007c7c:	08007ced 	.word	0x08007ced
 8007c80:	08007ced 	.word	0x08007ced
 8007c84:	08007ced 	.word	0x08007ced
 8007c88:	08007ced 	.word	0x08007ced
 8007c8c:	08007ced 	.word	0x08007ced
 8007c90:	08007ced 	.word	0x08007ced
 8007c94:	08007ced 	.word	0x08007ced
 8007c98:	08007ced 	.word	0x08007ced
 8007c9c:	08007ced 	.word	0x08007ced
 8007ca0:	08007ced 	.word	0x08007ced
 8007ca4:	08007ced 	.word	0x08007ced
 8007ca8:	08007ced 	.word	0x08007ced
 8007cac:	08007ced 	.word	0x08007ced
 8007cb0:	08007ced 	.word	0x08007ced
 8007cb4:	08007ced 	.word	0x08007ced
 8007cb8:	08007ced 	.word	0x08007ced
 8007cbc:	08007ced 	.word	0x08007ced
 8007cc0:	08007ced 	.word	0x08007ced
 8007cc4:	08007ced 	.word	0x08007ced
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007ced 	.word	0x08007ced
 8007cd0:	08007ced 	.word	0x08007ced
 8007cd4:	08007ced 	.word	0x08007ced
 8007cd8:	08007ced 	.word	0x08007ced
 8007cdc:	08007ced 	.word	0x08007ced
 8007ce0:	08007ced 	.word	0x08007ced
 8007ce4:	08007ced 	.word	0x08007ced
 8007ce8:	08007ced 	.word	0x08007ced
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007cec:	bf00      	nop
  }

  return (USBD_OK);
 8007cee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4805      	ldr	r0, [pc, #20]	; (8007d20 <CDC_Receive_FS+0x24>)
 8007d0a:	f7fe fd70 	bl	80067ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d0e:	4804      	ldr	r0, [pc, #16]	; (8007d20 <CDC_Receive_FS+0x24>)
 8007d10:	f7fe fdb6 	bl	8006880 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	20000468 	.word	0x20000468

08007d24 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007d34:	4b0d      	ldr	r3, [pc, #52]	; (8007d6c <CDC_Transmit_FS+0x48>)
 8007d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e00b      	b.n	8007d62 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d4a:	887b      	ldrh	r3, [r7, #2]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4806      	ldr	r0, [pc, #24]	; (8007d6c <CDC_Transmit_FS+0x48>)
 8007d52:	f7fe fd2e 	bl	80067b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d56:	4805      	ldr	r0, [pc, #20]	; (8007d6c <CDC_Transmit_FS+0x48>)
 8007d58:	f7fe fd62 	bl	8006820 <USBD_CDC_TransmitPacket>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000468 	.word	0x20000468

08007d70 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
	...

08007d94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	6039      	str	r1, [r7, #0]
 8007d9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2212      	movs	r2, #18
 8007da4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007da6:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20000154 	.word	0x20000154

08007db8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	6039      	str	r1, [r7, #0]
 8007dc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007dca:	4b03      	ldr	r3, [pc, #12]	; (8007dd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	20000168 	.word	0x20000168

08007ddc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	4603      	mov	r3, r0
 8007de4:	6039      	str	r1, [r7, #0]
 8007de6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d105      	bne.n	8007dfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	4907      	ldr	r1, [pc, #28]	; (8007e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8007df2:	4808      	ldr	r0, [pc, #32]	; (8007e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8007df4:	f7ff fdf7 	bl	80079e6 <USBD_GetString>
 8007df8:	e004      	b.n	8007e04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	4904      	ldr	r1, [pc, #16]	; (8007e10 <USBD_FS_ProductStrDescriptor+0x34>)
 8007dfe:	4805      	ldr	r0, [pc, #20]	; (8007e14 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e00:	f7ff fdf1 	bl	80079e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e04:	4b02      	ldr	r3, [pc, #8]	; (8007e10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20001738 	.word	0x20001738
 8007e14:	08008f00 	.word	0x08008f00

08007e18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	4603      	mov	r3, r0
 8007e20:	6039      	str	r1, [r7, #0]
 8007e22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	4904      	ldr	r1, [pc, #16]	; (8007e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e28:	4804      	ldr	r0, [pc, #16]	; (8007e3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e2a:	f7ff fddc 	bl	80079e6 <USBD_GetString>
  return USBD_StrDesc;
 8007e2e:	4b02      	ldr	r3, [pc, #8]	; (8007e38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20001738 	.word	0x20001738
 8007e3c:	08008f18 	.word	0x08008f18

08007e40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	6039      	str	r1, [r7, #0]
 8007e4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	221a      	movs	r2, #26
 8007e50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e52:	f000 f843 	bl	8007edc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e56:	4b02      	ldr	r3, [pc, #8]	; (8007e60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	2000016c 	.word	0x2000016c

08007e64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	6039      	str	r1, [r7, #0]
 8007e6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d105      	bne.n	8007e82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	4907      	ldr	r1, [pc, #28]	; (8007e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e7a:	4808      	ldr	r0, [pc, #32]	; (8007e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e7c:	f7ff fdb3 	bl	80079e6 <USBD_GetString>
 8007e80:	e004      	b.n	8007e8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	4904      	ldr	r1, [pc, #16]	; (8007e98 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e86:	4805      	ldr	r0, [pc, #20]	; (8007e9c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e88:	f7ff fdad 	bl	80079e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e8c:	4b02      	ldr	r3, [pc, #8]	; (8007e98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20001738 	.word	0x20001738
 8007e9c:	08008f2c 	.word	0x08008f2c

08007ea0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007eac:	79fb      	ldrb	r3, [r7, #7]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	4907      	ldr	r1, [pc, #28]	; (8007ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007eb6:	4808      	ldr	r0, [pc, #32]	; (8007ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007eb8:	f7ff fd95 	bl	80079e6 <USBD_GetString>
 8007ebc:	e004      	b.n	8007ec8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	4904      	ldr	r1, [pc, #16]	; (8007ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ec2:	4805      	ldr	r0, [pc, #20]	; (8007ed8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ec4:	f7ff fd8f 	bl	80079e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ec8:	4b02      	ldr	r3, [pc, #8]	; (8007ed4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20001738 	.word	0x20001738
 8007ed8:	08008f38 	.word	0x08008f38

08007edc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ee2:	4b0f      	ldr	r3, [pc, #60]	; (8007f20 <Get_SerialNum+0x44>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ee8:	4b0e      	ldr	r3, [pc, #56]	; (8007f24 <Get_SerialNum+0x48>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eee:	4b0e      	ldr	r3, [pc, #56]	; (8007f28 <Get_SerialNum+0x4c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f02:	2208      	movs	r2, #8
 8007f04:	4909      	ldr	r1, [pc, #36]	; (8007f2c <Get_SerialNum+0x50>)
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f000 f814 	bl	8007f34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	4908      	ldr	r1, [pc, #32]	; (8007f30 <Get_SerialNum+0x54>)
 8007f10:	68b8      	ldr	r0, [r7, #8]
 8007f12:	f000 f80f 	bl	8007f34 <IntToUnicode>
  }
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	1fff7a10 	.word	0x1fff7a10
 8007f24:	1fff7a14 	.word	0x1fff7a14
 8007f28:	1fff7a18 	.word	0x1fff7a18
 8007f2c:	2000016e 	.word	0x2000016e
 8007f30:	2000017e 	.word	0x2000017e

08007f34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	60f8      	str	r0, [r7, #12]
 8007f3c:	60b9      	str	r1, [r7, #8]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	75fb      	strb	r3, [r7, #23]
 8007f4a:	e027      	b.n	8007f9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	0f1b      	lsrs	r3, r3, #28
 8007f50:	2b09      	cmp	r3, #9
 8007f52:	d80b      	bhi.n	8007f6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	0f1b      	lsrs	r3, r3, #28
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	005b      	lsls	r3, r3, #1
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	440b      	add	r3, r1
 8007f64:	3230      	adds	r2, #48	; 0x30
 8007f66:	b2d2      	uxtb	r2, r2
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e00a      	b.n	8007f82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	0f1b      	lsrs	r3, r3, #28
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4619      	mov	r1, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3237      	adds	r2, #55	; 0x37
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	011b      	lsls	r3, r3, #4
 8007f86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	68ba      	ldr	r2, [r7, #8]
 8007f90:	4413      	add	r3, r2
 8007f92:	2200      	movs	r2, #0
 8007f94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	75fb      	strb	r3, [r7, #23]
 8007f9c:	7dfa      	ldrb	r2, [r7, #23]
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d3d3      	bcc.n	8007f4c <IntToUnicode+0x18>
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	371c      	adds	r7, #28
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr
	...

08007fb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	609a      	str	r2, [r3, #8]
 8007fc8:	60da      	str	r2, [r3, #12]
 8007fca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fd4:	d13a      	bne.n	800804c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	4b1e      	ldr	r3, [pc, #120]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	4a1d      	ldr	r2, [pc, #116]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fe6:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ff2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008000:	2303      	movs	r3, #3
 8008002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008004:	230a      	movs	r3, #10
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008008:	f107 0314 	add.w	r3, r7, #20
 800800c:	4619      	mov	r1, r3
 800800e:	4812      	ldr	r0, [pc, #72]	; (8008058 <HAL_PCD_MspInit+0xa4>)
 8008010:	f7fa fb06 	bl	8002620 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008014:	4b0f      	ldr	r3, [pc, #60]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8008016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008018:	4a0e      	ldr	r2, [pc, #56]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 800801a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801e:	6353      	str	r3, [r2, #52]	; 0x34
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8008026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008028:	4a0a      	ldr	r2, [pc, #40]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 800802a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800802e:	6453      	str	r3, [r2, #68]	; 0x44
 8008030:	4b08      	ldr	r3, [pc, #32]	; (8008054 <HAL_PCD_MspInit+0xa0>)
 8008032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800803c:	2200      	movs	r2, #0
 800803e:	2100      	movs	r1, #0
 8008040:	2043      	movs	r0, #67	; 0x43
 8008042:	f7fa fab6 	bl	80025b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008046:	2043      	movs	r0, #67	; 0x43
 8008048:	f7fa facf 	bl	80025ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800804c:	bf00      	nop
 800804e:	3728      	adds	r7, #40	; 0x28
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40023800 	.word	0x40023800
 8008058:	40020000 	.word	0x40020000

0800805c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008070:	4619      	mov	r1, r3
 8008072:	4610      	mov	r0, r2
 8008074:	f7fe fcd0 	bl	8006a18 <USBD_LL_SetupStage>
}
 8008078:	bf00      	nop
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	460b      	mov	r3, r1
 800808a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	6879      	ldr	r1, [r7, #4]
 8008096:	4613      	mov	r3, r2
 8008098:	00db      	lsls	r3, r3, #3
 800809a:	1a9b      	subs	r3, r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	440b      	add	r3, r1
 80080a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	4619      	mov	r1, r3
 80080aa:	f7fe fd0a 	bl	8006ac2 <USBD_LL_DataOutStage>
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}

080080b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b082      	sub	sp, #8
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80080c8:	78fa      	ldrb	r2, [r7, #3]
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4613      	mov	r3, r2
 80080ce:	00db      	lsls	r3, r3, #3
 80080d0:	1a9b      	subs	r3, r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	440b      	add	r3, r1
 80080d6:	3348      	adds	r3, #72	; 0x48
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	4619      	mov	r1, r3
 80080de:	f7fe fd53 	bl	8006b88 <USBD_LL_DataInStage>
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080f8:	4618      	mov	r0, r3
 80080fa:	f7fe fe67 	bl	8006dcc <USBD_LL_SOF>
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800810e:	2301      	movs	r3, #1
 8008110:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d102      	bne.n	8008120 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
 800811e:	e008      	b.n	8008132 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b02      	cmp	r3, #2
 8008126:	d102      	bne.n	800812e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008128:	2301      	movs	r3, #1
 800812a:	73fb      	strb	r3, [r7, #15]
 800812c:	e001      	b.n	8008132 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800812e:	f7f8 fc43 	bl	80009b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008138:	7bfa      	ldrb	r2, [r7, #15]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fe07 	bl	8006d50 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fdb3 	bl	8006cb4 <USBD_LL_Reset>
}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fe02 	bl	8006d70 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6812      	ldr	r2, [r2, #0]
 800817a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800817e:	f043 0301 	orr.w	r3, r3, #1
 8008182:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800818c:	4b04      	ldr	r3, [pc, #16]	; (80081a0 <HAL_PCD_SuspendCallback+0x48>)
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	4a03      	ldr	r2, [pc, #12]	; (80081a0 <HAL_PCD_SuspendCallback+0x48>)
 8008192:	f043 0306 	orr.w	r3, r3, #6
 8008196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008198:	bf00      	nop
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	e000ed00 	.word	0xe000ed00

080081a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe fdf2 	bl	8006d9c <USBD_LL_Resume>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fe40 	bl	8006e5c <USBD_LL_IsoOUTIncomplete>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	4611      	mov	r1, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe fe08 	bl	8006e10 <USBD_LL_IsoINIncomplete>
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fe46 	bl	8006ea8 <USBD_LL_DevConnected>
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe fe43 	bl	8006ebe <USBD_LL_DevDisconnected>
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d13c      	bne.n	80082ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008250:	4a20      	ldr	r2, [pc, #128]	; (80082d4 <USBD_LL_Init+0x94>)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a1e      	ldr	r2, [pc, #120]	; (80082d4 <USBD_LL_Init+0x94>)
 800825c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008260:	4b1c      	ldr	r3, [pc, #112]	; (80082d4 <USBD_LL_Init+0x94>)
 8008262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008268:	4b1a      	ldr	r3, [pc, #104]	; (80082d4 <USBD_LL_Init+0x94>)
 800826a:	2204      	movs	r2, #4
 800826c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800826e:	4b19      	ldr	r3, [pc, #100]	; (80082d4 <USBD_LL_Init+0x94>)
 8008270:	2202      	movs	r2, #2
 8008272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008274:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <USBD_LL_Init+0x94>)
 8008276:	2200      	movs	r2, #0
 8008278:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800827a:	4b16      	ldr	r3, [pc, #88]	; (80082d4 <USBD_LL_Init+0x94>)
 800827c:	2202      	movs	r2, #2
 800827e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008280:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <USBD_LL_Init+0x94>)
 8008282:	2200      	movs	r2, #0
 8008284:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008286:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <USBD_LL_Init+0x94>)
 8008288:	2200      	movs	r2, #0
 800828a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800828c:	4b11      	ldr	r3, [pc, #68]	; (80082d4 <USBD_LL_Init+0x94>)
 800828e:	2200      	movs	r2, #0
 8008290:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008292:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <USBD_LL_Init+0x94>)
 8008294:	2200      	movs	r2, #0
 8008296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008298:	4b0e      	ldr	r3, [pc, #56]	; (80082d4 <USBD_LL_Init+0x94>)
 800829a:	2200      	movs	r2, #0
 800829c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800829e:	480d      	ldr	r0, [pc, #52]	; (80082d4 <USBD_LL_Init+0x94>)
 80082a0:	f7fa fb97 	bl	80029d2 <HAL_PCD_Init>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082aa:	f7f8 fb85 	bl	80009b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082ae:	2180      	movs	r1, #128	; 0x80
 80082b0:	4808      	ldr	r0, [pc, #32]	; (80082d4 <USBD_LL_Init+0x94>)
 80082b2:	f7fb fcf4 	bl	8003c9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082b6:	2240      	movs	r2, #64	; 0x40
 80082b8:	2100      	movs	r1, #0
 80082ba:	4806      	ldr	r0, [pc, #24]	; (80082d4 <USBD_LL_Init+0x94>)
 80082bc:	f7fb fca8 	bl	8003c10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80082c0:	2280      	movs	r2, #128	; 0x80
 80082c2:	2101      	movs	r1, #1
 80082c4:	4803      	ldr	r0, [pc, #12]	; (80082d4 <USBD_LL_Init+0x94>)
 80082c6:	f7fb fca3 	bl	8003c10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	20001938 	.word	0x20001938

080082d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fa fc8c 	bl	8002c0c <HAL_PCD_Start>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f942 	bl	8008584 <USBD_Get_USB_Status>
 8008300:	4603      	mov	r3, r0
 8008302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008304:	7bbb      	ldrb	r3, [r7, #14]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	4608      	mov	r0, r1
 8008318:	4611      	mov	r1, r2
 800831a:	461a      	mov	r2, r3
 800831c:	4603      	mov	r3, r0
 800831e:	70fb      	strb	r3, [r7, #3]
 8008320:	460b      	mov	r3, r1
 8008322:	70bb      	strb	r3, [r7, #2]
 8008324:	4613      	mov	r3, r2
 8008326:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800832c:	2300      	movs	r3, #0
 800832e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008336:	78bb      	ldrb	r3, [r7, #2]
 8008338:	883a      	ldrh	r2, [r7, #0]
 800833a:	78f9      	ldrb	r1, [r7, #3]
 800833c:	f7fb f870 	bl	8003420 <HAL_PCD_EP_Open>
 8008340:	4603      	mov	r3, r0
 8008342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	4618      	mov	r0, r3
 8008348:	f000 f91c 	bl	8008584 <USBD_Get_USB_Status>
 800834c:	4603      	mov	r3, r0
 800834e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008350:	7bbb      	ldrb	r3, [r7, #14]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	460b      	mov	r3, r1
 8008364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f7fb f8b9 	bl	80034f0 <HAL_PCD_EP_Close>
 800837e:	4603      	mov	r3, r0
 8008380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 f8fd 	bl	8008584 <USBD_Get_USB_Status>
 800838a:	4603      	mov	r3, r0
 800838c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800838e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a4:	2300      	movs	r3, #0
 80083a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083b2:	78fa      	ldrb	r2, [r7, #3]
 80083b4:	4611      	mov	r1, r2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fb f991 	bl	80036de <HAL_PCD_EP_SetStall>
 80083bc:	4603      	mov	r3, r0
 80083be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083c0:	7bfb      	ldrb	r3, [r7, #15]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f000 f8de 	bl	8008584 <USBD_Get_USB_Status>
 80083c8:	4603      	mov	r3, r0
 80083ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	460b      	mov	r3, r1
 80083e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	4611      	mov	r1, r2
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fb f9d6 	bl	80037a6 <HAL_PCD_EP_ClrStall>
 80083fa:	4603      	mov	r3, r0
 80083fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f8bf 	bl	8008584 <USBD_Get_USB_Status>
 8008406:	4603      	mov	r3, r0
 8008408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800840a:	7bbb      	ldrb	r3, [r7, #14]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008426:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800842c:	2b00      	cmp	r3, #0
 800842e:	da0b      	bge.n	8008448 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008430:	78fb      	ldrb	r3, [r7, #3]
 8008432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	4613      	mov	r3, r2
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	1a9b      	subs	r3, r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	333e      	adds	r3, #62	; 0x3e
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	e00b      	b.n	8008460 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800844e:	68f9      	ldr	r1, [r7, #12]
 8008450:	4613      	mov	r3, r2
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800845e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008486:	78fa      	ldrb	r2, [r7, #3]
 8008488:	4611      	mov	r1, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f7fa ffa3 	bl	80033d6 <HAL_PCD_SetAddress>
 8008490:	4603      	mov	r3, r0
 8008492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008494:	7bfb      	ldrb	r3, [r7, #15]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 f874 	bl	8008584 <USBD_Get_USB_Status>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	607a      	str	r2, [r7, #4]
 80084b4:	603b      	str	r3, [r7, #0]
 80084b6:	460b      	mov	r3, r1
 80084b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80084c8:	7af9      	ldrb	r1, [r7, #11]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	f7fb f8bc 	bl	800364a <HAL_PCD_EP_Transmit>
 80084d2:	4603      	mov	r3, r0
 80084d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 f853 	bl	8008584 <USBD_Get_USB_Status>
 80084de:	4603      	mov	r3, r0
 80084e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	607a      	str	r2, [r7, #4]
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	460b      	mov	r3, r1
 80084fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800850a:	7af9      	ldrb	r1, [r7, #11]
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	f7fb f838 	bl	8003584 <HAL_PCD_EP_Receive>
 8008514:	4603      	mov	r3, r0
 8008516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008518:	7dfb      	ldrb	r3, [r7, #23]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f832 	bl	8008584 <USBD_Get_USB_Status>
 8008520:	4603      	mov	r3, r0
 8008522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008524:	7dbb      	ldrb	r3, [r7, #22]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
 8008536:	460b      	mov	r3, r1
 8008538:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008540:	78fa      	ldrb	r2, [r7, #3]
 8008542:	4611      	mov	r1, r2
 8008544:	4618      	mov	r0, r3
 8008546:	f7fb f868 	bl	800361a <HAL_PCD_EP_GetRxCount>
 800854a:	4603      	mov	r3, r0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800855c:	4b03      	ldr	r3, [pc, #12]	; (800856c <USBD_static_malloc+0x18>)
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	20000210 	.word	0x20000210

08008570 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]

}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008584:	b480      	push	{r7}
 8008586:	b085      	sub	sp, #20
 8008588:	af00      	add	r7, sp, #0
 800858a:	4603      	mov	r3, r0
 800858c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	2b03      	cmp	r3, #3
 8008596:	d817      	bhi.n	80085c8 <USBD_Get_USB_Status+0x44>
 8008598:	a201      	add	r2, pc, #4	; (adr r2, 80085a0 <USBD_Get_USB_Status+0x1c>)
 800859a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859e:	bf00      	nop
 80085a0:	080085b1 	.word	0x080085b1
 80085a4:	080085b7 	.word	0x080085b7
 80085a8:	080085bd 	.word	0x080085bd
 80085ac:	080085c3 	.word	0x080085c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
    break;
 80085b4:	e00b      	b.n	80085ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085b6:	2303      	movs	r3, #3
 80085b8:	73fb      	strb	r3, [r7, #15]
    break;
 80085ba:	e008      	b.n	80085ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085bc:	2301      	movs	r3, #1
 80085be:	73fb      	strb	r3, [r7, #15]
    break;
 80085c0:	e005      	b.n	80085ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085c2:	2303      	movs	r3, #3
 80085c4:	73fb      	strb	r3, [r7, #15]
    break;
 80085c6:	e002      	b.n	80085ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80085c8:	2303      	movs	r3, #3
 80085ca:	73fb      	strb	r3, [r7, #15]
    break;
 80085cc:	bf00      	nop
  }
  return usb_status;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <__errno>:
 80085dc:	4b01      	ldr	r3, [pc, #4]	; (80085e4 <__errno+0x8>)
 80085de:	6818      	ldr	r0, [r3, #0]
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	20000188 	.word	0x20000188

080085e8 <__libc_init_array>:
 80085e8:	b570      	push	{r4, r5, r6, lr}
 80085ea:	4d0d      	ldr	r5, [pc, #52]	; (8008620 <__libc_init_array+0x38>)
 80085ec:	4c0d      	ldr	r4, [pc, #52]	; (8008624 <__libc_init_array+0x3c>)
 80085ee:	1b64      	subs	r4, r4, r5
 80085f0:	10a4      	asrs	r4, r4, #2
 80085f2:	2600      	movs	r6, #0
 80085f4:	42a6      	cmp	r6, r4
 80085f6:	d109      	bne.n	800860c <__libc_init_array+0x24>
 80085f8:	4d0b      	ldr	r5, [pc, #44]	; (8008628 <__libc_init_array+0x40>)
 80085fa:	4c0c      	ldr	r4, [pc, #48]	; (800862c <__libc_init_array+0x44>)
 80085fc:	f000 fc4e 	bl	8008e9c <_init>
 8008600:	1b64      	subs	r4, r4, r5
 8008602:	10a4      	asrs	r4, r4, #2
 8008604:	2600      	movs	r6, #0
 8008606:	42a6      	cmp	r6, r4
 8008608:	d105      	bne.n	8008616 <__libc_init_array+0x2e>
 800860a:	bd70      	pop	{r4, r5, r6, pc}
 800860c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008610:	4798      	blx	r3
 8008612:	3601      	adds	r6, #1
 8008614:	e7ee      	b.n	80085f4 <__libc_init_array+0xc>
 8008616:	f855 3b04 	ldr.w	r3, [r5], #4
 800861a:	4798      	blx	r3
 800861c:	3601      	adds	r6, #1
 800861e:	e7f2      	b.n	8008606 <__libc_init_array+0x1e>
 8008620:	08008f9c 	.word	0x08008f9c
 8008624:	08008f9c 	.word	0x08008f9c
 8008628:	08008f9c 	.word	0x08008f9c
 800862c:	08008fa0 	.word	0x08008fa0

08008630 <memset>:
 8008630:	4402      	add	r2, r0
 8008632:	4603      	mov	r3, r0
 8008634:	4293      	cmp	r3, r2
 8008636:	d100      	bne.n	800863a <memset+0xa>
 8008638:	4770      	bx	lr
 800863a:	f803 1b01 	strb.w	r1, [r3], #1
 800863e:	e7f9      	b.n	8008634 <memset+0x4>

08008640 <siprintf>:
 8008640:	b40e      	push	{r1, r2, r3}
 8008642:	b500      	push	{lr}
 8008644:	b09c      	sub	sp, #112	; 0x70
 8008646:	ab1d      	add	r3, sp, #116	; 0x74
 8008648:	9002      	str	r0, [sp, #8]
 800864a:	9006      	str	r0, [sp, #24]
 800864c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008650:	4809      	ldr	r0, [pc, #36]	; (8008678 <siprintf+0x38>)
 8008652:	9107      	str	r1, [sp, #28]
 8008654:	9104      	str	r1, [sp, #16]
 8008656:	4909      	ldr	r1, [pc, #36]	; (800867c <siprintf+0x3c>)
 8008658:	f853 2b04 	ldr.w	r2, [r3], #4
 800865c:	9105      	str	r1, [sp, #20]
 800865e:	6800      	ldr	r0, [r0, #0]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	a902      	add	r1, sp, #8
 8008664:	f000 f868 	bl	8008738 <_svfiprintf_r>
 8008668:	9b02      	ldr	r3, [sp, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	b01c      	add	sp, #112	; 0x70
 8008670:	f85d eb04 	ldr.w	lr, [sp], #4
 8008674:	b003      	add	sp, #12
 8008676:	4770      	bx	lr
 8008678:	20000188 	.word	0x20000188
 800867c:	ffff0208 	.word	0xffff0208

08008680 <__ssputs_r>:
 8008680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008684:	688e      	ldr	r6, [r1, #8]
 8008686:	429e      	cmp	r6, r3
 8008688:	4682      	mov	sl, r0
 800868a:	460c      	mov	r4, r1
 800868c:	4690      	mov	r8, r2
 800868e:	461f      	mov	r7, r3
 8008690:	d838      	bhi.n	8008704 <__ssputs_r+0x84>
 8008692:	898a      	ldrh	r2, [r1, #12]
 8008694:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008698:	d032      	beq.n	8008700 <__ssputs_r+0x80>
 800869a:	6825      	ldr	r5, [r4, #0]
 800869c:	6909      	ldr	r1, [r1, #16]
 800869e:	eba5 0901 	sub.w	r9, r5, r1
 80086a2:	6965      	ldr	r5, [r4, #20]
 80086a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086ac:	3301      	adds	r3, #1
 80086ae:	444b      	add	r3, r9
 80086b0:	106d      	asrs	r5, r5, #1
 80086b2:	429d      	cmp	r5, r3
 80086b4:	bf38      	it	cc
 80086b6:	461d      	movcc	r5, r3
 80086b8:	0553      	lsls	r3, r2, #21
 80086ba:	d531      	bpl.n	8008720 <__ssputs_r+0xa0>
 80086bc:	4629      	mov	r1, r5
 80086be:	f000 fb47 	bl	8008d50 <_malloc_r>
 80086c2:	4606      	mov	r6, r0
 80086c4:	b950      	cbnz	r0, 80086dc <__ssputs_r+0x5c>
 80086c6:	230c      	movs	r3, #12
 80086c8:	f8ca 3000 	str.w	r3, [sl]
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	f04f 30ff 	mov.w	r0, #4294967295
 80086d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086dc:	6921      	ldr	r1, [r4, #16]
 80086de:	464a      	mov	r2, r9
 80086e0:	f000 fabe 	bl	8008c60 <memcpy>
 80086e4:	89a3      	ldrh	r3, [r4, #12]
 80086e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086ee:	81a3      	strh	r3, [r4, #12]
 80086f0:	6126      	str	r6, [r4, #16]
 80086f2:	6165      	str	r5, [r4, #20]
 80086f4:	444e      	add	r6, r9
 80086f6:	eba5 0509 	sub.w	r5, r5, r9
 80086fa:	6026      	str	r6, [r4, #0]
 80086fc:	60a5      	str	r5, [r4, #8]
 80086fe:	463e      	mov	r6, r7
 8008700:	42be      	cmp	r6, r7
 8008702:	d900      	bls.n	8008706 <__ssputs_r+0x86>
 8008704:	463e      	mov	r6, r7
 8008706:	4632      	mov	r2, r6
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	4641      	mov	r1, r8
 800870c:	f000 fab6 	bl	8008c7c <memmove>
 8008710:	68a3      	ldr	r3, [r4, #8]
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	1b9b      	subs	r3, r3, r6
 8008716:	4432      	add	r2, r6
 8008718:	60a3      	str	r3, [r4, #8]
 800871a:	6022      	str	r2, [r4, #0]
 800871c:	2000      	movs	r0, #0
 800871e:	e7db      	b.n	80086d8 <__ssputs_r+0x58>
 8008720:	462a      	mov	r2, r5
 8008722:	f000 fb6f 	bl	8008e04 <_realloc_r>
 8008726:	4606      	mov	r6, r0
 8008728:	2800      	cmp	r0, #0
 800872a:	d1e1      	bne.n	80086f0 <__ssputs_r+0x70>
 800872c:	6921      	ldr	r1, [r4, #16]
 800872e:	4650      	mov	r0, sl
 8008730:	f000 fabe 	bl	8008cb0 <_free_r>
 8008734:	e7c7      	b.n	80086c6 <__ssputs_r+0x46>
	...

08008738 <_svfiprintf_r>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	4698      	mov	r8, r3
 800873e:	898b      	ldrh	r3, [r1, #12]
 8008740:	061b      	lsls	r3, r3, #24
 8008742:	b09d      	sub	sp, #116	; 0x74
 8008744:	4607      	mov	r7, r0
 8008746:	460d      	mov	r5, r1
 8008748:	4614      	mov	r4, r2
 800874a:	d50e      	bpl.n	800876a <_svfiprintf_r+0x32>
 800874c:	690b      	ldr	r3, [r1, #16]
 800874e:	b963      	cbnz	r3, 800876a <_svfiprintf_r+0x32>
 8008750:	2140      	movs	r1, #64	; 0x40
 8008752:	f000 fafd 	bl	8008d50 <_malloc_r>
 8008756:	6028      	str	r0, [r5, #0]
 8008758:	6128      	str	r0, [r5, #16]
 800875a:	b920      	cbnz	r0, 8008766 <_svfiprintf_r+0x2e>
 800875c:	230c      	movs	r3, #12
 800875e:	603b      	str	r3, [r7, #0]
 8008760:	f04f 30ff 	mov.w	r0, #4294967295
 8008764:	e0d1      	b.n	800890a <_svfiprintf_r+0x1d2>
 8008766:	2340      	movs	r3, #64	; 0x40
 8008768:	616b      	str	r3, [r5, #20]
 800876a:	2300      	movs	r3, #0
 800876c:	9309      	str	r3, [sp, #36]	; 0x24
 800876e:	2320      	movs	r3, #32
 8008770:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008774:	f8cd 800c 	str.w	r8, [sp, #12]
 8008778:	2330      	movs	r3, #48	; 0x30
 800877a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008924 <_svfiprintf_r+0x1ec>
 800877e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008782:	f04f 0901 	mov.w	r9, #1
 8008786:	4623      	mov	r3, r4
 8008788:	469a      	mov	sl, r3
 800878a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800878e:	b10a      	cbz	r2, 8008794 <_svfiprintf_r+0x5c>
 8008790:	2a25      	cmp	r2, #37	; 0x25
 8008792:	d1f9      	bne.n	8008788 <_svfiprintf_r+0x50>
 8008794:	ebba 0b04 	subs.w	fp, sl, r4
 8008798:	d00b      	beq.n	80087b2 <_svfiprintf_r+0x7a>
 800879a:	465b      	mov	r3, fp
 800879c:	4622      	mov	r2, r4
 800879e:	4629      	mov	r1, r5
 80087a0:	4638      	mov	r0, r7
 80087a2:	f7ff ff6d 	bl	8008680 <__ssputs_r>
 80087a6:	3001      	adds	r0, #1
 80087a8:	f000 80aa 	beq.w	8008900 <_svfiprintf_r+0x1c8>
 80087ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ae:	445a      	add	r2, fp
 80087b0:	9209      	str	r2, [sp, #36]	; 0x24
 80087b2:	f89a 3000 	ldrb.w	r3, [sl]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 80a2 	beq.w	8008900 <_svfiprintf_r+0x1c8>
 80087bc:	2300      	movs	r3, #0
 80087be:	f04f 32ff 	mov.w	r2, #4294967295
 80087c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087c6:	f10a 0a01 	add.w	sl, sl, #1
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	9307      	str	r3, [sp, #28]
 80087ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087d2:	931a      	str	r3, [sp, #104]	; 0x68
 80087d4:	4654      	mov	r4, sl
 80087d6:	2205      	movs	r2, #5
 80087d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087dc:	4851      	ldr	r0, [pc, #324]	; (8008924 <_svfiprintf_r+0x1ec>)
 80087de:	f7f7 fcff 	bl	80001e0 <memchr>
 80087e2:	9a04      	ldr	r2, [sp, #16]
 80087e4:	b9d8      	cbnz	r0, 800881e <_svfiprintf_r+0xe6>
 80087e6:	06d0      	lsls	r0, r2, #27
 80087e8:	bf44      	itt	mi
 80087ea:	2320      	movmi	r3, #32
 80087ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087f0:	0711      	lsls	r1, r2, #28
 80087f2:	bf44      	itt	mi
 80087f4:	232b      	movmi	r3, #43	; 0x2b
 80087f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087fa:	f89a 3000 	ldrb.w	r3, [sl]
 80087fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008800:	d015      	beq.n	800882e <_svfiprintf_r+0xf6>
 8008802:	9a07      	ldr	r2, [sp, #28]
 8008804:	4654      	mov	r4, sl
 8008806:	2000      	movs	r0, #0
 8008808:	f04f 0c0a 	mov.w	ip, #10
 800880c:	4621      	mov	r1, r4
 800880e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008812:	3b30      	subs	r3, #48	; 0x30
 8008814:	2b09      	cmp	r3, #9
 8008816:	d94e      	bls.n	80088b6 <_svfiprintf_r+0x17e>
 8008818:	b1b0      	cbz	r0, 8008848 <_svfiprintf_r+0x110>
 800881a:	9207      	str	r2, [sp, #28]
 800881c:	e014      	b.n	8008848 <_svfiprintf_r+0x110>
 800881e:	eba0 0308 	sub.w	r3, r0, r8
 8008822:	fa09 f303 	lsl.w	r3, r9, r3
 8008826:	4313      	orrs	r3, r2
 8008828:	9304      	str	r3, [sp, #16]
 800882a:	46a2      	mov	sl, r4
 800882c:	e7d2      	b.n	80087d4 <_svfiprintf_r+0x9c>
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	1d19      	adds	r1, r3, #4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	9103      	str	r1, [sp, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	bfbb      	ittet	lt
 800883a:	425b      	neglt	r3, r3
 800883c:	f042 0202 	orrlt.w	r2, r2, #2
 8008840:	9307      	strge	r3, [sp, #28]
 8008842:	9307      	strlt	r3, [sp, #28]
 8008844:	bfb8      	it	lt
 8008846:	9204      	strlt	r2, [sp, #16]
 8008848:	7823      	ldrb	r3, [r4, #0]
 800884a:	2b2e      	cmp	r3, #46	; 0x2e
 800884c:	d10c      	bne.n	8008868 <_svfiprintf_r+0x130>
 800884e:	7863      	ldrb	r3, [r4, #1]
 8008850:	2b2a      	cmp	r3, #42	; 0x2a
 8008852:	d135      	bne.n	80088c0 <_svfiprintf_r+0x188>
 8008854:	9b03      	ldr	r3, [sp, #12]
 8008856:	1d1a      	adds	r2, r3, #4
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	9203      	str	r2, [sp, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	bfb8      	it	lt
 8008860:	f04f 33ff 	movlt.w	r3, #4294967295
 8008864:	3402      	adds	r4, #2
 8008866:	9305      	str	r3, [sp, #20]
 8008868:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008934 <_svfiprintf_r+0x1fc>
 800886c:	7821      	ldrb	r1, [r4, #0]
 800886e:	2203      	movs	r2, #3
 8008870:	4650      	mov	r0, sl
 8008872:	f7f7 fcb5 	bl	80001e0 <memchr>
 8008876:	b140      	cbz	r0, 800888a <_svfiprintf_r+0x152>
 8008878:	2340      	movs	r3, #64	; 0x40
 800887a:	eba0 000a 	sub.w	r0, r0, sl
 800887e:	fa03 f000 	lsl.w	r0, r3, r0
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	4303      	orrs	r3, r0
 8008886:	3401      	adds	r4, #1
 8008888:	9304      	str	r3, [sp, #16]
 800888a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800888e:	4826      	ldr	r0, [pc, #152]	; (8008928 <_svfiprintf_r+0x1f0>)
 8008890:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008894:	2206      	movs	r2, #6
 8008896:	f7f7 fca3 	bl	80001e0 <memchr>
 800889a:	2800      	cmp	r0, #0
 800889c:	d038      	beq.n	8008910 <_svfiprintf_r+0x1d8>
 800889e:	4b23      	ldr	r3, [pc, #140]	; (800892c <_svfiprintf_r+0x1f4>)
 80088a0:	bb1b      	cbnz	r3, 80088ea <_svfiprintf_r+0x1b2>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	3307      	adds	r3, #7
 80088a6:	f023 0307 	bic.w	r3, r3, #7
 80088aa:	3308      	adds	r3, #8
 80088ac:	9303      	str	r3, [sp, #12]
 80088ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088b0:	4433      	add	r3, r6
 80088b2:	9309      	str	r3, [sp, #36]	; 0x24
 80088b4:	e767      	b.n	8008786 <_svfiprintf_r+0x4e>
 80088b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088ba:	460c      	mov	r4, r1
 80088bc:	2001      	movs	r0, #1
 80088be:	e7a5      	b.n	800880c <_svfiprintf_r+0xd4>
 80088c0:	2300      	movs	r3, #0
 80088c2:	3401      	adds	r4, #1
 80088c4:	9305      	str	r3, [sp, #20]
 80088c6:	4619      	mov	r1, r3
 80088c8:	f04f 0c0a 	mov.w	ip, #10
 80088cc:	4620      	mov	r0, r4
 80088ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088d2:	3a30      	subs	r2, #48	; 0x30
 80088d4:	2a09      	cmp	r2, #9
 80088d6:	d903      	bls.n	80088e0 <_svfiprintf_r+0x1a8>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d0c5      	beq.n	8008868 <_svfiprintf_r+0x130>
 80088dc:	9105      	str	r1, [sp, #20]
 80088de:	e7c3      	b.n	8008868 <_svfiprintf_r+0x130>
 80088e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088e4:	4604      	mov	r4, r0
 80088e6:	2301      	movs	r3, #1
 80088e8:	e7f0      	b.n	80088cc <_svfiprintf_r+0x194>
 80088ea:	ab03      	add	r3, sp, #12
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	462a      	mov	r2, r5
 80088f0:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <_svfiprintf_r+0x1f8>)
 80088f2:	a904      	add	r1, sp, #16
 80088f4:	4638      	mov	r0, r7
 80088f6:	f3af 8000 	nop.w
 80088fa:	1c42      	adds	r2, r0, #1
 80088fc:	4606      	mov	r6, r0
 80088fe:	d1d6      	bne.n	80088ae <_svfiprintf_r+0x176>
 8008900:	89ab      	ldrh	r3, [r5, #12]
 8008902:	065b      	lsls	r3, r3, #25
 8008904:	f53f af2c 	bmi.w	8008760 <_svfiprintf_r+0x28>
 8008908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800890a:	b01d      	add	sp, #116	; 0x74
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008910:	ab03      	add	r3, sp, #12
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	462a      	mov	r2, r5
 8008916:	4b06      	ldr	r3, [pc, #24]	; (8008930 <_svfiprintf_r+0x1f8>)
 8008918:	a904      	add	r1, sp, #16
 800891a:	4638      	mov	r0, r7
 800891c:	f000 f87a 	bl	8008a14 <_printf_i>
 8008920:	e7eb      	b.n	80088fa <_svfiprintf_r+0x1c2>
 8008922:	bf00      	nop
 8008924:	08008f60 	.word	0x08008f60
 8008928:	08008f6a 	.word	0x08008f6a
 800892c:	00000000 	.word	0x00000000
 8008930:	08008681 	.word	0x08008681
 8008934:	08008f66 	.word	0x08008f66

08008938 <_printf_common>:
 8008938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800893c:	4616      	mov	r6, r2
 800893e:	4699      	mov	r9, r3
 8008940:	688a      	ldr	r2, [r1, #8]
 8008942:	690b      	ldr	r3, [r1, #16]
 8008944:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008948:	4293      	cmp	r3, r2
 800894a:	bfb8      	it	lt
 800894c:	4613      	movlt	r3, r2
 800894e:	6033      	str	r3, [r6, #0]
 8008950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008954:	4607      	mov	r7, r0
 8008956:	460c      	mov	r4, r1
 8008958:	b10a      	cbz	r2, 800895e <_printf_common+0x26>
 800895a:	3301      	adds	r3, #1
 800895c:	6033      	str	r3, [r6, #0]
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	0699      	lsls	r1, r3, #26
 8008962:	bf42      	ittt	mi
 8008964:	6833      	ldrmi	r3, [r6, #0]
 8008966:	3302      	addmi	r3, #2
 8008968:	6033      	strmi	r3, [r6, #0]
 800896a:	6825      	ldr	r5, [r4, #0]
 800896c:	f015 0506 	ands.w	r5, r5, #6
 8008970:	d106      	bne.n	8008980 <_printf_common+0x48>
 8008972:	f104 0a19 	add.w	sl, r4, #25
 8008976:	68e3      	ldr	r3, [r4, #12]
 8008978:	6832      	ldr	r2, [r6, #0]
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	42ab      	cmp	r3, r5
 800897e:	dc26      	bgt.n	80089ce <_printf_common+0x96>
 8008980:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008984:	1e13      	subs	r3, r2, #0
 8008986:	6822      	ldr	r2, [r4, #0]
 8008988:	bf18      	it	ne
 800898a:	2301      	movne	r3, #1
 800898c:	0692      	lsls	r2, r2, #26
 800898e:	d42b      	bmi.n	80089e8 <_printf_common+0xb0>
 8008990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008994:	4649      	mov	r1, r9
 8008996:	4638      	mov	r0, r7
 8008998:	47c0      	blx	r8
 800899a:	3001      	adds	r0, #1
 800899c:	d01e      	beq.n	80089dc <_printf_common+0xa4>
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	68e5      	ldr	r5, [r4, #12]
 80089a2:	6832      	ldr	r2, [r6, #0]
 80089a4:	f003 0306 	and.w	r3, r3, #6
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	bf08      	it	eq
 80089ac:	1aad      	subeq	r5, r5, r2
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	6922      	ldr	r2, [r4, #16]
 80089b2:	bf0c      	ite	eq
 80089b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089b8:	2500      	movne	r5, #0
 80089ba:	4293      	cmp	r3, r2
 80089bc:	bfc4      	itt	gt
 80089be:	1a9b      	subgt	r3, r3, r2
 80089c0:	18ed      	addgt	r5, r5, r3
 80089c2:	2600      	movs	r6, #0
 80089c4:	341a      	adds	r4, #26
 80089c6:	42b5      	cmp	r5, r6
 80089c8:	d11a      	bne.n	8008a00 <_printf_common+0xc8>
 80089ca:	2000      	movs	r0, #0
 80089cc:	e008      	b.n	80089e0 <_printf_common+0xa8>
 80089ce:	2301      	movs	r3, #1
 80089d0:	4652      	mov	r2, sl
 80089d2:	4649      	mov	r1, r9
 80089d4:	4638      	mov	r0, r7
 80089d6:	47c0      	blx	r8
 80089d8:	3001      	adds	r0, #1
 80089da:	d103      	bne.n	80089e4 <_printf_common+0xac>
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e4:	3501      	adds	r5, #1
 80089e6:	e7c6      	b.n	8008976 <_printf_common+0x3e>
 80089e8:	18e1      	adds	r1, r4, r3
 80089ea:	1c5a      	adds	r2, r3, #1
 80089ec:	2030      	movs	r0, #48	; 0x30
 80089ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089f2:	4422      	add	r2, r4
 80089f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089fc:	3302      	adds	r3, #2
 80089fe:	e7c7      	b.n	8008990 <_printf_common+0x58>
 8008a00:	2301      	movs	r3, #1
 8008a02:	4622      	mov	r2, r4
 8008a04:	4649      	mov	r1, r9
 8008a06:	4638      	mov	r0, r7
 8008a08:	47c0      	blx	r8
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	d0e6      	beq.n	80089dc <_printf_common+0xa4>
 8008a0e:	3601      	adds	r6, #1
 8008a10:	e7d9      	b.n	80089c6 <_printf_common+0x8e>
	...

08008a14 <_printf_i>:
 8008a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4691      	mov	r9, r2
 8008a1c:	7e27      	ldrb	r7, [r4, #24]
 8008a1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a20:	2f78      	cmp	r7, #120	; 0x78
 8008a22:	4680      	mov	r8, r0
 8008a24:	469a      	mov	sl, r3
 8008a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a2a:	d807      	bhi.n	8008a3c <_printf_i+0x28>
 8008a2c:	2f62      	cmp	r7, #98	; 0x62
 8008a2e:	d80a      	bhi.n	8008a46 <_printf_i+0x32>
 8008a30:	2f00      	cmp	r7, #0
 8008a32:	f000 80d8 	beq.w	8008be6 <_printf_i+0x1d2>
 8008a36:	2f58      	cmp	r7, #88	; 0x58
 8008a38:	f000 80a3 	beq.w	8008b82 <_printf_i+0x16e>
 8008a3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a44:	e03a      	b.n	8008abc <_printf_i+0xa8>
 8008a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a4a:	2b15      	cmp	r3, #21
 8008a4c:	d8f6      	bhi.n	8008a3c <_printf_i+0x28>
 8008a4e:	a001      	add	r0, pc, #4	; (adr r0, 8008a54 <_printf_i+0x40>)
 8008a50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008a54:	08008aad 	.word	0x08008aad
 8008a58:	08008ac1 	.word	0x08008ac1
 8008a5c:	08008a3d 	.word	0x08008a3d
 8008a60:	08008a3d 	.word	0x08008a3d
 8008a64:	08008a3d 	.word	0x08008a3d
 8008a68:	08008a3d 	.word	0x08008a3d
 8008a6c:	08008ac1 	.word	0x08008ac1
 8008a70:	08008a3d 	.word	0x08008a3d
 8008a74:	08008a3d 	.word	0x08008a3d
 8008a78:	08008a3d 	.word	0x08008a3d
 8008a7c:	08008a3d 	.word	0x08008a3d
 8008a80:	08008bcd 	.word	0x08008bcd
 8008a84:	08008af1 	.word	0x08008af1
 8008a88:	08008baf 	.word	0x08008baf
 8008a8c:	08008a3d 	.word	0x08008a3d
 8008a90:	08008a3d 	.word	0x08008a3d
 8008a94:	08008bef 	.word	0x08008bef
 8008a98:	08008a3d 	.word	0x08008a3d
 8008a9c:	08008af1 	.word	0x08008af1
 8008aa0:	08008a3d 	.word	0x08008a3d
 8008aa4:	08008a3d 	.word	0x08008a3d
 8008aa8:	08008bb7 	.word	0x08008bb7
 8008aac:	680b      	ldr	r3, [r1, #0]
 8008aae:	1d1a      	adds	r2, r3, #4
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	600a      	str	r2, [r1, #0]
 8008ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008abc:	2301      	movs	r3, #1
 8008abe:	e0a3      	b.n	8008c08 <_printf_i+0x1f4>
 8008ac0:	6825      	ldr	r5, [r4, #0]
 8008ac2:	6808      	ldr	r0, [r1, #0]
 8008ac4:	062e      	lsls	r6, r5, #24
 8008ac6:	f100 0304 	add.w	r3, r0, #4
 8008aca:	d50a      	bpl.n	8008ae2 <_printf_i+0xce>
 8008acc:	6805      	ldr	r5, [r0, #0]
 8008ace:	600b      	str	r3, [r1, #0]
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	da03      	bge.n	8008adc <_printf_i+0xc8>
 8008ad4:	232d      	movs	r3, #45	; 0x2d
 8008ad6:	426d      	negs	r5, r5
 8008ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008adc:	485e      	ldr	r0, [pc, #376]	; (8008c58 <_printf_i+0x244>)
 8008ade:	230a      	movs	r3, #10
 8008ae0:	e019      	b.n	8008b16 <_printf_i+0x102>
 8008ae2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ae6:	6805      	ldr	r5, [r0, #0]
 8008ae8:	600b      	str	r3, [r1, #0]
 8008aea:	bf18      	it	ne
 8008aec:	b22d      	sxthne	r5, r5
 8008aee:	e7ef      	b.n	8008ad0 <_printf_i+0xbc>
 8008af0:	680b      	ldr	r3, [r1, #0]
 8008af2:	6825      	ldr	r5, [r4, #0]
 8008af4:	1d18      	adds	r0, r3, #4
 8008af6:	6008      	str	r0, [r1, #0]
 8008af8:	0628      	lsls	r0, r5, #24
 8008afa:	d501      	bpl.n	8008b00 <_printf_i+0xec>
 8008afc:	681d      	ldr	r5, [r3, #0]
 8008afe:	e002      	b.n	8008b06 <_printf_i+0xf2>
 8008b00:	0669      	lsls	r1, r5, #25
 8008b02:	d5fb      	bpl.n	8008afc <_printf_i+0xe8>
 8008b04:	881d      	ldrh	r5, [r3, #0]
 8008b06:	4854      	ldr	r0, [pc, #336]	; (8008c58 <_printf_i+0x244>)
 8008b08:	2f6f      	cmp	r7, #111	; 0x6f
 8008b0a:	bf0c      	ite	eq
 8008b0c:	2308      	moveq	r3, #8
 8008b0e:	230a      	movne	r3, #10
 8008b10:	2100      	movs	r1, #0
 8008b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b16:	6866      	ldr	r6, [r4, #4]
 8008b18:	60a6      	str	r6, [r4, #8]
 8008b1a:	2e00      	cmp	r6, #0
 8008b1c:	bfa2      	ittt	ge
 8008b1e:	6821      	ldrge	r1, [r4, #0]
 8008b20:	f021 0104 	bicge.w	r1, r1, #4
 8008b24:	6021      	strge	r1, [r4, #0]
 8008b26:	b90d      	cbnz	r5, 8008b2c <_printf_i+0x118>
 8008b28:	2e00      	cmp	r6, #0
 8008b2a:	d04d      	beq.n	8008bc8 <_printf_i+0x1b4>
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b32:	fb03 5711 	mls	r7, r3, r1, r5
 8008b36:	5dc7      	ldrb	r7, [r0, r7]
 8008b38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b3c:	462f      	mov	r7, r5
 8008b3e:	42bb      	cmp	r3, r7
 8008b40:	460d      	mov	r5, r1
 8008b42:	d9f4      	bls.n	8008b2e <_printf_i+0x11a>
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d10b      	bne.n	8008b60 <_printf_i+0x14c>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	07df      	lsls	r7, r3, #31
 8008b4c:	d508      	bpl.n	8008b60 <_printf_i+0x14c>
 8008b4e:	6923      	ldr	r3, [r4, #16]
 8008b50:	6861      	ldr	r1, [r4, #4]
 8008b52:	4299      	cmp	r1, r3
 8008b54:	bfde      	ittt	le
 8008b56:	2330      	movle	r3, #48	; 0x30
 8008b58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b60:	1b92      	subs	r2, r2, r6
 8008b62:	6122      	str	r2, [r4, #16]
 8008b64:	f8cd a000 	str.w	sl, [sp]
 8008b68:	464b      	mov	r3, r9
 8008b6a:	aa03      	add	r2, sp, #12
 8008b6c:	4621      	mov	r1, r4
 8008b6e:	4640      	mov	r0, r8
 8008b70:	f7ff fee2 	bl	8008938 <_printf_common>
 8008b74:	3001      	adds	r0, #1
 8008b76:	d14c      	bne.n	8008c12 <_printf_i+0x1fe>
 8008b78:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7c:	b004      	add	sp, #16
 8008b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b82:	4835      	ldr	r0, [pc, #212]	; (8008c58 <_printf_i+0x244>)
 8008b84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	680e      	ldr	r6, [r1, #0]
 8008b8c:	061f      	lsls	r7, r3, #24
 8008b8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008b92:	600e      	str	r6, [r1, #0]
 8008b94:	d514      	bpl.n	8008bc0 <_printf_i+0x1ac>
 8008b96:	07d9      	lsls	r1, r3, #31
 8008b98:	bf44      	itt	mi
 8008b9a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b9e:	6023      	strmi	r3, [r4, #0]
 8008ba0:	b91d      	cbnz	r5, 8008baa <_printf_i+0x196>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	f023 0320 	bic.w	r3, r3, #32
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	2310      	movs	r3, #16
 8008bac:	e7b0      	b.n	8008b10 <_printf_i+0xfc>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	f043 0320 	orr.w	r3, r3, #32
 8008bb4:	6023      	str	r3, [r4, #0]
 8008bb6:	2378      	movs	r3, #120	; 0x78
 8008bb8:	4828      	ldr	r0, [pc, #160]	; (8008c5c <_printf_i+0x248>)
 8008bba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bbe:	e7e3      	b.n	8008b88 <_printf_i+0x174>
 8008bc0:	065e      	lsls	r6, r3, #25
 8008bc2:	bf48      	it	mi
 8008bc4:	b2ad      	uxthmi	r5, r5
 8008bc6:	e7e6      	b.n	8008b96 <_printf_i+0x182>
 8008bc8:	4616      	mov	r6, r2
 8008bca:	e7bb      	b.n	8008b44 <_printf_i+0x130>
 8008bcc:	680b      	ldr	r3, [r1, #0]
 8008bce:	6826      	ldr	r6, [r4, #0]
 8008bd0:	6960      	ldr	r0, [r4, #20]
 8008bd2:	1d1d      	adds	r5, r3, #4
 8008bd4:	600d      	str	r5, [r1, #0]
 8008bd6:	0635      	lsls	r5, r6, #24
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	d501      	bpl.n	8008be0 <_printf_i+0x1cc>
 8008bdc:	6018      	str	r0, [r3, #0]
 8008bde:	e002      	b.n	8008be6 <_printf_i+0x1d2>
 8008be0:	0671      	lsls	r1, r6, #25
 8008be2:	d5fb      	bpl.n	8008bdc <_printf_i+0x1c8>
 8008be4:	8018      	strh	r0, [r3, #0]
 8008be6:	2300      	movs	r3, #0
 8008be8:	6123      	str	r3, [r4, #16]
 8008bea:	4616      	mov	r6, r2
 8008bec:	e7ba      	b.n	8008b64 <_printf_i+0x150>
 8008bee:	680b      	ldr	r3, [r1, #0]
 8008bf0:	1d1a      	adds	r2, r3, #4
 8008bf2:	600a      	str	r2, [r1, #0]
 8008bf4:	681e      	ldr	r6, [r3, #0]
 8008bf6:	6862      	ldr	r2, [r4, #4]
 8008bf8:	2100      	movs	r1, #0
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7f7 faf0 	bl	80001e0 <memchr>
 8008c00:	b108      	cbz	r0, 8008c06 <_printf_i+0x1f2>
 8008c02:	1b80      	subs	r0, r0, r6
 8008c04:	6060      	str	r0, [r4, #4]
 8008c06:	6863      	ldr	r3, [r4, #4]
 8008c08:	6123      	str	r3, [r4, #16]
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c10:	e7a8      	b.n	8008b64 <_printf_i+0x150>
 8008c12:	6923      	ldr	r3, [r4, #16]
 8008c14:	4632      	mov	r2, r6
 8008c16:	4649      	mov	r1, r9
 8008c18:	4640      	mov	r0, r8
 8008c1a:	47d0      	blx	sl
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d0ab      	beq.n	8008b78 <_printf_i+0x164>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	079b      	lsls	r3, r3, #30
 8008c24:	d413      	bmi.n	8008c4e <_printf_i+0x23a>
 8008c26:	68e0      	ldr	r0, [r4, #12]
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	4298      	cmp	r0, r3
 8008c2c:	bfb8      	it	lt
 8008c2e:	4618      	movlt	r0, r3
 8008c30:	e7a4      	b.n	8008b7c <_printf_i+0x168>
 8008c32:	2301      	movs	r3, #1
 8008c34:	4632      	mov	r2, r6
 8008c36:	4649      	mov	r1, r9
 8008c38:	4640      	mov	r0, r8
 8008c3a:	47d0      	blx	sl
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d09b      	beq.n	8008b78 <_printf_i+0x164>
 8008c40:	3501      	adds	r5, #1
 8008c42:	68e3      	ldr	r3, [r4, #12]
 8008c44:	9903      	ldr	r1, [sp, #12]
 8008c46:	1a5b      	subs	r3, r3, r1
 8008c48:	42ab      	cmp	r3, r5
 8008c4a:	dcf2      	bgt.n	8008c32 <_printf_i+0x21e>
 8008c4c:	e7eb      	b.n	8008c26 <_printf_i+0x212>
 8008c4e:	2500      	movs	r5, #0
 8008c50:	f104 0619 	add.w	r6, r4, #25
 8008c54:	e7f5      	b.n	8008c42 <_printf_i+0x22e>
 8008c56:	bf00      	nop
 8008c58:	08008f71 	.word	0x08008f71
 8008c5c:	08008f82 	.word	0x08008f82

08008c60 <memcpy>:
 8008c60:	440a      	add	r2, r1
 8008c62:	4291      	cmp	r1, r2
 8008c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c68:	d100      	bne.n	8008c6c <memcpy+0xc>
 8008c6a:	4770      	bx	lr
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c76:	4291      	cmp	r1, r2
 8008c78:	d1f9      	bne.n	8008c6e <memcpy+0xe>
 8008c7a:	bd10      	pop	{r4, pc}

08008c7c <memmove>:
 8008c7c:	4288      	cmp	r0, r1
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	eb01 0402 	add.w	r4, r1, r2
 8008c84:	d902      	bls.n	8008c8c <memmove+0x10>
 8008c86:	4284      	cmp	r4, r0
 8008c88:	4623      	mov	r3, r4
 8008c8a:	d807      	bhi.n	8008c9c <memmove+0x20>
 8008c8c:	1e43      	subs	r3, r0, #1
 8008c8e:	42a1      	cmp	r1, r4
 8008c90:	d008      	beq.n	8008ca4 <memmove+0x28>
 8008c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c9a:	e7f8      	b.n	8008c8e <memmove+0x12>
 8008c9c:	4402      	add	r2, r0
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	428a      	cmp	r2, r1
 8008ca2:	d100      	bne.n	8008ca6 <memmove+0x2a>
 8008ca4:	bd10      	pop	{r4, pc}
 8008ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cae:	e7f7      	b.n	8008ca0 <memmove+0x24>

08008cb0 <_free_r>:
 8008cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cb2:	2900      	cmp	r1, #0
 8008cb4:	d048      	beq.n	8008d48 <_free_r+0x98>
 8008cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cba:	9001      	str	r0, [sp, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8008cc2:	bfb8      	it	lt
 8008cc4:	18e4      	addlt	r4, r4, r3
 8008cc6:	f000 f8d3 	bl	8008e70 <__malloc_lock>
 8008cca:	4a20      	ldr	r2, [pc, #128]	; (8008d4c <_free_r+0x9c>)
 8008ccc:	9801      	ldr	r0, [sp, #4]
 8008cce:	6813      	ldr	r3, [r2, #0]
 8008cd0:	4615      	mov	r5, r2
 8008cd2:	b933      	cbnz	r3, 8008ce2 <_free_r+0x32>
 8008cd4:	6063      	str	r3, [r4, #4]
 8008cd6:	6014      	str	r4, [r2, #0]
 8008cd8:	b003      	add	sp, #12
 8008cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cde:	f000 b8cd 	b.w	8008e7c <__malloc_unlock>
 8008ce2:	42a3      	cmp	r3, r4
 8008ce4:	d90b      	bls.n	8008cfe <_free_r+0x4e>
 8008ce6:	6821      	ldr	r1, [r4, #0]
 8008ce8:	1862      	adds	r2, r4, r1
 8008cea:	4293      	cmp	r3, r2
 8008cec:	bf04      	itt	eq
 8008cee:	681a      	ldreq	r2, [r3, #0]
 8008cf0:	685b      	ldreq	r3, [r3, #4]
 8008cf2:	6063      	str	r3, [r4, #4]
 8008cf4:	bf04      	itt	eq
 8008cf6:	1852      	addeq	r2, r2, r1
 8008cf8:	6022      	streq	r2, [r4, #0]
 8008cfa:	602c      	str	r4, [r5, #0]
 8008cfc:	e7ec      	b.n	8008cd8 <_free_r+0x28>
 8008cfe:	461a      	mov	r2, r3
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	b10b      	cbz	r3, 8008d08 <_free_r+0x58>
 8008d04:	42a3      	cmp	r3, r4
 8008d06:	d9fa      	bls.n	8008cfe <_free_r+0x4e>
 8008d08:	6811      	ldr	r1, [r2, #0]
 8008d0a:	1855      	adds	r5, r2, r1
 8008d0c:	42a5      	cmp	r5, r4
 8008d0e:	d10b      	bne.n	8008d28 <_free_r+0x78>
 8008d10:	6824      	ldr	r4, [r4, #0]
 8008d12:	4421      	add	r1, r4
 8008d14:	1854      	adds	r4, r2, r1
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	6011      	str	r1, [r2, #0]
 8008d1a:	d1dd      	bne.n	8008cd8 <_free_r+0x28>
 8008d1c:	681c      	ldr	r4, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	6053      	str	r3, [r2, #4]
 8008d22:	4421      	add	r1, r4
 8008d24:	6011      	str	r1, [r2, #0]
 8008d26:	e7d7      	b.n	8008cd8 <_free_r+0x28>
 8008d28:	d902      	bls.n	8008d30 <_free_r+0x80>
 8008d2a:	230c      	movs	r3, #12
 8008d2c:	6003      	str	r3, [r0, #0]
 8008d2e:	e7d3      	b.n	8008cd8 <_free_r+0x28>
 8008d30:	6825      	ldr	r5, [r4, #0]
 8008d32:	1961      	adds	r1, r4, r5
 8008d34:	428b      	cmp	r3, r1
 8008d36:	bf04      	itt	eq
 8008d38:	6819      	ldreq	r1, [r3, #0]
 8008d3a:	685b      	ldreq	r3, [r3, #4]
 8008d3c:	6063      	str	r3, [r4, #4]
 8008d3e:	bf04      	itt	eq
 8008d40:	1949      	addeq	r1, r1, r5
 8008d42:	6021      	streq	r1, [r4, #0]
 8008d44:	6054      	str	r4, [r2, #4]
 8008d46:	e7c7      	b.n	8008cd8 <_free_r+0x28>
 8008d48:	b003      	add	sp, #12
 8008d4a:	bd30      	pop	{r4, r5, pc}
 8008d4c:	20000330 	.word	0x20000330

08008d50 <_malloc_r>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	1ccd      	adds	r5, r1, #3
 8008d54:	f025 0503 	bic.w	r5, r5, #3
 8008d58:	3508      	adds	r5, #8
 8008d5a:	2d0c      	cmp	r5, #12
 8008d5c:	bf38      	it	cc
 8008d5e:	250c      	movcc	r5, #12
 8008d60:	2d00      	cmp	r5, #0
 8008d62:	4606      	mov	r6, r0
 8008d64:	db01      	blt.n	8008d6a <_malloc_r+0x1a>
 8008d66:	42a9      	cmp	r1, r5
 8008d68:	d903      	bls.n	8008d72 <_malloc_r+0x22>
 8008d6a:	230c      	movs	r3, #12
 8008d6c:	6033      	str	r3, [r6, #0]
 8008d6e:	2000      	movs	r0, #0
 8008d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d72:	f000 f87d 	bl	8008e70 <__malloc_lock>
 8008d76:	4921      	ldr	r1, [pc, #132]	; (8008dfc <_malloc_r+0xac>)
 8008d78:	680a      	ldr	r2, [r1, #0]
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	b99c      	cbnz	r4, 8008da6 <_malloc_r+0x56>
 8008d7e:	4f20      	ldr	r7, [pc, #128]	; (8008e00 <_malloc_r+0xb0>)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	b923      	cbnz	r3, 8008d8e <_malloc_r+0x3e>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4630      	mov	r0, r6
 8008d88:	f000 f862 	bl	8008e50 <_sbrk_r>
 8008d8c:	6038      	str	r0, [r7, #0]
 8008d8e:	4629      	mov	r1, r5
 8008d90:	4630      	mov	r0, r6
 8008d92:	f000 f85d 	bl	8008e50 <_sbrk_r>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d123      	bne.n	8008de2 <_malloc_r+0x92>
 8008d9a:	230c      	movs	r3, #12
 8008d9c:	6033      	str	r3, [r6, #0]
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f000 f86c 	bl	8008e7c <__malloc_unlock>
 8008da4:	e7e3      	b.n	8008d6e <_malloc_r+0x1e>
 8008da6:	6823      	ldr	r3, [r4, #0]
 8008da8:	1b5b      	subs	r3, r3, r5
 8008daa:	d417      	bmi.n	8008ddc <_malloc_r+0x8c>
 8008dac:	2b0b      	cmp	r3, #11
 8008dae:	d903      	bls.n	8008db8 <_malloc_r+0x68>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	441c      	add	r4, r3
 8008db4:	6025      	str	r5, [r4, #0]
 8008db6:	e004      	b.n	8008dc2 <_malloc_r+0x72>
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	42a2      	cmp	r2, r4
 8008dbc:	bf0c      	ite	eq
 8008dbe:	600b      	streq	r3, [r1, #0]
 8008dc0:	6053      	strne	r3, [r2, #4]
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f000 f85a 	bl	8008e7c <__malloc_unlock>
 8008dc8:	f104 000b 	add.w	r0, r4, #11
 8008dcc:	1d23      	adds	r3, r4, #4
 8008dce:	f020 0007 	bic.w	r0, r0, #7
 8008dd2:	1ac2      	subs	r2, r0, r3
 8008dd4:	d0cc      	beq.n	8008d70 <_malloc_r+0x20>
 8008dd6:	1a1b      	subs	r3, r3, r0
 8008dd8:	50a3      	str	r3, [r4, r2]
 8008dda:	e7c9      	b.n	8008d70 <_malloc_r+0x20>
 8008ddc:	4622      	mov	r2, r4
 8008dde:	6864      	ldr	r4, [r4, #4]
 8008de0:	e7cc      	b.n	8008d7c <_malloc_r+0x2c>
 8008de2:	1cc4      	adds	r4, r0, #3
 8008de4:	f024 0403 	bic.w	r4, r4, #3
 8008de8:	42a0      	cmp	r0, r4
 8008dea:	d0e3      	beq.n	8008db4 <_malloc_r+0x64>
 8008dec:	1a21      	subs	r1, r4, r0
 8008dee:	4630      	mov	r0, r6
 8008df0:	f000 f82e 	bl	8008e50 <_sbrk_r>
 8008df4:	3001      	adds	r0, #1
 8008df6:	d1dd      	bne.n	8008db4 <_malloc_r+0x64>
 8008df8:	e7cf      	b.n	8008d9a <_malloc_r+0x4a>
 8008dfa:	bf00      	nop
 8008dfc:	20000330 	.word	0x20000330
 8008e00:	20000334 	.word	0x20000334

08008e04 <_realloc_r>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	4607      	mov	r7, r0
 8008e08:	4614      	mov	r4, r2
 8008e0a:	460e      	mov	r6, r1
 8008e0c:	b921      	cbnz	r1, 8008e18 <_realloc_r+0x14>
 8008e0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e12:	4611      	mov	r1, r2
 8008e14:	f7ff bf9c 	b.w	8008d50 <_malloc_r>
 8008e18:	b922      	cbnz	r2, 8008e24 <_realloc_r+0x20>
 8008e1a:	f7ff ff49 	bl	8008cb0 <_free_r>
 8008e1e:	4625      	mov	r5, r4
 8008e20:	4628      	mov	r0, r5
 8008e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e24:	f000 f830 	bl	8008e88 <_malloc_usable_size_r>
 8008e28:	42a0      	cmp	r0, r4
 8008e2a:	d20f      	bcs.n	8008e4c <_realloc_r+0x48>
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	4638      	mov	r0, r7
 8008e30:	f7ff ff8e 	bl	8008d50 <_malloc_r>
 8008e34:	4605      	mov	r5, r0
 8008e36:	2800      	cmp	r0, #0
 8008e38:	d0f2      	beq.n	8008e20 <_realloc_r+0x1c>
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	f7ff ff0f 	bl	8008c60 <memcpy>
 8008e42:	4631      	mov	r1, r6
 8008e44:	4638      	mov	r0, r7
 8008e46:	f7ff ff33 	bl	8008cb0 <_free_r>
 8008e4a:	e7e9      	b.n	8008e20 <_realloc_r+0x1c>
 8008e4c:	4635      	mov	r5, r6
 8008e4e:	e7e7      	b.n	8008e20 <_realloc_r+0x1c>

08008e50 <_sbrk_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d06      	ldr	r5, [pc, #24]	; (8008e6c <_sbrk_r+0x1c>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	602b      	str	r3, [r5, #0]
 8008e5c:	f7f7 ff8a 	bl	8000d74 <_sbrk>
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	d102      	bne.n	8008e6a <_sbrk_r+0x1a>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	b103      	cbz	r3, 8008e6a <_sbrk_r+0x1a>
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	20001d40 	.word	0x20001d40

08008e70 <__malloc_lock>:
 8008e70:	4801      	ldr	r0, [pc, #4]	; (8008e78 <__malloc_lock+0x8>)
 8008e72:	f000 b811 	b.w	8008e98 <__retarget_lock_acquire_recursive>
 8008e76:	bf00      	nop
 8008e78:	20001d48 	.word	0x20001d48

08008e7c <__malloc_unlock>:
 8008e7c:	4801      	ldr	r0, [pc, #4]	; (8008e84 <__malloc_unlock+0x8>)
 8008e7e:	f000 b80c 	b.w	8008e9a <__retarget_lock_release_recursive>
 8008e82:	bf00      	nop
 8008e84:	20001d48 	.word	0x20001d48

08008e88 <_malloc_usable_size_r>:
 8008e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e8c:	1f18      	subs	r0, r3, #4
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	bfbc      	itt	lt
 8008e92:	580b      	ldrlt	r3, [r1, r0]
 8008e94:	18c0      	addlt	r0, r0, r3
 8008e96:	4770      	bx	lr

08008e98 <__retarget_lock_acquire_recursive>:
 8008e98:	4770      	bx	lr

08008e9a <__retarget_lock_release_recursive>:
 8008e9a:	4770      	bx	lr

08008e9c <_init>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	bf00      	nop
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr

08008ea8 <_fini>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr
