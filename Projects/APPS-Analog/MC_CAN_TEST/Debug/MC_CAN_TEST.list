
MC_CAN_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004120  08004120  00014120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041a8  080041a8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080041a8  080041a8  000141a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b0  080041b0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080041b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000078  08004230  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08004230  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc96  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b47  00000000  00000000  0002cd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002f128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c7a  00000000  00000000  0002f930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a50b  00000000  00000000  000515aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1e85  00000000  00000000  0005bab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d93a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026f4  00000000  00000000  0012d990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004108 	.word	0x08004108

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004108 	.word	0x08004108

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fc43 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f845 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f95f 	bl	8000848 <MX_GPIO_Init>
  MX_CAN1_Init();
 800058a:	f000 f8fd 	bl	8000788 <MX_CAN1_Init>
  MX_ADC1_Init();
 800058e:	f000 f8a9 	bl	80006e4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f92f 	bl	80007f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	//Initialize CAN header - standard id type, set standard Id = filter ID of other device
	CAN_TxHeader_Init(&pTxHeader, 3, CAN_ID_STD, CAN_RTR_DATA, MC_TX);
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <main+0x7c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	2200      	movs	r2, #0
 80005a0:	2103      	movs	r1, #3
 80005a2:	4815      	ldr	r0, [pc, #84]	; (80005f8 <main+0x80>)
 80005a4:	f000 f9c8 	bl	8000938 <CAN_TxHeader_Init>

	//Initialize CAN filter - filter ID = TxHeader Id of other device, 32 bit scale. Enables and configs filter.
	CAN_Filter_Init(&hcan1, &sFilterConfig, CAN_FILTER_FIFO0, MC_RX, 0, 0, 0, CAN_FILTERSCALE_32BIT);
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <main+0x84>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2201      	movs	r2, #1
 80005ae:	9203      	str	r2, [sp, #12]
 80005b0:	2200      	movs	r2, #0
 80005b2:	9202      	str	r2, [sp, #8]
 80005b4:	2200      	movs	r2, #0
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	2200      	movs	r2, #0
 80005ba:	9200      	str	r2, [sp, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	4910      	ldr	r1, [pc, #64]	; (8000600 <main+0x88>)
 80005c0:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0x8c>)
 80005c2:	f000 f9d2 	bl	800096a <CAN_Filter_Init>

	//start CAN
	HAL_CAN_Start(&hcan1);
 80005c6:	480f      	ldr	r0, [pc, #60]	; (8000604 <main+0x8c>)
 80005c8:	f001 fa38 	bl	8001a3c <HAL_CAN_Start>

	//interrupt on message pending
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005cc:	2102      	movs	r1, #2
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x8c>)
 80005d0:	f001 fc65 	bl	8001e9e <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_ADC_Start(&hadc1);
 80005d4:	480c      	ldr	r0, [pc, #48]	; (8000608 <main+0x90>)
 80005d6:	f000 fccd 	bl	8000f74 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80005da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005de:	480a      	ldr	r0, [pc, #40]	; (8000608 <main+0x90>)
 80005e0:	f000 fd9a 	bl	8001118 <HAL_ADC_PollForConversion>
		sensor_raw = HAL_ADC_GetValue(&hadc1);
 80005e4:	4808      	ldr	r0, [pc, #32]	; (8000608 <main+0x90>)
 80005e6:	f000 fe22 	bl	800122e <HAL_ADC_GetValue>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b2da      	uxtb	r2, r3
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <main+0x94>)
 80005f0:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 80005f2:	e7ef      	b.n	80005d4 <main+0x5c>
 80005f4:	20000004 	.word	0x20000004
 80005f8:	200000d0 	.word	0x200000d0
 80005fc:	20000000 	.word	0x20000000
 8000600:	200000a0 	.word	0x200000a0
 8000604:	200001a4 	.word	0x200001a4
 8000608:	200000f0 	.word	0x200000f0
 800060c:	20000138 	.word	0x20000138

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f003 f93c 	bl	800389c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a27      	ldr	r2, [pc, #156]	; (80006dc <SystemClock_Config+0xcc>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <SystemClock_Config+0xd0>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000680:	2308      	movs	r3, #8
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000684:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800068e:	2307      	movs	r3, #7
 8000690:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	4618      	mov	r0, r3
 8000698:	f002 f94c 	bl	8002934 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a2:	f000 f987 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2105      	movs	r1, #5
 80006c4:	4618      	mov	r0, r3
 80006c6:	f002 fbad 	bl	8002e24 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d0:	f000 f970 	bl	80009b4 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	; 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_ADC1_Init+0x98>)
 80006f8:	4a21      	ldr	r2, [pc, #132]	; (8000780 <MX_ADC1_Init+0x9c>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_ADC1_Init+0x98>)
 80006fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_ADC1_Init+0x98>)
 800070c:	2201      	movs	r2, #1
 800070e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_ADC1_Init+0x98>)
 8000712:	2201      	movs	r2, #1
 8000714:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_ADC1_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_ADC1_Init+0x98>)
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <MX_ADC1_Init+0xa0>)
 8000728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_ADC1_Init+0x98>)
 8000732:	2201      	movs	r2, #1
 8000734:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_ADC1_Init+0x98>)
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_ADC1_Init+0x98>)
 8000746:	f000 fbd1 	bl	8000eec <HAL_ADC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000750:	f000 f930 	bl	80009b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000754:	2301      	movs	r3, #1
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000758:	2301      	movs	r3, #1
 800075a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_ADC1_Init+0x98>)
 8000766:	f000 fd6f 	bl	8001248 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000770:	f000 f920 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000f0 	.word	0x200000f0
 8000780:	40012000 	.word	0x40012000
 8000784:	0f000001 	.word	0x0f000001

08000788 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_CAN1_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_CAN1_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_CAN1_Init+0x64>)
 8000794:	220c      	movs	r2, #12
 8000796:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_CAN1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_CAN1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_CAN1_Init+0x64>)
 80007a6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80007aa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_CAN1_Init+0x64>)
 80007ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007b4:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_CAN1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_CAN1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_CAN1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_CAN1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_CAN1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_CAN1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_CAN1_Init+0x64>)
 80007da:	f000 ff53 	bl	8001684 <HAL_CAN_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f8e6 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200001a4 	.word	0x200001a4
 80007f0:	40006400 	.word	0x40006400

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_USART2_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800082c:	f002 fcf6 	bl	800321c <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f8bd 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000160 	.word	0x20000160
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b32      	ldr	r3, [pc, #200]	; (800092c <MX_GPIO_Init+0xe4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a31      	ldr	r2, [pc, #196]	; (800092c <MX_GPIO_Init+0xe4>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_GPIO_Init+0xe4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_GPIO_Init+0xe4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a2a      	ldr	r2, [pc, #168]	; (800092c <MX_GPIO_Init+0xe4>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_GPIO_Init+0xe4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_GPIO_Init+0xe4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <MX_GPIO_Init+0xe4>)
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_GPIO_Init+0xe4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0308 	and.w	r3, r3, #8
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_GPIO_Init+0xe4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <MX_GPIO_Init+0xe4>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_GPIO_Init+0xe4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008d4:	4816      	ldr	r0, [pc, #88]	; (8000930 <MX_GPIO_Init+0xe8>)
 80008d6:	f001 ffef 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008da:	2301      	movs	r3, #1
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4811      	ldr	r0, [pc, #68]	; (8000934 <MX_GPIO_Init+0xec>)
 80008f0:	f001 fe46 	bl	8002580 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008f4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <MX_GPIO_Init+0xe8>)
 800090e:	f001 fe37 	bl	8002580 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 8000912:	2201      	movs	r2, #1
 8000914:	2100      	movs	r1, #0
 8000916:	2006      	movs	r0, #6
 8000918:	f001 fdfb 	bl	8002512 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800091c:	2006      	movs	r0, #6
 800091e:	f001 fe14 	bl	800254a <HAL_NVIC_EnableIRQ>

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	; 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40020000 	.word	0x40020000

08000938 <CAN_TxHeader_Init>:

/* USER CODE BEGIN 4 */
static void CAN_TxHeader_Init(CAN_TxHeaderTypeDef *pTxHeader, uint32_t dlc,
		uint32_t ide, uint32_t rtr, uint32_t stdId)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
	pTxHeader->DLC = dlc; // 'dlc' bytes of data
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	611a      	str	r2, [r3, #16]
	pTxHeader->IDE = ide;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	687a      	ldr	r2, [r7, #4]
 8000950:	609a      	str	r2, [r3, #8]
	pTxHeader->RTR = rtr;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	60da      	str	r2, [r3, #12]
	pTxHeader->StdId = stdId; //set standard identifier.
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	601a      	str	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <CAN_Filter_Init>:
 * @retval None
 */
static void CAN_Filter_Init(CAN_HandleTypeDef *hcan,
		CAN_FilterTypeDef *sFilterConfig, uint32_t fifo, uint32_t highId,
		uint32_t lowId, uint32_t highMask, uint32_t lowMask, uint32_t scale)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b084      	sub	sp, #16
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
 8000976:	603b      	str	r3, [r7, #0]
	sFilterConfig->FilterFIFOAssignment = fifo;
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	611a      	str	r2, [r3, #16]
	sFilterConfig->FilterIdHigh = highId << 5; //must be shifted 5 bits to the left according to reference manual
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	015a      	lsls	r2, r3, #5
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	601a      	str	r2, [r3, #0]
	sFilterConfig->FilterIdLow = lowId;
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	605a      	str	r2, [r3, #4]
	sFilterConfig->FilterMaskIdHigh = highMask;
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	69fa      	ldr	r2, [r7, #28]
 8000990:	609a      	str	r2, [r3, #8]
	sFilterConfig->FilterMaskIdLow = lowMask;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	6a3a      	ldr	r2, [r7, #32]
 8000996:	60da      	str	r2, [r3, #12]
	sFilterConfig->FilterScale = scale;
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099c:	61da      	str	r2, [r3, #28]
	sFilterConfig->FilterActivation = CAN_FILTER_ENABLE; //enable activation
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	2201      	movs	r2, #1
 80009a2:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(hcan, sFilterConfig); //config CAN filter
 80009a4:	68b9      	ldr	r1, [r7, #8]
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f000 ff68 	bl	800187c <HAL_CAN_ConfigFilter>
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	; 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	; 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f001 fd7c 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a17      	ldr	r2, [pc, #92]	; (8000a8c <HAL_ADC_MspInit+0x7c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d127      	bne.n	8000a82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_ADC_MspInit+0x84>)
 8000a7e:	f001 fd7f 	bl	8002580 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	; 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40012000 	.word	0x40012000
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000

08000a98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <HAL_CAN_MspInit+0x94>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d134      	bne.n	8000b24 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_CAN_MspInit+0x98>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <HAL_CAN_MspInit+0x98>)
 8000ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_CAN_MspInit+0x98>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_CAN_MspInit+0x98>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <HAL_CAN_MspInit+0x98>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_CAN_MspInit+0x98>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b04:	2309      	movs	r3, #9
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4809      	ldr	r0, [pc, #36]	; (8000b34 <HAL_CAN_MspInit+0x9c>)
 8000b10:	f001 fd36 	bl	8002580 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 2);
 8000b14:	2202      	movs	r2, #2
 8000b16:	2100      	movs	r1, #0
 8000b18:	2014      	movs	r0, #20
 8000b1a:	f001 fcfa 	bl	8002512 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b1e:	2014      	movs	r0, #20
 8000b20:	f001 fd13 	bl	800254a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40006400 	.word	0x40006400
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020400 	.word	0x40020400

08000b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	; 0x28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_UART_MspInit+0x84>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12b      	bne.n	8000bb2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_UART_MspInit+0x88>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b92:	230c      	movs	r3, #12
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <HAL_UART_MspInit+0x8c>)
 8000bae:	f001 fce7 	bl	8002580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f94a 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09a      	sub	sp, #104	; 0x68
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	char msg[100];
	uint8_t regId = 0x1B; // Register you are reading from or writing to
 8000c22:	231b      	movs	r3, #27
 8000c24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t readCommandId = 0x3D; // Value to tell the controller we are reading
 8000c28:	233d      	movs	r3, #61	; 0x3d
 8000c2a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	// Transmit over serial
	//sprintf(msg, "Sending value:%d to id:%lu\n", sensor_raw, MC_TX);
	sprintf(msg, "Reading ID:0x1B from %lu\n\r", MC_TX);
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <EXTI0_IRQHandler+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	463b      	mov	r3, r7
 8000c34:	4913      	ldr	r1, [pc, #76]	; (8000c84 <EXTI0_IRQHandler+0x68>)
 8000c36:	4618      	mov	r0, r3
 8000c38:	f002 fe38 	bl	80038ac <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fac6 	bl	80001d0 <strlen>
 8000c44:	4603      	mov	r3, r0
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4639      	mov	r1, r7
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <EXTI0_IRQHandler+0x6c>)
 8000c50:	f002 fb31 	bl	80032b6 <HAL_UART_Transmit>
	//tData[0] = regID;
	//tData[1] = sensor_raw;
	//tData[2] = sensor_raw >> 8;

	// Read from controller
	tData[0] = readCommandId;
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <EXTI0_IRQHandler+0x70>)
 8000c56:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c5a:	7013      	strb	r3, [r2, #0]
	tData[1] = regId;
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <EXTI0_IRQHandler+0x70>)
 8000c5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c62:	7053      	strb	r3, [r2, #1]

	HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, tData, &pTxMailbox);
 8000c64:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <EXTI0_IRQHandler+0x74>)
 8000c66:	4a09      	ldr	r2, [pc, #36]	; (8000c8c <EXTI0_IRQHandler+0x70>)
 8000c68:	490a      	ldr	r1, [pc, #40]	; (8000c94 <EXTI0_IRQHandler+0x78>)
 8000c6a:	480b      	ldr	r0, [pc, #44]	; (8000c98 <EXTI0_IRQHandler+0x7c>)
 8000c6c:	f000 ff2a 	bl	8001ac4 <HAL_CAN_AddTxMessage>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c70:	2001      	movs	r0, #1
 8000c72:	f001 fe3b 	bl	80028ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3768      	adds	r7, #104	; 0x68
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000004 	.word	0x20000004
 8000c84:	08004120 	.word	0x08004120
 8000c88:	20000160 	.word	0x20000160
 8000c8c:	2000013c 	.word	0x2000013c
 8000c90:	200000cc 	.word	0x200000cc
 8000c94:	200000d0 	.word	0x200000d0
 8000c98:	200001a4 	.word	0x200001a4

08000c9c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09a      	sub	sp, #104	; 0x68
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ca2:	4817      	ldr	r0, [pc, #92]	; (8000d00 <CAN1_RX0_IRQHandler+0x64>)
 8000ca4:	f001 f921 	bl	8001eea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, rcvData); //receive byte
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <CAN1_RX0_IRQHandler+0x68>)
 8000caa:	4a17      	ldr	r2, [pc, #92]	; (8000d08 <CAN1_RX0_IRQHandler+0x6c>)
 8000cac:	2100      	movs	r1, #0
 8000cae:	4814      	ldr	r0, [pc, #80]	; (8000d00 <CAN1_RX0_IRQHandler+0x64>)
 8000cb0:	f000 ffe3 	bl	8001c7a <HAL_CAN_GetRxMessage>
	rcvDataVal = 0;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <CAN1_RX0_IRQHandler+0x70>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
	rcvDataVal = (rcvData[0] | rcvData[1] << 8);
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <CAN1_RX0_IRQHandler+0x68>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <CAN1_RX0_IRQHandler+0x68>)
 8000cc2:	785b      	ldrb	r3, [r3, #1]
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <CAN1_RX0_IRQHandler+0x70>)
 8000ccc:	601a      	str	r2, [r3, #0]

	char msg[100];
	// Transmit over serial
	sprintf(msg, "Received value:%lu from id:%lu\n", rcvDataVal, MC_RX);
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <CAN1_RX0_IRQHandler+0x70>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <CAN1_RX0_IRQHandler+0x74>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	1d38      	adds	r0, r7, #4
 8000cd8:	490e      	ldr	r1, [pc, #56]	; (8000d14 <CAN1_RX0_IRQHandler+0x78>)
 8000cda:	f002 fde7 	bl	80038ac <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000);
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fa75 	bl	80001d0 <strlen>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	1d39      	adds	r1, r7, #4
 8000cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf0:	4809      	ldr	r0, [pc, #36]	; (8000d18 <CAN1_RX0_IRQHandler+0x7c>)
 8000cf2:	f002 fae0 	bl	80032b6 <HAL_UART_Transmit>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3768      	adds	r7, #104	; 0x68
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001a4 	.word	0x200001a4
 8000d04:	200000e8 	.word	0x200000e8
 8000d08:	20000144 	.word	0x20000144
 8000d0c:	200000c8 	.word	0x200000c8
 8000d10:	20000000 	.word	0x20000000
 8000d14:	0800413c 	.word	0x0800413c
 8000d18:	20000160 	.word	0x20000160

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f002 fd7c 	bl	8003848 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20020000 	.word	0x20020000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000094 	.word	0x20000094
 8000d84:	200001e0 	.word	0x200001e0

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <SystemInit+0x28>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <SystemInit+0x28>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SystemInit+0x28>)
 8000d9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da2:	609a      	str	r2, [r3, #8]
#endif
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000db8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
  ldr  r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dde:	f7ff ffd3 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f002 fd37 	bl	8003854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fbc7 	bl	8000578 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000df0:	080041b8 	.word	0x080041b8
  ldr  r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000df8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000dfc:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000e00:	200001e0 	.word	0x200001e0

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f001 fb63 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f000 f808 	bl	8000e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fdc0 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x54>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x58>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fb7b 	bl	8002566 <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00e      	b.n	8000e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b0f      	cmp	r3, #15
 8000e7e:	d80a      	bhi.n	8000e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e80:	2200      	movs	r2, #0
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f001 fb43 	bl	8002512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e8c:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_InitTick+0x5c>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e92:	2300      	movs	r3, #0
 8000e94:	e000      	b.n	8000e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000010 	.word	0x20000010
 8000ea8:	2000000c 	.word	0x2000000c

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000010 	.word	0x20000010
 8000ed0:	200001cc 	.word	0x200001cc

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	200001cc 	.word	0x200001cc

08000eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e033      	b.n	8000f6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d109      	bne.n	8000f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff fd80 	bl	8000a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d118      	bne.n	8000f5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f32:	f023 0302 	bic.w	r3, r3, #2
 8000f36:	f043 0202 	orr.w	r2, r3, #2
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 faa4 	bl	800148c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f023 0303 	bic.w	r3, r3, #3
 8000f52:	f043 0201 	orr.w	r2, r3, #1
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	641a      	str	r2, [r3, #64]	; 0x40
 8000f5a:	e001      	b.n	8000f60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d101      	bne.n	8000f8e <HAL_ADC_Start+0x1a>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e0b2      	b.n	80010f4 <HAL_ADC_Start+0x180>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d018      	beq.n	8000fd6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
 8000fb2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fb4:	4b52      	ldr	r3, [pc, #328]	; (8001100 <HAL_ADC_Start+0x18c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a52      	ldr	r2, [pc, #328]	; (8001104 <HAL_ADC_Start+0x190>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	0c9a      	lsrs	r2, r3, #18
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000fc8:	e002      	b.n	8000fd0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f9      	bne.n	8000fca <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d17a      	bne.n	80010da <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fec:	f023 0301 	bic.w	r3, r3, #1
 8000ff0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800100e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001022:	d106      	bne.n	8001032 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001028:	f023 0206 	bic.w	r2, r3, #6
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	645a      	str	r2, [r3, #68]	; 0x44
 8001030:	e002      	b.n	8001038 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_ADC_Start+0x194>)
 8001042:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800104c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	2b00      	cmp	r3, #0
 8001058:	d12a      	bne.n	80010b0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a2b      	ldr	r2, [pc, #172]	; (800110c <HAL_ADC_Start+0x198>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d015      	beq.n	8001090 <HAL_ADC_Start+0x11c>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a29      	ldr	r2, [pc, #164]	; (8001110 <HAL_ADC_Start+0x19c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d105      	bne.n	800107a <HAL_ADC_Start+0x106>
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_ADC_Start+0x194>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f003 031f 	and.w	r3, r3, #31
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00a      	beq.n	8001090 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a25      	ldr	r2, [pc, #148]	; (8001114 <HAL_ADC_Start+0x1a0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d136      	bne.n	80010f2 <HAL_ADC_Start+0x17e>
 8001084:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_ADC_Start+0x194>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b00      	cmp	r3, #0
 800108e:	d130      	bne.n	80010f2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d129      	bne.n	80010f2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	e020      	b.n	80010f2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a15      	ldr	r2, [pc, #84]	; (800110c <HAL_ADC_Start+0x198>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d11b      	bne.n	80010f2 <HAL_ADC_Start+0x17e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d114      	bne.n	80010f2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	e00b      	b.n	80010f2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f043 0210 	orr.w	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	20000008 	.word	0x20000008
 8001104:	431bde83 	.word	0x431bde83
 8001108:	40012300 	.word	0x40012300
 800110c:	40012000 	.word	0x40012000
 8001110:	40012100 	.word	0x40012100
 8001114:	40012200 	.word	0x40012200

08001118 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001134:	d113      	bne.n	800115e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001144:	d10b      	bne.n	800115e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f043 0220 	orr.w	r2, r3, #32
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e063      	b.n	8001226 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800115e:	f7ff feb9 	bl	8000ed4 <HAL_GetTick>
 8001162:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001164:	e021      	b.n	80011aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d01d      	beq.n	80011aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <HAL_ADC_PollForConversion+0x6c>
 8001174:	f7ff feae 	bl	8000ed4 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	429a      	cmp	r2, r3
 8001182:	d212      	bcs.n	80011aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b02      	cmp	r3, #2
 8001190:	d00b      	beq.n	80011aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f043 0204 	orr.w	r2, r3, #4
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e03d      	b.n	8001226 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d1d6      	bne.n	8001166 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f06f 0212 	mvn.w	r2, #18
 80011c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d123      	bne.n	8001224 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d11f      	bne.n	8001224 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d111      	bne.n	8001224 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d105      	bne.n	8001224 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f043 0201 	orr.w	r2, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1c>
 8001260:	2302      	movs	r3, #2
 8001262:	e105      	b.n	8001470 <HAL_ADC_ConfigChannel+0x228>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b09      	cmp	r3, #9
 8001272:	d925      	bls.n	80012c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	68d9      	ldr	r1, [r3, #12]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	3b1e      	subs	r3, #30
 800128a:	2207      	movs	r2, #7
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43da      	mvns	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	400a      	ands	r2, r1
 8001298:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68d9      	ldr	r1, [r3, #12]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	4603      	mov	r3, r0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4403      	add	r3, r0
 80012b2:	3b1e      	subs	r3, #30
 80012b4:	409a      	lsls	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	e022      	b.n	8001306 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6919      	ldr	r1, [r3, #16]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	2207      	movs	r2, #7
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	400a      	ands	r2, r1
 80012e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6919      	ldr	r1, [r3, #16]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689a      	ldr	r2, [r3, #8]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4403      	add	r3, r0
 80012fc:	409a      	lsls	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b06      	cmp	r3, #6
 800130c:	d824      	bhi.n	8001358 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	3b05      	subs	r3, #5
 8001320:	221f      	movs	r2, #31
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	400a      	ands	r2, r1
 800132e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	b29b      	uxth	r3, r3
 800133c:	4618      	mov	r0, r3
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	3b05      	subs	r3, #5
 800134a:	fa00 f203 	lsl.w	r2, r0, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	635a      	str	r2, [r3, #52]	; 0x34
 8001356:	e04c      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b0c      	cmp	r3, #12
 800135e:	d824      	bhi.n	80013aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	3b23      	subs	r3, #35	; 0x23
 8001372:	221f      	movs	r2, #31
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43da      	mvns	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	400a      	ands	r2, r1
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	4618      	mov	r0, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	3b23      	subs	r3, #35	; 0x23
 800139c:	fa00 f203 	lsl.w	r2, r0, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	631a      	str	r2, [r3, #48]	; 0x30
 80013a8:	e023      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	3b41      	subs	r3, #65	; 0x41
 80013bc:	221f      	movs	r2, #31
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	400a      	ands	r2, r1
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	4618      	mov	r0, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	3b41      	subs	r3, #65	; 0x41
 80013e6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_ADC_ConfigChannel+0x234>)
 80013f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a21      	ldr	r2, [pc, #132]	; (8001480 <HAL_ADC_ConfigChannel+0x238>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d109      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1cc>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d105      	bne.n	8001414 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_ADC_ConfigChannel+0x238>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d123      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x21e>
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b10      	cmp	r3, #16
 8001424:	d003      	beq.n	800142e <HAL_ADC_ConfigChannel+0x1e6>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b11      	cmp	r3, #17
 800142c:	d11b      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b10      	cmp	r3, #16
 8001440:	d111      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_ADC_ConfigChannel+0x23c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_ADC_ConfigChannel+0x240>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	0c9a      	lsrs	r2, r3, #18
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001458:	e002      	b.n	8001460 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	3b01      	subs	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f9      	bne.n	800145a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40012300 	.word	0x40012300
 8001480:	40012000 	.word	0x40012000
 8001484:	20000008 	.word	0x20000008
 8001488:	431bde83 	.word	0x431bde83

0800148c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001494:	4b79      	ldr	r3, [pc, #484]	; (800167c <ADC_Init+0x1f0>)
 8001496:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	431a      	orrs	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	021a      	lsls	r2, r3, #8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6859      	ldr	r1, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6899      	ldr	r1, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151e:	4a58      	ldr	r2, [pc, #352]	; (8001680 <ADC_Init+0x1f4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d022      	beq.n	800156a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001532:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6899      	ldr	r1, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6899      	ldr	r1, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	e00f      	b.n	800158a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001588:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0202 	bic.w	r2, r2, #2
 8001598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	7e1b      	ldrb	r3, [r3, #24]
 80015a4:	005a      	lsls	r2, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d01b      	beq.n	80015f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6859      	ldr	r1, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	3b01      	subs	r3, #1
 80015e4:	035a      	lsls	r2, r3, #13
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	e007      	b.n	8001600 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800160e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	3b01      	subs	r3, #1
 800161c:	051a      	lsls	r2, r3, #20
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6899      	ldr	r1, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001642:	025a      	lsls	r2, r3, #9
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6899      	ldr	r1, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	029a      	lsls	r2, r3, #10
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40012300 	.word	0x40012300
 8001680:	0f000001 	.word	0x0f000001

08001684 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0ed      	b.n	8001872 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff f9f8 	bl	8000a98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b8:	f7ff fc0c 	bl	8000ed4 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016be:	e012      	b.n	80016e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c0:	f7ff fc08 	bl	8000ed4 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d90b      	bls.n	80016e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0c5      	b.n	8001872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0e5      	beq.n	80016c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0202 	bic.w	r2, r2, #2
 8001702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001704:	f7ff fbe6 	bl	8000ed4 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800170a:	e012      	b.n	8001732 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800170c:	f7ff fbe2 	bl	8000ed4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b0a      	cmp	r3, #10
 8001718:	d90b      	bls.n	8001732 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2205      	movs	r2, #5
 800172a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e09f      	b.n	8001872 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1e5      	bne.n	800170c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d108      	bne.n	800175a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e007      	b.n	800176a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001768:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	7e5b      	ldrb	r3, [r3, #25]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d108      	bne.n	8001784 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e007      	b.n	8001794 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001792:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7e9b      	ldrb	r3, [r3, #26]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f042 0220 	orr.w	r2, r2, #32
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e007      	b.n	80017be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0220 	bic.w	r2, r2, #32
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7edb      	ldrb	r3, [r3, #27]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 0210 	bic.w	r2, r2, #16
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	e007      	b.n	80017e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0210 	orr.w	r2, r2, #16
 80017e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7f1b      	ldrb	r3, [r3, #28]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d108      	bne.n	8001802 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0208 	orr.w	r2, r2, #8
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e007      	b.n	8001812 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0208 	bic.w	r2, r2, #8
 8001810:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	7f5b      	ldrb	r3, [r3, #29]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d108      	bne.n	800182c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0204 	orr.w	r2, r2, #4
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e007      	b.n	800183c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0204 	bic.w	r2, r2, #4
 800183a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	ea42 0103 	orr.w	r1, r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	1e5a      	subs	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001892:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001894:	7cfb      	ldrb	r3, [r7, #19]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d003      	beq.n	80018a2 <HAL_CAN_ConfigFilter+0x26>
 800189a:	7cfb      	ldrb	r3, [r7, #19]
 800189c:	2b02      	cmp	r3, #2
 800189e:	f040 80be 	bne.w	8001a1e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80018a2:	4b65      	ldr	r3, [pc, #404]	; (8001a38 <HAL_CAN_ConfigFilter+0x1bc>)
 80018a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80018bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	431a      	orrs	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	2201      	movs	r2, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	401a      	ands	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d123      	bne.n	800194c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001926:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3248      	adds	r2, #72	; 0x48
 800192c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001940:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001942:	6979      	ldr	r1, [r7, #20]
 8001944:	3348      	adds	r3, #72	; 0x48
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d122      	bne.n	800199a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001974:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3248      	adds	r2, #72	; 0x48
 800197a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800198e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001990:	6979      	ldr	r1, [r7, #20]
 8001992:	3348      	adds	r3, #72	; 0x48
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80019b4:	e007      	b.n	80019c6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	431a      	orrs	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	401a      	ands	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019e0:	e007      	b.n	80019f2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	431a      	orrs	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d107      	bne.n	8001a0a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a10:	f023 0201 	bic.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e006      	b.n	8001a2c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
  }
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40006400 	.word	0x40006400

08001a3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d12e      	bne.n	8001aae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a68:	f7ff fa34 	bl	8000ed4 <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a6e:	e012      	b.n	8001a96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a70:	f7ff fa30 	bl	8000ed4 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b0a      	cmp	r3, #10
 8001a7c:	d90b      	bls.n	8001a96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2205      	movs	r2, #5
 8001a8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e012      	b.n	8001abc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e5      	bne.n	8001a70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e006      	b.n	8001abc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
  }
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ae2:	7ffb      	ldrb	r3, [r7, #31]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d003      	beq.n	8001af0 <HAL_CAN_AddTxMessage+0x2c>
 8001ae8:	7ffb      	ldrb	r3, [r7, #31]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	f040 80b8 	bne.w	8001c60 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10a      	bne.n	8001b10 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80a0 	beq.w	8001c50 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	0e1b      	lsrs	r3, r3, #24
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d907      	bls.n	8001b30 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e09e      	b.n	8001c6e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b30:	2201      	movs	r2, #1
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	409a      	lsls	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10d      	bne.n	8001b5e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	6809      	ldr	r1, [r1, #0]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3318      	adds	r3, #24
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	440b      	add	r3, r1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e00f      	b.n	8001b7e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b68:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b6e:	68f9      	ldr	r1, [r7, #12]
 8001b70:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b72:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	3318      	adds	r3, #24
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	440b      	add	r3, r1
 8001b7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6819      	ldr	r1, [r3, #0]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3318      	adds	r3, #24
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3304      	adds	r3, #4
 8001b90:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	7d1b      	ldrb	r3, [r3, #20]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d111      	bne.n	8001bbe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3318      	adds	r3, #24
 8001ba2:	011b      	lsls	r3, r3, #4
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	6811      	ldr	r1, [r2, #0]
 8001bae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	3318      	adds	r3, #24
 8001bb6:	011b      	lsls	r3, r3, #4
 8001bb8:	440b      	add	r3, r1
 8001bba:	3304      	adds	r3, #4
 8001bbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3307      	adds	r3, #7
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	061a      	lsls	r2, r3, #24
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3306      	adds	r3, #6
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3305      	adds	r3, #5
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	3204      	adds	r2, #4
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	4610      	mov	r0, r2
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	6811      	ldr	r1, [r2, #0]
 8001be6:	ea43 0200 	orr.w	r2, r3, r0
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	440b      	add	r3, r1
 8001bf0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001bf4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	061a      	lsls	r2, r3, #24
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3302      	adds	r3, #2
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	4313      	orrs	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	4610      	mov	r0, r2
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	6811      	ldr	r1, [r2, #0]
 8001c1c:	ea43 0200 	orr.w	r2, r3, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	3318      	adds	r3, #24
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	6811      	ldr	r1, [r2, #0]
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3318      	adds	r3, #24
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	440b      	add	r3, r1
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	e00e      	b.n	8001c6e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e006      	b.n	8001c6e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	; 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c8e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d003      	beq.n	8001c9e <HAL_CAN_GetRxMessage+0x24>
 8001c96:	7dfb      	ldrb	r3, [r7, #23]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	f040 80f3 	bne.w	8001e84 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d116      	bne.n	8001ce0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0e7      	b.n	8001e92 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0d8      	b.n	8001e92 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	331b      	adds	r3, #27
 8001ce8:	011b      	lsls	r3, r3, #4
 8001cea:	4413      	add	r3, r2
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0204 	and.w	r2, r3, #4
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10c      	bne.n	8001d18 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	331b      	adds	r3, #27
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	4413      	add	r3, r2
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0d5b      	lsrs	r3, r3, #21
 8001d0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e00b      	b.n	8001d30 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	331b      	adds	r3, #27
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	08db      	lsrs	r3, r3, #3
 8001d28:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	331b      	adds	r3, #27
 8001d38:	011b      	lsls	r3, r3, #4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0202 	and.w	r2, r3, #2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	331b      	adds	r3, #27
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4413      	add	r3, r2
 8001d52:	3304      	adds	r3, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	331b      	adds	r3, #27
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	4413      	add	r3, r2
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0a1b      	lsrs	r3, r3, #8
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	331b      	adds	r3, #27
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4413      	add	r3, r2
 8001d82:	3304      	adds	r3, #4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0c1b      	lsrs	r3, r3, #16
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	4413      	add	r3, r2
 8001d98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b2da      	uxtb	r2, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0a1a      	lsrs	r2, r3, #8
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	0c1a      	lsrs	r2, r3, #16
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e1a      	lsrs	r2, r3, #24
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3303      	adds	r3, #3
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	3304      	adds	r3, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	0a1a      	lsrs	r2, r3, #8
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	3305      	adds	r3, #5
 8001e20:	b2d2      	uxtb	r2, r2
 8001e22:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0c1a      	lsrs	r2, r3, #16
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	3306      	adds	r3, #6
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	0e1a      	lsrs	r2, r3, #24
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3307      	adds	r3, #7
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d108      	bne.n	8001e70 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	e007      	b.n	8001e80 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0220 	orr.w	r2, r2, #32
 8001e7e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e006      	b.n	8001e92 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d002      	beq.n	8001ebc <HAL_CAN_ActivateNotification+0x1e>
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d109      	bne.n	8001ed0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6959      	ldr	r1, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e006      	b.n	8001ede <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
  }
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b08a      	sub	sp, #40	; 0x28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f26:	6a3b      	ldr	r3, [r7, #32]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d07c      	beq.n	800202a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d023      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f983 	bl	8002258 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f52:	e016      	b.n	8001f82 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e00c      	b.n	8001f82 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	e002      	b.n	8001f82 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f989 	bl	8002294 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d024      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f963 	bl	800226c <HAL_CAN_TxMailbox1CompleteCallback>
 8001fa6:	e016      	b.n	8001fd6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fba:	e00c      	b.n	8001fd6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fce:	e002      	b.n	8001fd6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f969 	bl	80022a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d024      	beq.n	800202a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fe8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f943 	bl	8002280 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ffa:	e016      	b.n	800202a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
 800200e:	e00c      	b.n	800202a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
 8002022:	e002      	b.n	800202a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f949 	bl	80022bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00c      	beq.n	800204e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800203e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002040:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002044:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2210      	movs	r2, #16
 800204c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00b      	beq.n	8002070 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b00      	cmp	r3, #0
 8002060:	d006      	beq.n	8002070 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2208      	movs	r2, #8
 8002068:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f93a 	bl	80022e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f921 	bl	80022d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00c      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2210      	movs	r2, #16
 80020b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00b      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d006      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2208      	movs	r2, #8
 80020cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f91c 	bl	800230c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f903 	bl	80022f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00b      	beq.n	8002114 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2210      	movs	r2, #16
 800210c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f906 	bl	8002320 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2208      	movs	r2, #8
 800212e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8ff 	bl	8002334 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d07b      	beq.n	8002238 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d072      	beq.n	8002230 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d043      	beq.n	8002230 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d03e      	beq.n	8002230 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021b8:	2b60      	cmp	r3, #96	; 0x60
 80021ba:	d02b      	beq.n	8002214 <HAL_CAN_IRQHandler+0x32a>
 80021bc:	2b60      	cmp	r3, #96	; 0x60
 80021be:	d82e      	bhi.n	800221e <HAL_CAN_IRQHandler+0x334>
 80021c0:	2b50      	cmp	r3, #80	; 0x50
 80021c2:	d022      	beq.n	800220a <HAL_CAN_IRQHandler+0x320>
 80021c4:	2b50      	cmp	r3, #80	; 0x50
 80021c6:	d82a      	bhi.n	800221e <HAL_CAN_IRQHandler+0x334>
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d019      	beq.n	8002200 <HAL_CAN_IRQHandler+0x316>
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d826      	bhi.n	800221e <HAL_CAN_IRQHandler+0x334>
 80021d0:	2b30      	cmp	r3, #48	; 0x30
 80021d2:	d010      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x30c>
 80021d4:	2b30      	cmp	r3, #48	; 0x30
 80021d6:	d822      	bhi.n	800221e <HAL_CAN_IRQHandler+0x334>
 80021d8:	2b10      	cmp	r3, #16
 80021da:	d002      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x2f8>
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d005      	beq.n	80021ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021e0:	e01d      	b.n	800221e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	f043 0308 	orr.w	r3, r3, #8
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021ea:	e019      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	f043 0310 	orr.w	r3, r3, #16
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021f4:	e014      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	f043 0320 	orr.w	r3, r3, #32
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021fe:	e00f      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002208:	e00a      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002210:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002212:	e005      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800221c:	e000      	b.n	8002220 <HAL_CAN_IRQHandler+0x336>
            break;
 800221e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800222e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2204      	movs	r2, #4
 8002236:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	d008      	beq.n	8002250 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f87c 	bl	8002348 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002250:	bf00      	nop
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0b      	blt.n	80023ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4907      	ldr	r1, [pc, #28]	; (80023f8 <__NVIC_EnableIRQ+0x38>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000e100 	.word	0xe000e100

080023fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db0a      	blt.n	8002426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	490c      	ldr	r1, [pc, #48]	; (8002448 <__NVIC_SetPriority+0x4c>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002424:	e00a      	b.n	800243c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4908      	ldr	r1, [pc, #32]	; (800244c <__NVIC_SetPriority+0x50>)
 800242c:	79fb      	ldrb	r3, [r7, #7]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3b04      	subs	r3, #4
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	440b      	add	r3, r1
 800243a:	761a      	strb	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	; 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f1c3 0307 	rsb	r3, r3, #7
 800246a:	2b04      	cmp	r3, #4
 800246c:	bf28      	it	cs
 800246e:	2304      	movcs	r3, #4
 8002470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3304      	adds	r3, #4
 8002476:	2b06      	cmp	r3, #6
 8002478:	d902      	bls.n	8002480 <NVIC_EncodePriority+0x30>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3b03      	subs	r3, #3
 800247e:	e000      	b.n	8002482 <NVIC_EncodePriority+0x32>
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43d9      	mvns	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	4313      	orrs	r3, r2
         );
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c8:	d301      	bcc.n	80024ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00f      	b.n	80024ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ce:	4a0a      	ldr	r2, [pc, #40]	; (80024f8 <SysTick_Config+0x40>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d6:	210f      	movs	r1, #15
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f7ff ff8e 	bl	80023fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e0:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <SysTick_Config+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e6:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <SysTick_Config+0x40>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	e000e010 	.word	0xe000e010

080024fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff29 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002524:	f7ff ff3e 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 8002528:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f7ff ff8e 	bl	8002450 <NVIC_EncodePriority>
 8002534:	4602      	mov	r2, r0
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253a:	4611      	mov	r1, r2
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff5d 	bl	80023fc <__NVIC_SetPriority>
}
 8002542:	bf00      	nop
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff31 	bl	80023c0 <__NVIC_EnableIRQ>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff ffa2 	bl	80024b8 <SysTick_Config>
 8002574:	4603      	mov	r3, r0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	e16b      	b.n	8002874 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800259c:	2201      	movs	r2, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	f040 815a 	bne.w	800286e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d005      	beq.n	80025d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d130      	bne.n	8002634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	2203      	movs	r2, #3
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002608:	2201      	movs	r2, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 0201 	and.w	r2, r3, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	2b03      	cmp	r3, #3
 800263e:	d017      	beq.n	8002670 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	2203      	movs	r2, #3
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d123      	bne.n	80026c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	69b9      	ldr	r1, [r7, #24]
 80026c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0203 	and.w	r2, r3, #3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80b4 	beq.w	800286e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b60      	ldr	r3, [pc, #384]	; (800288c <HAL_GPIO_Init+0x30c>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a5f      	ldr	r2, [pc, #380]	; (800288c <HAL_GPIO_Init+0x30c>)
 8002710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b5d      	ldr	r3, [pc, #372]	; (800288c <HAL_GPIO_Init+0x30c>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002722:	4a5b      	ldr	r2, [pc, #364]	; (8002890 <HAL_GPIO_Init+0x310>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a52      	ldr	r2, [pc, #328]	; (8002894 <HAL_GPIO_Init+0x314>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d02b      	beq.n	80027a6 <HAL_GPIO_Init+0x226>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a51      	ldr	r2, [pc, #324]	; (8002898 <HAL_GPIO_Init+0x318>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d025      	beq.n	80027a2 <HAL_GPIO_Init+0x222>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a50      	ldr	r2, [pc, #320]	; (800289c <HAL_GPIO_Init+0x31c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01f      	beq.n	800279e <HAL_GPIO_Init+0x21e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a4f      	ldr	r2, [pc, #316]	; (80028a0 <HAL_GPIO_Init+0x320>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d019      	beq.n	800279a <HAL_GPIO_Init+0x21a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a4e      	ldr	r2, [pc, #312]	; (80028a4 <HAL_GPIO_Init+0x324>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d013      	beq.n	8002796 <HAL_GPIO_Init+0x216>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a4d      	ldr	r2, [pc, #308]	; (80028a8 <HAL_GPIO_Init+0x328>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00d      	beq.n	8002792 <HAL_GPIO_Init+0x212>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4c      	ldr	r2, [pc, #304]	; (80028ac <HAL_GPIO_Init+0x32c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d007      	beq.n	800278e <HAL_GPIO_Init+0x20e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a4b      	ldr	r2, [pc, #300]	; (80028b0 <HAL_GPIO_Init+0x330>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d101      	bne.n	800278a <HAL_GPIO_Init+0x20a>
 8002786:	2307      	movs	r3, #7
 8002788:	e00e      	b.n	80027a8 <HAL_GPIO_Init+0x228>
 800278a:	2308      	movs	r3, #8
 800278c:	e00c      	b.n	80027a8 <HAL_GPIO_Init+0x228>
 800278e:	2306      	movs	r3, #6
 8002790:	e00a      	b.n	80027a8 <HAL_GPIO_Init+0x228>
 8002792:	2305      	movs	r3, #5
 8002794:	e008      	b.n	80027a8 <HAL_GPIO_Init+0x228>
 8002796:	2304      	movs	r3, #4
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_Init+0x228>
 800279a:	2303      	movs	r3, #3
 800279c:	e004      	b.n	80027a8 <HAL_GPIO_Init+0x228>
 800279e:	2302      	movs	r3, #2
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_Init+0x228>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_Init+0x228>
 80027a6:	2300      	movs	r3, #0
 80027a8:	69fa      	ldr	r2, [r7, #28]
 80027aa:	f002 0203 	and.w	r2, r2, #3
 80027ae:	0092      	lsls	r2, r2, #2
 80027b0:	4093      	lsls	r3, r2
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b8:	4935      	ldr	r1, [pc, #212]	; (8002890 <HAL_GPIO_Init+0x310>)
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3302      	adds	r3, #2
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_GPIO_Init+0x334>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027ea:	4a32      	ldr	r2, [pc, #200]	; (80028b4 <HAL_GPIO_Init+0x334>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027f0:	4b30      	ldr	r3, [pc, #192]	; (80028b4 <HAL_GPIO_Init+0x334>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002814:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <HAL_GPIO_Init+0x334>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_GPIO_Init+0x334>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	43db      	mvns	r3, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4013      	ands	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_GPIO_Init+0x334>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_GPIO_Init+0x334>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002868:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <HAL_GPIO_Init+0x334>)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3301      	adds	r3, #1
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b0f      	cmp	r3, #15
 8002878:	f67f ae90 	bls.w	800259c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	3724      	adds	r7, #36	; 0x24
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40013800 	.word	0x40013800
 8002894:	40020000 	.word	0x40020000
 8002898:	40020400 	.word	0x40020400
 800289c:	40020800 	.word	0x40020800
 80028a0:	40020c00 	.word	0x40020c00
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40021400 	.word	0x40021400
 80028ac:	40021800 	.word	0x40021800
 80028b0:	40021c00 	.word	0x40021c00
 80028b4:	40013c00 	.word	0x40013c00

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028c8:	787b      	ldrb	r3, [r7, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d4:	e003      	b.n	80028de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	041a      	lsls	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	619a      	str	r2, [r3, #24]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028f6:	4b08      	ldr	r3, [pc, #32]	; (8002918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002904:	88fb      	ldrh	r3, [r7, #6]
 8002906:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	4618      	mov	r0, r3
 800290c:	f000 f806 	bl	800291c <HAL_GPIO_EXTI_Callback>
  }
}
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40013c00 	.word	0x40013c00

0800291c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e264      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d075      	beq.n	8002a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002952:	4ba3      	ldr	r3, [pc, #652]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d00c      	beq.n	8002978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295e:	4ba0      	ldr	r3, [pc, #640]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d112      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4b9d      	ldr	r3, [pc, #628]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002976:	d10b      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	4b99      	ldr	r3, [pc, #612]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d05b      	beq.n	8002a3c <HAL_RCC_OscConfig+0x108>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d157      	bne.n	8002a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e23f      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x74>
 800299a:	4b91      	ldr	r3, [pc, #580]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a90      	ldr	r2, [pc, #576]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x98>
 80029b2:	4b8b      	ldr	r3, [pc, #556]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a8a      	ldr	r2, [pc, #552]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b88      	ldr	r3, [pc, #544]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a87      	ldr	r2, [pc, #540]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029cc:	4b84      	ldr	r3, [pc, #528]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a83      	ldr	r2, [pc, #524]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b81      	ldr	r3, [pc, #516]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a80      	ldr	r2, [pc, #512]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe fa72 	bl	8000ed4 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fa6e 	bl	8000ed4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e204      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b76      	ldr	r3, [pc, #472]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xc0>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fa5e 	bl	8000ed4 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fa5a 	bl	8000ed4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1f0      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b6c      	ldr	r3, [pc, #432]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0xe8>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b5f      	ldr	r3, [pc, #380]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1c4      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b56      	ldr	r3, [pc, #344]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4952      	ldr	r1, [pc, #328]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <HAL_RCC_OscConfig+0x2b0>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fa13 	bl	8000ed4 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fa0f 	bl	8000ed4 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1a5      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4940      	ldr	r1, [pc, #256]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_OscConfig+0x2b0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe f9f2 	bl	8000ed4 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe f9ee 	bl	8000ed4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e184      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d030      	beq.n	8002b80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <HAL_RCC_OscConfig+0x2b4>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe f9d2 	bl	8000ed4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe f9ce 	bl	8000ed4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e164      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x200>
 8002b52:	e015      	b.n	8002b80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_RCC_OscConfig+0x2b4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f9bb 	bl	8000ed4 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f9b7 	bl	8000ed4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e14d      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1f0      	bne.n	8002b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80a0 	beq.w	8002cce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10f      	bne.n	8002bbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bac:	6413      	str	r3, [r2, #64]	; 0x40
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_OscConfig+0x2b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d121      	bne.n	8002c0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <HAL_RCC_OscConfig+0x2b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a07      	ldr	r2, [pc, #28]	; (8002bec <HAL_RCC_OscConfig+0x2b8>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bd6:	f7fe f97d 	bl	8000ed4 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bdc:	e011      	b.n	8002c02 <HAL_RCC_OscConfig+0x2ce>
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	42470000 	.word	0x42470000
 8002be8:	42470e80 	.word	0x42470e80
 8002bec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7fe f970 	bl	8000ed4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e106      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	4b85      	ldr	r3, [pc, #532]	; (8002e18 <HAL_RCC_OscConfig+0x4e4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x2f0>
 8002c16:	4b81      	ldr	r3, [pc, #516]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	4a80      	ldr	r2, [pc, #512]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	; 0x70
 8002c22:	e01c      	b.n	8002c5e <HAL_RCC_OscConfig+0x32a>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x312>
 8002c2c:	4b7b      	ldr	r3, [pc, #492]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	4a7a      	ldr	r2, [pc, #488]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c32:	f043 0304 	orr.w	r3, r3, #4
 8002c36:	6713      	str	r3, [r2, #112]	; 0x70
 8002c38:	4b78      	ldr	r3, [pc, #480]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	4a77      	ldr	r2, [pc, #476]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c3e:	f043 0301 	orr.w	r3, r3, #1
 8002c42:	6713      	str	r3, [r2, #112]	; 0x70
 8002c44:	e00b      	b.n	8002c5e <HAL_RCC_OscConfig+0x32a>
 8002c46:	4b75      	ldr	r3, [pc, #468]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4a:	4a74      	ldr	r2, [pc, #464]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	f023 0301 	bic.w	r3, r3, #1
 8002c50:	6713      	str	r3, [r2, #112]	; 0x70
 8002c52:	4b72      	ldr	r3, [pc, #456]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	4a71      	ldr	r2, [pc, #452]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c58:	f023 0304 	bic.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d015      	beq.n	8002c92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c66:	f7fe f935 	bl	8000ed4 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe f931 	bl	8000ed4 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0c5      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	4b65      	ldr	r3, [pc, #404]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ee      	beq.n	8002c6e <HAL_RCC_OscConfig+0x33a>
 8002c90:	e014      	b.n	8002cbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c92:	f7fe f91f 	bl	8000ed4 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9a:	f7fe f91b 	bl	8000ed4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0af      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb0:	4b5a      	ldr	r3, [pc, #360]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ee      	bne.n	8002c9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cbc:	7dfb      	ldrb	r3, [r7, #23]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc2:	4b56      	ldr	r3, [pc, #344]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a55      	ldr	r2, [pc, #340]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 809b 	beq.w	8002e0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd8:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 030c 	and.w	r3, r3, #12
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d05c      	beq.n	8002d9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d141      	bne.n	8002d70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cec:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <HAL_RCC_OscConfig+0x4ec>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f8ef 	bl	8000ed4 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cfa:	f7fe f8eb 	bl	8000ed4 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e081      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0c:	4b43      	ldr	r3, [pc, #268]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f0      	bne.n	8002cfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	019b      	lsls	r3, r3, #6
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	3b01      	subs	r3, #1
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	061b      	lsls	r3, r3, #24
 8002d3c:	4937      	ldr	r1, [pc, #220]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d42:	4b37      	ldr	r3, [pc, #220]	; (8002e20 <HAL_RCC_OscConfig+0x4ec>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d48:	f7fe f8c4 	bl	8000ed4 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe f8c0 	bl	8000ed4 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e056      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCC_OscConfig+0x41c>
 8002d6e:	e04e      	b.n	8002e0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d70:	4b2b      	ldr	r3, [pc, #172]	; (8002e20 <HAL_RCC_OscConfig+0x4ec>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d76:	f7fe f8ad 	bl	8000ed4 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fe f8a9 	bl	8000ed4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e03f      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f0      	bne.n	8002d7e <HAL_RCC_OscConfig+0x44a>
 8002d9c:	e037      	b.n	8002e0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e032      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002daa:	4b1c      	ldr	r3, [pc, #112]	; (8002e1c <HAL_RCC_OscConfig+0x4e8>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d028      	beq.n	8002e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d121      	bne.n	8002e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d11a      	bne.n	8002e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dda:	4013      	ands	r3, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002de0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d111      	bne.n	8002e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	085b      	lsrs	r3, r3, #1
 8002df2:	3b01      	subs	r3, #1
 8002df4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d107      	bne.n	8002e0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	42470060 	.word	0x42470060

08002e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0cc      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b68      	ldr	r3, [pc, #416]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d90c      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b63      	ldr	r3, [pc, #396]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0b8      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e78:	4b59      	ldr	r3, [pc, #356]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a58      	ldr	r2, [pc, #352]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e90:	4b53      	ldr	r3, [pc, #332]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a52      	ldr	r2, [pc, #328]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	494d      	ldr	r1, [pc, #308]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d044      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d119      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e07f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e06f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e067      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f02:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4934      	ldr	r1, [pc, #208]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f14:	f7fd ffde 	bl	8000ed4 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1c:	f7fd ffda 	bl	8000ed4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e04f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 020c 	and.w	r2, r3, #12
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1eb      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d20c      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e032      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f78:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4916      	ldr	r1, [pc, #88]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f96:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002faa:	f000 f821 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	490a      	ldr	r1, [pc, #40]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	5ccb      	ldrb	r3, [r1, r3]
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	4a09      	ldr	r2, [pc, #36]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd ff3e 	bl	8000e4c <HAL_InitTick>

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023c00 	.word	0x40023c00
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	0800415c 	.word	0x0800415c
 8002fe8:	20000008 	.word	0x20000008
 8002fec:	2000000c 	.word	0x2000000c

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	2300      	movs	r3, #0
 8003002:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003008:	4b67      	ldr	r3, [pc, #412]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d00d      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x40>
 8003014:	2b08      	cmp	r3, #8
 8003016:	f200 80bd 	bhi.w	8003194 <HAL_RCC_GetSysClockFreq+0x1a4>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x34>
 800301e:	2b04      	cmp	r3, #4
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x3a>
 8003022:	e0b7      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b61      	ldr	r3, [pc, #388]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003026:	60bb      	str	r3, [r7, #8]
       break;
 8003028:	e0b7      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302a:	4b61      	ldr	r3, [pc, #388]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800302c:	60bb      	str	r3, [r7, #8]
      break;
 800302e:	e0b4      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003030:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003038:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303a:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d04d      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	4b58      	ldr	r3, [pc, #352]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	099b      	lsrs	r3, r3, #6
 800304c:	461a      	mov	r2, r3
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	ea02 0800 	and.w	r8, r2, r0
 800305e:	ea03 0901 	and.w	r9, r3, r1
 8003062:	4640      	mov	r0, r8
 8003064:	4649      	mov	r1, r9
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	014b      	lsls	r3, r1, #5
 8003070:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003074:	0142      	lsls	r2, r0, #5
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	ebb0 0008 	subs.w	r0, r0, r8
 800307e:	eb61 0109 	sbc.w	r1, r1, r9
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	018b      	lsls	r3, r1, #6
 800308c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003090:	0182      	lsls	r2, r0, #6
 8003092:	1a12      	subs	r2, r2, r0
 8003094:	eb63 0301 	sbc.w	r3, r3, r1
 8003098:	f04f 0000 	mov.w	r0, #0
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	00d9      	lsls	r1, r3, #3
 80030a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030a6:	00d0      	lsls	r0, r2, #3
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	eb12 0208 	adds.w	r2, r2, r8
 80030b0:	eb43 0309 	adc.w	r3, r3, r9
 80030b4:	f04f 0000 	mov.w	r0, #0
 80030b8:	f04f 0100 	mov.w	r1, #0
 80030bc:	0259      	lsls	r1, r3, #9
 80030be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030c2:	0250      	lsls	r0, r2, #9
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	f7fd f8d4 	bl	8000280 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e04a      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b31      	ldr	r3, [pc, #196]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	461a      	mov	r2, r3
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	ea02 0400 	and.w	r4, r2, r0
 80030fa:	ea03 0501 	and.w	r5, r3, r1
 80030fe:	4620      	mov	r0, r4
 8003100:	4629      	mov	r1, r5
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	014b      	lsls	r3, r1, #5
 800310c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003110:	0142      	lsls	r2, r0, #5
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	1b00      	subs	r0, r0, r4
 8003118:	eb61 0105 	sbc.w	r1, r1, r5
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	018b      	lsls	r3, r1, #6
 8003126:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800312a:	0182      	lsls	r2, r0, #6
 800312c:	1a12      	subs	r2, r2, r0
 800312e:	eb63 0301 	sbc.w	r3, r3, r1
 8003132:	f04f 0000 	mov.w	r0, #0
 8003136:	f04f 0100 	mov.w	r1, #0
 800313a:	00d9      	lsls	r1, r3, #3
 800313c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003140:	00d0      	lsls	r0, r2, #3
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	1912      	adds	r2, r2, r4
 8003148:	eb45 0303 	adc.w	r3, r5, r3
 800314c:	f04f 0000 	mov.w	r0, #0
 8003150:	f04f 0100 	mov.w	r1, #0
 8003154:	0299      	lsls	r1, r3, #10
 8003156:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800315a:	0290      	lsls	r0, r2, #10
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	461a      	mov	r2, r3
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	f7fd f888 	bl	8000280 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4613      	mov	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	3301      	adds	r3, #1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	60bb      	str	r3, [r7, #8]
      break;
 8003192:	e002      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003196:	60bb      	str	r3, [r7, #8]
      break;
 8003198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319a:	68bb      	ldr	r3, [r7, #8]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	007a1200 	.word	0x007a1200

080031b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	20000008 	.word	0x20000008

080031cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031d0:	f7ff fff0 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031d4:	4602      	mov	r2, r0
 80031d6:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	0a9b      	lsrs	r3, r3, #10
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	4903      	ldr	r1, [pc, #12]	; (80031f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e2:	5ccb      	ldrb	r3, [r1, r3]
 80031e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40023800 	.word	0x40023800
 80031f0:	0800416c 	.word	0x0800416c

080031f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031f8:	f7ff ffdc 	bl	80031b4 <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	0b5b      	lsrs	r3, r3, #13
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	4903      	ldr	r1, [pc, #12]	; (8003218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800320a:	5ccb      	ldrb	r3, [r1, r3]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40023800 	.word	0x40023800
 8003218:	0800416c 	.word	0x0800416c

0800321c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e03f      	b.n	80032ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd fc78 	bl	8000b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2224      	movs	r2, #36	; 0x24
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f929 	bl	80034b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003274:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003284:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68da      	ldr	r2, [r3, #12]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003294:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b08a      	sub	sp, #40	; 0x28
 80032ba:	af02      	add	r7, sp, #8
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d17c      	bne.n	80033d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_UART_Transmit+0x2c>
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e075      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Transmit+0x3e>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e06e      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2221      	movs	r2, #33	; 0x21
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330a:	f7fd fde3 	bl	8000ed4 <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d108      	bne.n	8003338 <HAL_UART_Transmit+0x82>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e003      	b.n	8003340 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003348:	e02a      	b.n	80033a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f840 	bl	80033da <UART_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e036      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	881b      	ldrh	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003378:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	3302      	adds	r3, #2
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	e007      	b.n	8003392 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	781a      	ldrb	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	3301      	adds	r3, #1
 8003390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1cf      	bne.n	800334a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2200      	movs	r2, #0
 80033b2:	2140      	movs	r1, #64	; 0x40
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 f810 	bl	80033da <UART_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e006      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b090      	sub	sp, #64	; 0x40
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ea:	e050      	b.n	800348e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d04c      	beq.n	800348e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d007      	beq.n	800340a <UART_WaitOnFlagUntilTimeout+0x30>
 80033fa:	f7fd fd6b 	bl	8000ed4 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003406:	429a      	cmp	r2, r3
 8003408:	d241      	bcs.n	800348e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	330c      	adds	r3, #12
 8003410:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	e853 3f00 	ldrex	r3, [r3]
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	330c      	adds	r3, #12
 8003428:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800342a:	637a      	str	r2, [r7, #52]	; 0x34
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e5      	bne.n	800340a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3314      	adds	r3, #20
 8003444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	613b      	str	r3, [r7, #16]
   return(result);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f023 0301 	bic.w	r3, r3, #1
 8003454:	63bb      	str	r3, [r7, #56]	; 0x38
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3314      	adds	r3, #20
 800345c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800345e:	623a      	str	r2, [r7, #32]
 8003460:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	69f9      	ldr	r1, [r7, #28]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	61bb      	str	r3, [r7, #24]
   return(result);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e5      	bne.n	800343e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e00f      	b.n	80034ae <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d09f      	beq.n	80033ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3740      	adds	r7, #64	; 0x40
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034bc:	b09f      	sub	sp, #124	; 0x7c
 80034be:	af00      	add	r7, sp, #0
 80034c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ce:	68d9      	ldr	r1, [r3, #12]
 80034d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	ea40 0301 	orr.w	r3, r0, r1
 80034d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	431a      	orrs	r2, r3
 80034ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80034f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034fc:	f021 010c 	bic.w	r1, r1, #12
 8003500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003506:	430b      	orrs	r3, r1
 8003508:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800350a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003516:	6999      	ldr	r1, [r3, #24]
 8003518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	ea40 0301 	orr.w	r3, r0, r1
 8003520:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4bc5      	ldr	r3, [pc, #788]	; (800383c <UART_SetConfig+0x384>)
 8003528:	429a      	cmp	r2, r3
 800352a:	d004      	beq.n	8003536 <UART_SetConfig+0x7e>
 800352c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4bc3      	ldr	r3, [pc, #780]	; (8003840 <UART_SetConfig+0x388>)
 8003532:	429a      	cmp	r2, r3
 8003534:	d103      	bne.n	800353e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003536:	f7ff fe5d 	bl	80031f4 <HAL_RCC_GetPCLK2Freq>
 800353a:	6778      	str	r0, [r7, #116]	; 0x74
 800353c:	e002      	b.n	8003544 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800353e:	f7ff fe45 	bl	80031cc <HAL_RCC_GetPCLK1Freq>
 8003542:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354c:	f040 80b6 	bne.w	80036bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003552:	461c      	mov	r4, r3
 8003554:	f04f 0500 	mov.w	r5, #0
 8003558:	4622      	mov	r2, r4
 800355a:	462b      	mov	r3, r5
 800355c:	1891      	adds	r1, r2, r2
 800355e:	6439      	str	r1, [r7, #64]	; 0x40
 8003560:	415b      	adcs	r3, r3
 8003562:	647b      	str	r3, [r7, #68]	; 0x44
 8003564:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003568:	1912      	adds	r2, r2, r4
 800356a:	eb45 0303 	adc.w	r3, r5, r3
 800356e:	f04f 0000 	mov.w	r0, #0
 8003572:	f04f 0100 	mov.w	r1, #0
 8003576:	00d9      	lsls	r1, r3, #3
 8003578:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800357c:	00d0      	lsls	r0, r2, #3
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	1911      	adds	r1, r2, r4
 8003584:	6639      	str	r1, [r7, #96]	; 0x60
 8003586:	416b      	adcs	r3, r5
 8003588:	667b      	str	r3, [r7, #100]	; 0x64
 800358a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	461a      	mov	r2, r3
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	1891      	adds	r1, r2, r2
 8003596:	63b9      	str	r1, [r7, #56]	; 0x38
 8003598:	415b      	adcs	r3, r3
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800359c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80035a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80035a4:	f7fc fe6c 	bl	8000280 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4ba5      	ldr	r3, [pc, #660]	; (8003844 <UART_SetConfig+0x38c>)
 80035ae:	fba3 2302 	umull	r2, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	011e      	lsls	r6, r3, #4
 80035b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b8:	461c      	mov	r4, r3
 80035ba:	f04f 0500 	mov.w	r5, #0
 80035be:	4622      	mov	r2, r4
 80035c0:	462b      	mov	r3, r5
 80035c2:	1891      	adds	r1, r2, r2
 80035c4:	6339      	str	r1, [r7, #48]	; 0x30
 80035c6:	415b      	adcs	r3, r3
 80035c8:	637b      	str	r3, [r7, #52]	; 0x34
 80035ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80035ce:	1912      	adds	r2, r2, r4
 80035d0:	eb45 0303 	adc.w	r3, r5, r3
 80035d4:	f04f 0000 	mov.w	r0, #0
 80035d8:	f04f 0100 	mov.w	r1, #0
 80035dc:	00d9      	lsls	r1, r3, #3
 80035de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035e2:	00d0      	lsls	r0, r2, #3
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	1911      	adds	r1, r2, r4
 80035ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ec:	416b      	adcs	r3, r5
 80035ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	461a      	mov	r2, r3
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	1891      	adds	r1, r2, r2
 80035fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80035fe:	415b      	adcs	r3, r3
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003602:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003606:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800360a:	f7fc fe39 	bl	8000280 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4b8c      	ldr	r3, [pc, #560]	; (8003844 <UART_SetConfig+0x38c>)
 8003614:	fba3 1302 	umull	r1, r3, r3, r2
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	2164      	movs	r1, #100	; 0x64
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	3332      	adds	r3, #50	; 0x32
 8003626:	4a87      	ldr	r2, [pc, #540]	; (8003844 <UART_SetConfig+0x38c>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003634:	441e      	add	r6, r3
 8003636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003638:	4618      	mov	r0, r3
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	4602      	mov	r2, r0
 8003640:	460b      	mov	r3, r1
 8003642:	1894      	adds	r4, r2, r2
 8003644:	623c      	str	r4, [r7, #32]
 8003646:	415b      	adcs	r3, r3
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800364e:	1812      	adds	r2, r2, r0
 8003650:	eb41 0303 	adc.w	r3, r1, r3
 8003654:	f04f 0400 	mov.w	r4, #0
 8003658:	f04f 0500 	mov.w	r5, #0
 800365c:	00dd      	lsls	r5, r3, #3
 800365e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003662:	00d4      	lsls	r4, r2, #3
 8003664:	4622      	mov	r2, r4
 8003666:	462b      	mov	r3, r5
 8003668:	1814      	adds	r4, r2, r0
 800366a:	653c      	str	r4, [r7, #80]	; 0x50
 800366c:	414b      	adcs	r3, r1
 800366e:	657b      	str	r3, [r7, #84]	; 0x54
 8003670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	461a      	mov	r2, r3
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	1891      	adds	r1, r2, r2
 800367c:	61b9      	str	r1, [r7, #24]
 800367e:	415b      	adcs	r3, r3
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003686:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800368a:	f7fc fdf9 	bl	8000280 <__aeabi_uldivmod>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4b6c      	ldr	r3, [pc, #432]	; (8003844 <UART_SetConfig+0x38c>)
 8003694:	fba3 1302 	umull	r1, r3, r3, r2
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	2164      	movs	r1, #100	; 0x64
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	3332      	adds	r3, #50	; 0x32
 80036a6:	4a67      	ldr	r2, [pc, #412]	; (8003844 <UART_SetConfig+0x38c>)
 80036a8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	f003 0207 	and.w	r2, r3, #7
 80036b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4432      	add	r2, r6
 80036b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036ba:	e0b9      	b.n	8003830 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036be:	461c      	mov	r4, r3
 80036c0:	f04f 0500 	mov.w	r5, #0
 80036c4:	4622      	mov	r2, r4
 80036c6:	462b      	mov	r3, r5
 80036c8:	1891      	adds	r1, r2, r2
 80036ca:	6139      	str	r1, [r7, #16]
 80036cc:	415b      	adcs	r3, r3
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036d4:	1912      	adds	r2, r2, r4
 80036d6:	eb45 0303 	adc.w	r3, r5, r3
 80036da:	f04f 0000 	mov.w	r0, #0
 80036de:	f04f 0100 	mov.w	r1, #0
 80036e2:	00d9      	lsls	r1, r3, #3
 80036e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036e8:	00d0      	lsls	r0, r2, #3
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	eb12 0804 	adds.w	r8, r2, r4
 80036f2:	eb43 0905 	adc.w	r9, r3, r5
 80036f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f04f 0100 	mov.w	r1, #0
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	008b      	lsls	r3, r1, #2
 800370a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800370e:	0082      	lsls	r2, r0, #2
 8003710:	4640      	mov	r0, r8
 8003712:	4649      	mov	r1, r9
 8003714:	f7fc fdb4 	bl	8000280 <__aeabi_uldivmod>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4b49      	ldr	r3, [pc, #292]	; (8003844 <UART_SetConfig+0x38c>)
 800371e:	fba3 2302 	umull	r2, r3, r3, r2
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	011e      	lsls	r6, r3, #4
 8003726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003728:	4618      	mov	r0, r3
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	1894      	adds	r4, r2, r2
 8003734:	60bc      	str	r4, [r7, #8]
 8003736:	415b      	adcs	r3, r3
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800373e:	1812      	adds	r2, r2, r0
 8003740:	eb41 0303 	adc.w	r3, r1, r3
 8003744:	f04f 0400 	mov.w	r4, #0
 8003748:	f04f 0500 	mov.w	r5, #0
 800374c:	00dd      	lsls	r5, r3, #3
 800374e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003752:	00d4      	lsls	r4, r2, #3
 8003754:	4622      	mov	r2, r4
 8003756:	462b      	mov	r3, r5
 8003758:	1814      	adds	r4, r2, r0
 800375a:	64bc      	str	r4, [r7, #72]	; 0x48
 800375c:	414b      	adcs	r3, r1
 800375e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4618      	mov	r0, r3
 8003766:	f04f 0100 	mov.w	r1, #0
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	008b      	lsls	r3, r1, #2
 8003774:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003778:	0082      	lsls	r2, r0, #2
 800377a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800377e:	f7fc fd7f 	bl	8000280 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <UART_SetConfig+0x38c>)
 8003788:	fba3 1302 	umull	r1, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	2164      	movs	r1, #100	; 0x64
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	3332      	adds	r3, #50	; 0x32
 800379a:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <UART_SetConfig+0x38c>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037a6:	441e      	add	r6, r3
 80037a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037aa:	4618      	mov	r0, r3
 80037ac:	f04f 0100 	mov.w	r1, #0
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	1894      	adds	r4, r2, r2
 80037b6:	603c      	str	r4, [r7, #0]
 80037b8:	415b      	adcs	r3, r3
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037c0:	1812      	adds	r2, r2, r0
 80037c2:	eb41 0303 	adc.w	r3, r1, r3
 80037c6:	f04f 0400 	mov.w	r4, #0
 80037ca:	f04f 0500 	mov.w	r5, #0
 80037ce:	00dd      	lsls	r5, r3, #3
 80037d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037d4:	00d4      	lsls	r4, r2, #3
 80037d6:	4622      	mov	r2, r4
 80037d8:	462b      	mov	r3, r5
 80037da:	eb12 0a00 	adds.w	sl, r2, r0
 80037de:	eb43 0b01 	adc.w	fp, r3, r1
 80037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	008b      	lsls	r3, r1, #2
 80037f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037fa:	0082      	lsls	r2, r0, #2
 80037fc:	4650      	mov	r0, sl
 80037fe:	4659      	mov	r1, fp
 8003800:	f7fc fd3e 	bl	8000280 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <UART_SetConfig+0x38c>)
 800380a:	fba3 1302 	umull	r1, r3, r3, r2
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	2164      	movs	r1, #100	; 0x64
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	3332      	adds	r3, #50	; 0x32
 800381c:	4a09      	ldr	r2, [pc, #36]	; (8003844 <UART_SetConfig+0x38c>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	f003 020f 	and.w	r2, r3, #15
 8003828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4432      	add	r2, r6
 800382e:	609a      	str	r2, [r3, #8]
}
 8003830:	bf00      	nop
 8003832:	377c      	adds	r7, #124	; 0x7c
 8003834:	46bd      	mov	sp, r7
 8003836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800383a:	bf00      	nop
 800383c:	40011000 	.word	0x40011000
 8003840:	40011400 	.word	0x40011400
 8003844:	51eb851f 	.word	0x51eb851f

08003848 <__errno>:
 8003848:	4b01      	ldr	r3, [pc, #4]	; (8003850 <__errno+0x8>)
 800384a:	6818      	ldr	r0, [r3, #0]
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	20000014 	.word	0x20000014

08003854 <__libc_init_array>:
 8003854:	b570      	push	{r4, r5, r6, lr}
 8003856:	4d0d      	ldr	r5, [pc, #52]	; (800388c <__libc_init_array+0x38>)
 8003858:	4c0d      	ldr	r4, [pc, #52]	; (8003890 <__libc_init_array+0x3c>)
 800385a:	1b64      	subs	r4, r4, r5
 800385c:	10a4      	asrs	r4, r4, #2
 800385e:	2600      	movs	r6, #0
 8003860:	42a6      	cmp	r6, r4
 8003862:	d109      	bne.n	8003878 <__libc_init_array+0x24>
 8003864:	4d0b      	ldr	r5, [pc, #44]	; (8003894 <__libc_init_array+0x40>)
 8003866:	4c0c      	ldr	r4, [pc, #48]	; (8003898 <__libc_init_array+0x44>)
 8003868:	f000 fc4e 	bl	8004108 <_init>
 800386c:	1b64      	subs	r4, r4, r5
 800386e:	10a4      	asrs	r4, r4, #2
 8003870:	2600      	movs	r6, #0
 8003872:	42a6      	cmp	r6, r4
 8003874:	d105      	bne.n	8003882 <__libc_init_array+0x2e>
 8003876:	bd70      	pop	{r4, r5, r6, pc}
 8003878:	f855 3b04 	ldr.w	r3, [r5], #4
 800387c:	4798      	blx	r3
 800387e:	3601      	adds	r6, #1
 8003880:	e7ee      	b.n	8003860 <__libc_init_array+0xc>
 8003882:	f855 3b04 	ldr.w	r3, [r5], #4
 8003886:	4798      	blx	r3
 8003888:	3601      	adds	r6, #1
 800388a:	e7f2      	b.n	8003872 <__libc_init_array+0x1e>
 800388c:	080041b0 	.word	0x080041b0
 8003890:	080041b0 	.word	0x080041b0
 8003894:	080041b0 	.word	0x080041b0
 8003898:	080041b4 	.word	0x080041b4

0800389c <memset>:
 800389c:	4402      	add	r2, r0
 800389e:	4603      	mov	r3, r0
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d100      	bne.n	80038a6 <memset+0xa>
 80038a4:	4770      	bx	lr
 80038a6:	f803 1b01 	strb.w	r1, [r3], #1
 80038aa:	e7f9      	b.n	80038a0 <memset+0x4>

080038ac <siprintf>:
 80038ac:	b40e      	push	{r1, r2, r3}
 80038ae:	b500      	push	{lr}
 80038b0:	b09c      	sub	sp, #112	; 0x70
 80038b2:	ab1d      	add	r3, sp, #116	; 0x74
 80038b4:	9002      	str	r0, [sp, #8]
 80038b6:	9006      	str	r0, [sp, #24]
 80038b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038bc:	4809      	ldr	r0, [pc, #36]	; (80038e4 <siprintf+0x38>)
 80038be:	9107      	str	r1, [sp, #28]
 80038c0:	9104      	str	r1, [sp, #16]
 80038c2:	4909      	ldr	r1, [pc, #36]	; (80038e8 <siprintf+0x3c>)
 80038c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80038c8:	9105      	str	r1, [sp, #20]
 80038ca:	6800      	ldr	r0, [r0, #0]
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	a902      	add	r1, sp, #8
 80038d0:	f000 f868 	bl	80039a4 <_svfiprintf_r>
 80038d4:	9b02      	ldr	r3, [sp, #8]
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
 80038da:	b01c      	add	sp, #112	; 0x70
 80038dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80038e0:	b003      	add	sp, #12
 80038e2:	4770      	bx	lr
 80038e4:	20000014 	.word	0x20000014
 80038e8:	ffff0208 	.word	0xffff0208

080038ec <__ssputs_r>:
 80038ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f0:	688e      	ldr	r6, [r1, #8]
 80038f2:	429e      	cmp	r6, r3
 80038f4:	4682      	mov	sl, r0
 80038f6:	460c      	mov	r4, r1
 80038f8:	4690      	mov	r8, r2
 80038fa:	461f      	mov	r7, r3
 80038fc:	d838      	bhi.n	8003970 <__ssputs_r+0x84>
 80038fe:	898a      	ldrh	r2, [r1, #12]
 8003900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003904:	d032      	beq.n	800396c <__ssputs_r+0x80>
 8003906:	6825      	ldr	r5, [r4, #0]
 8003908:	6909      	ldr	r1, [r1, #16]
 800390a:	eba5 0901 	sub.w	r9, r5, r1
 800390e:	6965      	ldr	r5, [r4, #20]
 8003910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003918:	3301      	adds	r3, #1
 800391a:	444b      	add	r3, r9
 800391c:	106d      	asrs	r5, r5, #1
 800391e:	429d      	cmp	r5, r3
 8003920:	bf38      	it	cc
 8003922:	461d      	movcc	r5, r3
 8003924:	0553      	lsls	r3, r2, #21
 8003926:	d531      	bpl.n	800398c <__ssputs_r+0xa0>
 8003928:	4629      	mov	r1, r5
 800392a:	f000 fb47 	bl	8003fbc <_malloc_r>
 800392e:	4606      	mov	r6, r0
 8003930:	b950      	cbnz	r0, 8003948 <__ssputs_r+0x5c>
 8003932:	230c      	movs	r3, #12
 8003934:	f8ca 3000 	str.w	r3, [sl]
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800393e:	81a3      	strh	r3, [r4, #12]
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003948:	6921      	ldr	r1, [r4, #16]
 800394a:	464a      	mov	r2, r9
 800394c:	f000 fabe 	bl	8003ecc <memcpy>
 8003950:	89a3      	ldrh	r3, [r4, #12]
 8003952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800395a:	81a3      	strh	r3, [r4, #12]
 800395c:	6126      	str	r6, [r4, #16]
 800395e:	6165      	str	r5, [r4, #20]
 8003960:	444e      	add	r6, r9
 8003962:	eba5 0509 	sub.w	r5, r5, r9
 8003966:	6026      	str	r6, [r4, #0]
 8003968:	60a5      	str	r5, [r4, #8]
 800396a:	463e      	mov	r6, r7
 800396c:	42be      	cmp	r6, r7
 800396e:	d900      	bls.n	8003972 <__ssputs_r+0x86>
 8003970:	463e      	mov	r6, r7
 8003972:	4632      	mov	r2, r6
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	4641      	mov	r1, r8
 8003978:	f000 fab6 	bl	8003ee8 <memmove>
 800397c:	68a3      	ldr	r3, [r4, #8]
 800397e:	6822      	ldr	r2, [r4, #0]
 8003980:	1b9b      	subs	r3, r3, r6
 8003982:	4432      	add	r2, r6
 8003984:	60a3      	str	r3, [r4, #8]
 8003986:	6022      	str	r2, [r4, #0]
 8003988:	2000      	movs	r0, #0
 800398a:	e7db      	b.n	8003944 <__ssputs_r+0x58>
 800398c:	462a      	mov	r2, r5
 800398e:	f000 fb6f 	bl	8004070 <_realloc_r>
 8003992:	4606      	mov	r6, r0
 8003994:	2800      	cmp	r0, #0
 8003996:	d1e1      	bne.n	800395c <__ssputs_r+0x70>
 8003998:	6921      	ldr	r1, [r4, #16]
 800399a:	4650      	mov	r0, sl
 800399c:	f000 fabe 	bl	8003f1c <_free_r>
 80039a0:	e7c7      	b.n	8003932 <__ssputs_r+0x46>
	...

080039a4 <_svfiprintf_r>:
 80039a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a8:	4698      	mov	r8, r3
 80039aa:	898b      	ldrh	r3, [r1, #12]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	b09d      	sub	sp, #116	; 0x74
 80039b0:	4607      	mov	r7, r0
 80039b2:	460d      	mov	r5, r1
 80039b4:	4614      	mov	r4, r2
 80039b6:	d50e      	bpl.n	80039d6 <_svfiprintf_r+0x32>
 80039b8:	690b      	ldr	r3, [r1, #16]
 80039ba:	b963      	cbnz	r3, 80039d6 <_svfiprintf_r+0x32>
 80039bc:	2140      	movs	r1, #64	; 0x40
 80039be:	f000 fafd 	bl	8003fbc <_malloc_r>
 80039c2:	6028      	str	r0, [r5, #0]
 80039c4:	6128      	str	r0, [r5, #16]
 80039c6:	b920      	cbnz	r0, 80039d2 <_svfiprintf_r+0x2e>
 80039c8:	230c      	movs	r3, #12
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	e0d1      	b.n	8003b76 <_svfiprintf_r+0x1d2>
 80039d2:	2340      	movs	r3, #64	; 0x40
 80039d4:	616b      	str	r3, [r5, #20]
 80039d6:	2300      	movs	r3, #0
 80039d8:	9309      	str	r3, [sp, #36]	; 0x24
 80039da:	2320      	movs	r3, #32
 80039dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039e4:	2330      	movs	r3, #48	; 0x30
 80039e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003b90 <_svfiprintf_r+0x1ec>
 80039ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039ee:	f04f 0901 	mov.w	r9, #1
 80039f2:	4623      	mov	r3, r4
 80039f4:	469a      	mov	sl, r3
 80039f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039fa:	b10a      	cbz	r2, 8003a00 <_svfiprintf_r+0x5c>
 80039fc:	2a25      	cmp	r2, #37	; 0x25
 80039fe:	d1f9      	bne.n	80039f4 <_svfiprintf_r+0x50>
 8003a00:	ebba 0b04 	subs.w	fp, sl, r4
 8003a04:	d00b      	beq.n	8003a1e <_svfiprintf_r+0x7a>
 8003a06:	465b      	mov	r3, fp
 8003a08:	4622      	mov	r2, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	4638      	mov	r0, r7
 8003a0e:	f7ff ff6d 	bl	80038ec <__ssputs_r>
 8003a12:	3001      	adds	r0, #1
 8003a14:	f000 80aa 	beq.w	8003b6c <_svfiprintf_r+0x1c8>
 8003a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a1a:	445a      	add	r2, fp
 8003a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80a2 	beq.w	8003b6c <_svfiprintf_r+0x1c8>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a32:	f10a 0a01 	add.w	sl, sl, #1
 8003a36:	9304      	str	r3, [sp, #16]
 8003a38:	9307      	str	r3, [sp, #28]
 8003a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a40:	4654      	mov	r4, sl
 8003a42:	2205      	movs	r2, #5
 8003a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a48:	4851      	ldr	r0, [pc, #324]	; (8003b90 <_svfiprintf_r+0x1ec>)
 8003a4a:	f7fc fbc9 	bl	80001e0 <memchr>
 8003a4e:	9a04      	ldr	r2, [sp, #16]
 8003a50:	b9d8      	cbnz	r0, 8003a8a <_svfiprintf_r+0xe6>
 8003a52:	06d0      	lsls	r0, r2, #27
 8003a54:	bf44      	itt	mi
 8003a56:	2320      	movmi	r3, #32
 8003a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a5c:	0711      	lsls	r1, r2, #28
 8003a5e:	bf44      	itt	mi
 8003a60:	232b      	movmi	r3, #43	; 0x2b
 8003a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a66:	f89a 3000 	ldrb.w	r3, [sl]
 8003a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a6c:	d015      	beq.n	8003a9a <_svfiprintf_r+0xf6>
 8003a6e:	9a07      	ldr	r2, [sp, #28]
 8003a70:	4654      	mov	r4, sl
 8003a72:	2000      	movs	r0, #0
 8003a74:	f04f 0c0a 	mov.w	ip, #10
 8003a78:	4621      	mov	r1, r4
 8003a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a7e:	3b30      	subs	r3, #48	; 0x30
 8003a80:	2b09      	cmp	r3, #9
 8003a82:	d94e      	bls.n	8003b22 <_svfiprintf_r+0x17e>
 8003a84:	b1b0      	cbz	r0, 8003ab4 <_svfiprintf_r+0x110>
 8003a86:	9207      	str	r2, [sp, #28]
 8003a88:	e014      	b.n	8003ab4 <_svfiprintf_r+0x110>
 8003a8a:	eba0 0308 	sub.w	r3, r0, r8
 8003a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a92:	4313      	orrs	r3, r2
 8003a94:	9304      	str	r3, [sp, #16]
 8003a96:	46a2      	mov	sl, r4
 8003a98:	e7d2      	b.n	8003a40 <_svfiprintf_r+0x9c>
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	1d19      	adds	r1, r3, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	9103      	str	r1, [sp, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bfbb      	ittet	lt
 8003aa6:	425b      	neglt	r3, r3
 8003aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8003aac:	9307      	strge	r3, [sp, #28]
 8003aae:	9307      	strlt	r3, [sp, #28]
 8003ab0:	bfb8      	it	lt
 8003ab2:	9204      	strlt	r2, [sp, #16]
 8003ab4:	7823      	ldrb	r3, [r4, #0]
 8003ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ab8:	d10c      	bne.n	8003ad4 <_svfiprintf_r+0x130>
 8003aba:	7863      	ldrb	r3, [r4, #1]
 8003abc:	2b2a      	cmp	r3, #42	; 0x2a
 8003abe:	d135      	bne.n	8003b2c <_svfiprintf_r+0x188>
 8003ac0:	9b03      	ldr	r3, [sp, #12]
 8003ac2:	1d1a      	adds	r2, r3, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	9203      	str	r2, [sp, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfb8      	it	lt
 8003acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ad0:	3402      	adds	r4, #2
 8003ad2:	9305      	str	r3, [sp, #20]
 8003ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003ba0 <_svfiprintf_r+0x1fc>
 8003ad8:	7821      	ldrb	r1, [r4, #0]
 8003ada:	2203      	movs	r2, #3
 8003adc:	4650      	mov	r0, sl
 8003ade:	f7fc fb7f 	bl	80001e0 <memchr>
 8003ae2:	b140      	cbz	r0, 8003af6 <_svfiprintf_r+0x152>
 8003ae4:	2340      	movs	r3, #64	; 0x40
 8003ae6:	eba0 000a 	sub.w	r0, r0, sl
 8003aea:	fa03 f000 	lsl.w	r0, r3, r0
 8003aee:	9b04      	ldr	r3, [sp, #16]
 8003af0:	4303      	orrs	r3, r0
 8003af2:	3401      	adds	r4, #1
 8003af4:	9304      	str	r3, [sp, #16]
 8003af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003afa:	4826      	ldr	r0, [pc, #152]	; (8003b94 <_svfiprintf_r+0x1f0>)
 8003afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b00:	2206      	movs	r2, #6
 8003b02:	f7fc fb6d 	bl	80001e0 <memchr>
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d038      	beq.n	8003b7c <_svfiprintf_r+0x1d8>
 8003b0a:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <_svfiprintf_r+0x1f4>)
 8003b0c:	bb1b      	cbnz	r3, 8003b56 <_svfiprintf_r+0x1b2>
 8003b0e:	9b03      	ldr	r3, [sp, #12]
 8003b10:	3307      	adds	r3, #7
 8003b12:	f023 0307 	bic.w	r3, r3, #7
 8003b16:	3308      	adds	r3, #8
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1c:	4433      	add	r3, r6
 8003b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003b20:	e767      	b.n	80039f2 <_svfiprintf_r+0x4e>
 8003b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b26:	460c      	mov	r4, r1
 8003b28:	2001      	movs	r0, #1
 8003b2a:	e7a5      	b.n	8003a78 <_svfiprintf_r+0xd4>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	3401      	adds	r4, #1
 8003b30:	9305      	str	r3, [sp, #20]
 8003b32:	4619      	mov	r1, r3
 8003b34:	f04f 0c0a 	mov.w	ip, #10
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b3e:	3a30      	subs	r2, #48	; 0x30
 8003b40:	2a09      	cmp	r2, #9
 8003b42:	d903      	bls.n	8003b4c <_svfiprintf_r+0x1a8>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0c5      	beq.n	8003ad4 <_svfiprintf_r+0x130>
 8003b48:	9105      	str	r1, [sp, #20]
 8003b4a:	e7c3      	b.n	8003ad4 <_svfiprintf_r+0x130>
 8003b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b50:	4604      	mov	r4, r0
 8003b52:	2301      	movs	r3, #1
 8003b54:	e7f0      	b.n	8003b38 <_svfiprintf_r+0x194>
 8003b56:	ab03      	add	r3, sp, #12
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	462a      	mov	r2, r5
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <_svfiprintf_r+0x1f8>)
 8003b5e:	a904      	add	r1, sp, #16
 8003b60:	4638      	mov	r0, r7
 8003b62:	f3af 8000 	nop.w
 8003b66:	1c42      	adds	r2, r0, #1
 8003b68:	4606      	mov	r6, r0
 8003b6a:	d1d6      	bne.n	8003b1a <_svfiprintf_r+0x176>
 8003b6c:	89ab      	ldrh	r3, [r5, #12]
 8003b6e:	065b      	lsls	r3, r3, #25
 8003b70:	f53f af2c 	bmi.w	80039cc <_svfiprintf_r+0x28>
 8003b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b76:	b01d      	add	sp, #116	; 0x74
 8003b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7c:	ab03      	add	r3, sp, #12
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	462a      	mov	r2, r5
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <_svfiprintf_r+0x1f8>)
 8003b84:	a904      	add	r1, sp, #16
 8003b86:	4638      	mov	r0, r7
 8003b88:	f000 f87a 	bl	8003c80 <_printf_i>
 8003b8c:	e7eb      	b.n	8003b66 <_svfiprintf_r+0x1c2>
 8003b8e:	bf00      	nop
 8003b90:	08004174 	.word	0x08004174
 8003b94:	0800417e 	.word	0x0800417e
 8003b98:	00000000 	.word	0x00000000
 8003b9c:	080038ed 	.word	0x080038ed
 8003ba0:	0800417a 	.word	0x0800417a

08003ba4 <_printf_common>:
 8003ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba8:	4616      	mov	r6, r2
 8003baa:	4699      	mov	r9, r3
 8003bac:	688a      	ldr	r2, [r1, #8]
 8003bae:	690b      	ldr	r3, [r1, #16]
 8003bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bfb8      	it	lt
 8003bb8:	4613      	movlt	r3, r2
 8003bba:	6033      	str	r3, [r6, #0]
 8003bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	b10a      	cbz	r2, 8003bca <_printf_common+0x26>
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	6033      	str	r3, [r6, #0]
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	0699      	lsls	r1, r3, #26
 8003bce:	bf42      	ittt	mi
 8003bd0:	6833      	ldrmi	r3, [r6, #0]
 8003bd2:	3302      	addmi	r3, #2
 8003bd4:	6033      	strmi	r3, [r6, #0]
 8003bd6:	6825      	ldr	r5, [r4, #0]
 8003bd8:	f015 0506 	ands.w	r5, r5, #6
 8003bdc:	d106      	bne.n	8003bec <_printf_common+0x48>
 8003bde:	f104 0a19 	add.w	sl, r4, #25
 8003be2:	68e3      	ldr	r3, [r4, #12]
 8003be4:	6832      	ldr	r2, [r6, #0]
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	42ab      	cmp	r3, r5
 8003bea:	dc26      	bgt.n	8003c3a <_printf_common+0x96>
 8003bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bf0:	1e13      	subs	r3, r2, #0
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	bf18      	it	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	0692      	lsls	r2, r2, #26
 8003bfa:	d42b      	bmi.n	8003c54 <_printf_common+0xb0>
 8003bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c00:	4649      	mov	r1, r9
 8003c02:	4638      	mov	r0, r7
 8003c04:	47c0      	blx	r8
 8003c06:	3001      	adds	r0, #1
 8003c08:	d01e      	beq.n	8003c48 <_printf_common+0xa4>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	68e5      	ldr	r5, [r4, #12]
 8003c0e:	6832      	ldr	r2, [r6, #0]
 8003c10:	f003 0306 	and.w	r3, r3, #6
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	bf08      	it	eq
 8003c18:	1aad      	subeq	r5, r5, r2
 8003c1a:	68a3      	ldr	r3, [r4, #8]
 8003c1c:	6922      	ldr	r2, [r4, #16]
 8003c1e:	bf0c      	ite	eq
 8003c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c24:	2500      	movne	r5, #0
 8003c26:	4293      	cmp	r3, r2
 8003c28:	bfc4      	itt	gt
 8003c2a:	1a9b      	subgt	r3, r3, r2
 8003c2c:	18ed      	addgt	r5, r5, r3
 8003c2e:	2600      	movs	r6, #0
 8003c30:	341a      	adds	r4, #26
 8003c32:	42b5      	cmp	r5, r6
 8003c34:	d11a      	bne.n	8003c6c <_printf_common+0xc8>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e008      	b.n	8003c4c <_printf_common+0xa8>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4652      	mov	r2, sl
 8003c3e:	4649      	mov	r1, r9
 8003c40:	4638      	mov	r0, r7
 8003c42:	47c0      	blx	r8
 8003c44:	3001      	adds	r0, #1
 8003c46:	d103      	bne.n	8003c50 <_printf_common+0xac>
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c50:	3501      	adds	r5, #1
 8003c52:	e7c6      	b.n	8003be2 <_printf_common+0x3e>
 8003c54:	18e1      	adds	r1, r4, r3
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	2030      	movs	r0, #48	; 0x30
 8003c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c5e:	4422      	add	r2, r4
 8003c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c68:	3302      	adds	r3, #2
 8003c6a:	e7c7      	b.n	8003bfc <_printf_common+0x58>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	4622      	mov	r2, r4
 8003c70:	4649      	mov	r1, r9
 8003c72:	4638      	mov	r0, r7
 8003c74:	47c0      	blx	r8
 8003c76:	3001      	adds	r0, #1
 8003c78:	d0e6      	beq.n	8003c48 <_printf_common+0xa4>
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7d9      	b.n	8003c32 <_printf_common+0x8e>
	...

08003c80 <_printf_i>:
 8003c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c84:	460c      	mov	r4, r1
 8003c86:	4691      	mov	r9, r2
 8003c88:	7e27      	ldrb	r7, [r4, #24]
 8003c8a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c8c:	2f78      	cmp	r7, #120	; 0x78
 8003c8e:	4680      	mov	r8, r0
 8003c90:	469a      	mov	sl, r3
 8003c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c96:	d807      	bhi.n	8003ca8 <_printf_i+0x28>
 8003c98:	2f62      	cmp	r7, #98	; 0x62
 8003c9a:	d80a      	bhi.n	8003cb2 <_printf_i+0x32>
 8003c9c:	2f00      	cmp	r7, #0
 8003c9e:	f000 80d8 	beq.w	8003e52 <_printf_i+0x1d2>
 8003ca2:	2f58      	cmp	r7, #88	; 0x58
 8003ca4:	f000 80a3 	beq.w	8003dee <_printf_i+0x16e>
 8003ca8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cb0:	e03a      	b.n	8003d28 <_printf_i+0xa8>
 8003cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cb6:	2b15      	cmp	r3, #21
 8003cb8:	d8f6      	bhi.n	8003ca8 <_printf_i+0x28>
 8003cba:	a001      	add	r0, pc, #4	; (adr r0, 8003cc0 <_printf_i+0x40>)
 8003cbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cc0:	08003d19 	.word	0x08003d19
 8003cc4:	08003d2d 	.word	0x08003d2d
 8003cc8:	08003ca9 	.word	0x08003ca9
 8003ccc:	08003ca9 	.word	0x08003ca9
 8003cd0:	08003ca9 	.word	0x08003ca9
 8003cd4:	08003ca9 	.word	0x08003ca9
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003ca9 	.word	0x08003ca9
 8003ce0:	08003ca9 	.word	0x08003ca9
 8003ce4:	08003ca9 	.word	0x08003ca9
 8003ce8:	08003ca9 	.word	0x08003ca9
 8003cec:	08003e39 	.word	0x08003e39
 8003cf0:	08003d5d 	.word	0x08003d5d
 8003cf4:	08003e1b 	.word	0x08003e1b
 8003cf8:	08003ca9 	.word	0x08003ca9
 8003cfc:	08003ca9 	.word	0x08003ca9
 8003d00:	08003e5b 	.word	0x08003e5b
 8003d04:	08003ca9 	.word	0x08003ca9
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003ca9 	.word	0x08003ca9
 8003d10:	08003ca9 	.word	0x08003ca9
 8003d14:	08003e23 	.word	0x08003e23
 8003d18:	680b      	ldr	r3, [r1, #0]
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	600a      	str	r2, [r1, #0]
 8003d20:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0a3      	b.n	8003e74 <_printf_i+0x1f4>
 8003d2c:	6825      	ldr	r5, [r4, #0]
 8003d2e:	6808      	ldr	r0, [r1, #0]
 8003d30:	062e      	lsls	r6, r5, #24
 8003d32:	f100 0304 	add.w	r3, r0, #4
 8003d36:	d50a      	bpl.n	8003d4e <_printf_i+0xce>
 8003d38:	6805      	ldr	r5, [r0, #0]
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	2d00      	cmp	r5, #0
 8003d3e:	da03      	bge.n	8003d48 <_printf_i+0xc8>
 8003d40:	232d      	movs	r3, #45	; 0x2d
 8003d42:	426d      	negs	r5, r5
 8003d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d48:	485e      	ldr	r0, [pc, #376]	; (8003ec4 <_printf_i+0x244>)
 8003d4a:	230a      	movs	r3, #10
 8003d4c:	e019      	b.n	8003d82 <_printf_i+0x102>
 8003d4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d52:	6805      	ldr	r5, [r0, #0]
 8003d54:	600b      	str	r3, [r1, #0]
 8003d56:	bf18      	it	ne
 8003d58:	b22d      	sxthne	r5, r5
 8003d5a:	e7ef      	b.n	8003d3c <_printf_i+0xbc>
 8003d5c:	680b      	ldr	r3, [r1, #0]
 8003d5e:	6825      	ldr	r5, [r4, #0]
 8003d60:	1d18      	adds	r0, r3, #4
 8003d62:	6008      	str	r0, [r1, #0]
 8003d64:	0628      	lsls	r0, r5, #24
 8003d66:	d501      	bpl.n	8003d6c <_printf_i+0xec>
 8003d68:	681d      	ldr	r5, [r3, #0]
 8003d6a:	e002      	b.n	8003d72 <_printf_i+0xf2>
 8003d6c:	0669      	lsls	r1, r5, #25
 8003d6e:	d5fb      	bpl.n	8003d68 <_printf_i+0xe8>
 8003d70:	881d      	ldrh	r5, [r3, #0]
 8003d72:	4854      	ldr	r0, [pc, #336]	; (8003ec4 <_printf_i+0x244>)
 8003d74:	2f6f      	cmp	r7, #111	; 0x6f
 8003d76:	bf0c      	ite	eq
 8003d78:	2308      	moveq	r3, #8
 8003d7a:	230a      	movne	r3, #10
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d82:	6866      	ldr	r6, [r4, #4]
 8003d84:	60a6      	str	r6, [r4, #8]
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	bfa2      	ittt	ge
 8003d8a:	6821      	ldrge	r1, [r4, #0]
 8003d8c:	f021 0104 	bicge.w	r1, r1, #4
 8003d90:	6021      	strge	r1, [r4, #0]
 8003d92:	b90d      	cbnz	r5, 8003d98 <_printf_i+0x118>
 8003d94:	2e00      	cmp	r6, #0
 8003d96:	d04d      	beq.n	8003e34 <_printf_i+0x1b4>
 8003d98:	4616      	mov	r6, r2
 8003d9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d9e:	fb03 5711 	mls	r7, r3, r1, r5
 8003da2:	5dc7      	ldrb	r7, [r0, r7]
 8003da4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003da8:	462f      	mov	r7, r5
 8003daa:	42bb      	cmp	r3, r7
 8003dac:	460d      	mov	r5, r1
 8003dae:	d9f4      	bls.n	8003d9a <_printf_i+0x11a>
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d10b      	bne.n	8003dcc <_printf_i+0x14c>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	07df      	lsls	r7, r3, #31
 8003db8:	d508      	bpl.n	8003dcc <_printf_i+0x14c>
 8003dba:	6923      	ldr	r3, [r4, #16]
 8003dbc:	6861      	ldr	r1, [r4, #4]
 8003dbe:	4299      	cmp	r1, r3
 8003dc0:	bfde      	ittt	le
 8003dc2:	2330      	movle	r3, #48	; 0x30
 8003dc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dcc:	1b92      	subs	r2, r2, r6
 8003dce:	6122      	str	r2, [r4, #16]
 8003dd0:	f8cd a000 	str.w	sl, [sp]
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	aa03      	add	r2, sp, #12
 8003dd8:	4621      	mov	r1, r4
 8003dda:	4640      	mov	r0, r8
 8003ddc:	f7ff fee2 	bl	8003ba4 <_printf_common>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d14c      	bne.n	8003e7e <_printf_i+0x1fe>
 8003de4:	f04f 30ff 	mov.w	r0, #4294967295
 8003de8:	b004      	add	sp, #16
 8003dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dee:	4835      	ldr	r0, [pc, #212]	; (8003ec4 <_printf_i+0x244>)
 8003df0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	680e      	ldr	r6, [r1, #0]
 8003df8:	061f      	lsls	r7, r3, #24
 8003dfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dfe:	600e      	str	r6, [r1, #0]
 8003e00:	d514      	bpl.n	8003e2c <_printf_i+0x1ac>
 8003e02:	07d9      	lsls	r1, r3, #31
 8003e04:	bf44      	itt	mi
 8003e06:	f043 0320 	orrmi.w	r3, r3, #32
 8003e0a:	6023      	strmi	r3, [r4, #0]
 8003e0c:	b91d      	cbnz	r5, 8003e16 <_printf_i+0x196>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	f023 0320 	bic.w	r3, r3, #32
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	2310      	movs	r3, #16
 8003e18:	e7b0      	b.n	8003d7c <_printf_i+0xfc>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	f043 0320 	orr.w	r3, r3, #32
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	2378      	movs	r3, #120	; 0x78
 8003e24:	4828      	ldr	r0, [pc, #160]	; (8003ec8 <_printf_i+0x248>)
 8003e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e2a:	e7e3      	b.n	8003df4 <_printf_i+0x174>
 8003e2c:	065e      	lsls	r6, r3, #25
 8003e2e:	bf48      	it	mi
 8003e30:	b2ad      	uxthmi	r5, r5
 8003e32:	e7e6      	b.n	8003e02 <_printf_i+0x182>
 8003e34:	4616      	mov	r6, r2
 8003e36:	e7bb      	b.n	8003db0 <_printf_i+0x130>
 8003e38:	680b      	ldr	r3, [r1, #0]
 8003e3a:	6826      	ldr	r6, [r4, #0]
 8003e3c:	6960      	ldr	r0, [r4, #20]
 8003e3e:	1d1d      	adds	r5, r3, #4
 8003e40:	600d      	str	r5, [r1, #0]
 8003e42:	0635      	lsls	r5, r6, #24
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	d501      	bpl.n	8003e4c <_printf_i+0x1cc>
 8003e48:	6018      	str	r0, [r3, #0]
 8003e4a:	e002      	b.n	8003e52 <_printf_i+0x1d2>
 8003e4c:	0671      	lsls	r1, r6, #25
 8003e4e:	d5fb      	bpl.n	8003e48 <_printf_i+0x1c8>
 8003e50:	8018      	strh	r0, [r3, #0]
 8003e52:	2300      	movs	r3, #0
 8003e54:	6123      	str	r3, [r4, #16]
 8003e56:	4616      	mov	r6, r2
 8003e58:	e7ba      	b.n	8003dd0 <_printf_i+0x150>
 8003e5a:	680b      	ldr	r3, [r1, #0]
 8003e5c:	1d1a      	adds	r2, r3, #4
 8003e5e:	600a      	str	r2, [r1, #0]
 8003e60:	681e      	ldr	r6, [r3, #0]
 8003e62:	6862      	ldr	r2, [r4, #4]
 8003e64:	2100      	movs	r1, #0
 8003e66:	4630      	mov	r0, r6
 8003e68:	f7fc f9ba 	bl	80001e0 <memchr>
 8003e6c:	b108      	cbz	r0, 8003e72 <_printf_i+0x1f2>
 8003e6e:	1b80      	subs	r0, r0, r6
 8003e70:	6060      	str	r0, [r4, #4]
 8003e72:	6863      	ldr	r3, [r4, #4]
 8003e74:	6123      	str	r3, [r4, #16]
 8003e76:	2300      	movs	r3, #0
 8003e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e7c:	e7a8      	b.n	8003dd0 <_printf_i+0x150>
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	4632      	mov	r2, r6
 8003e82:	4649      	mov	r1, r9
 8003e84:	4640      	mov	r0, r8
 8003e86:	47d0      	blx	sl
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d0ab      	beq.n	8003de4 <_printf_i+0x164>
 8003e8c:	6823      	ldr	r3, [r4, #0]
 8003e8e:	079b      	lsls	r3, r3, #30
 8003e90:	d413      	bmi.n	8003eba <_printf_i+0x23a>
 8003e92:	68e0      	ldr	r0, [r4, #12]
 8003e94:	9b03      	ldr	r3, [sp, #12]
 8003e96:	4298      	cmp	r0, r3
 8003e98:	bfb8      	it	lt
 8003e9a:	4618      	movlt	r0, r3
 8003e9c:	e7a4      	b.n	8003de8 <_printf_i+0x168>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	4632      	mov	r2, r6
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	4640      	mov	r0, r8
 8003ea6:	47d0      	blx	sl
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d09b      	beq.n	8003de4 <_printf_i+0x164>
 8003eac:	3501      	adds	r5, #1
 8003eae:	68e3      	ldr	r3, [r4, #12]
 8003eb0:	9903      	ldr	r1, [sp, #12]
 8003eb2:	1a5b      	subs	r3, r3, r1
 8003eb4:	42ab      	cmp	r3, r5
 8003eb6:	dcf2      	bgt.n	8003e9e <_printf_i+0x21e>
 8003eb8:	e7eb      	b.n	8003e92 <_printf_i+0x212>
 8003eba:	2500      	movs	r5, #0
 8003ebc:	f104 0619 	add.w	r6, r4, #25
 8003ec0:	e7f5      	b.n	8003eae <_printf_i+0x22e>
 8003ec2:	bf00      	nop
 8003ec4:	08004185 	.word	0x08004185
 8003ec8:	08004196 	.word	0x08004196

08003ecc <memcpy>:
 8003ecc:	440a      	add	r2, r1
 8003ece:	4291      	cmp	r1, r2
 8003ed0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ed4:	d100      	bne.n	8003ed8 <memcpy+0xc>
 8003ed6:	4770      	bx	lr
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee2:	4291      	cmp	r1, r2
 8003ee4:	d1f9      	bne.n	8003eda <memcpy+0xe>
 8003ee6:	bd10      	pop	{r4, pc}

08003ee8 <memmove>:
 8003ee8:	4288      	cmp	r0, r1
 8003eea:	b510      	push	{r4, lr}
 8003eec:	eb01 0402 	add.w	r4, r1, r2
 8003ef0:	d902      	bls.n	8003ef8 <memmove+0x10>
 8003ef2:	4284      	cmp	r4, r0
 8003ef4:	4623      	mov	r3, r4
 8003ef6:	d807      	bhi.n	8003f08 <memmove+0x20>
 8003ef8:	1e43      	subs	r3, r0, #1
 8003efa:	42a1      	cmp	r1, r4
 8003efc:	d008      	beq.n	8003f10 <memmove+0x28>
 8003efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f06:	e7f8      	b.n	8003efa <memmove+0x12>
 8003f08:	4402      	add	r2, r0
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	428a      	cmp	r2, r1
 8003f0e:	d100      	bne.n	8003f12 <memmove+0x2a>
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f1a:	e7f7      	b.n	8003f0c <memmove+0x24>

08003f1c <_free_r>:
 8003f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	d048      	beq.n	8003fb4 <_free_r+0x98>
 8003f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f26:	9001      	str	r0, [sp, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003f2e:	bfb8      	it	lt
 8003f30:	18e4      	addlt	r4, r4, r3
 8003f32:	f000 f8d3 	bl	80040dc <__malloc_lock>
 8003f36:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <_free_r+0x9c>)
 8003f38:	9801      	ldr	r0, [sp, #4]
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	4615      	mov	r5, r2
 8003f3e:	b933      	cbnz	r3, 8003f4e <_free_r+0x32>
 8003f40:	6063      	str	r3, [r4, #4]
 8003f42:	6014      	str	r4, [r2, #0]
 8003f44:	b003      	add	sp, #12
 8003f46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f4a:	f000 b8cd 	b.w	80040e8 <__malloc_unlock>
 8003f4e:	42a3      	cmp	r3, r4
 8003f50:	d90b      	bls.n	8003f6a <_free_r+0x4e>
 8003f52:	6821      	ldr	r1, [r4, #0]
 8003f54:	1862      	adds	r2, r4, r1
 8003f56:	4293      	cmp	r3, r2
 8003f58:	bf04      	itt	eq
 8003f5a:	681a      	ldreq	r2, [r3, #0]
 8003f5c:	685b      	ldreq	r3, [r3, #4]
 8003f5e:	6063      	str	r3, [r4, #4]
 8003f60:	bf04      	itt	eq
 8003f62:	1852      	addeq	r2, r2, r1
 8003f64:	6022      	streq	r2, [r4, #0]
 8003f66:	602c      	str	r4, [r5, #0]
 8003f68:	e7ec      	b.n	8003f44 <_free_r+0x28>
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	b10b      	cbz	r3, 8003f74 <_free_r+0x58>
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	d9fa      	bls.n	8003f6a <_free_r+0x4e>
 8003f74:	6811      	ldr	r1, [r2, #0]
 8003f76:	1855      	adds	r5, r2, r1
 8003f78:	42a5      	cmp	r5, r4
 8003f7a:	d10b      	bne.n	8003f94 <_free_r+0x78>
 8003f7c:	6824      	ldr	r4, [r4, #0]
 8003f7e:	4421      	add	r1, r4
 8003f80:	1854      	adds	r4, r2, r1
 8003f82:	42a3      	cmp	r3, r4
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	d1dd      	bne.n	8003f44 <_free_r+0x28>
 8003f88:	681c      	ldr	r4, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	6053      	str	r3, [r2, #4]
 8003f8e:	4421      	add	r1, r4
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	e7d7      	b.n	8003f44 <_free_r+0x28>
 8003f94:	d902      	bls.n	8003f9c <_free_r+0x80>
 8003f96:	230c      	movs	r3, #12
 8003f98:	6003      	str	r3, [r0, #0]
 8003f9a:	e7d3      	b.n	8003f44 <_free_r+0x28>
 8003f9c:	6825      	ldr	r5, [r4, #0]
 8003f9e:	1961      	adds	r1, r4, r5
 8003fa0:	428b      	cmp	r3, r1
 8003fa2:	bf04      	itt	eq
 8003fa4:	6819      	ldreq	r1, [r3, #0]
 8003fa6:	685b      	ldreq	r3, [r3, #4]
 8003fa8:	6063      	str	r3, [r4, #4]
 8003faa:	bf04      	itt	eq
 8003fac:	1949      	addeq	r1, r1, r5
 8003fae:	6021      	streq	r1, [r4, #0]
 8003fb0:	6054      	str	r4, [r2, #4]
 8003fb2:	e7c7      	b.n	8003f44 <_free_r+0x28>
 8003fb4:	b003      	add	sp, #12
 8003fb6:	bd30      	pop	{r4, r5, pc}
 8003fb8:	20000098 	.word	0x20000098

08003fbc <_malloc_r>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	1ccd      	adds	r5, r1, #3
 8003fc0:	f025 0503 	bic.w	r5, r5, #3
 8003fc4:	3508      	adds	r5, #8
 8003fc6:	2d0c      	cmp	r5, #12
 8003fc8:	bf38      	it	cc
 8003fca:	250c      	movcc	r5, #12
 8003fcc:	2d00      	cmp	r5, #0
 8003fce:	4606      	mov	r6, r0
 8003fd0:	db01      	blt.n	8003fd6 <_malloc_r+0x1a>
 8003fd2:	42a9      	cmp	r1, r5
 8003fd4:	d903      	bls.n	8003fde <_malloc_r+0x22>
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	6033      	str	r3, [r6, #0]
 8003fda:	2000      	movs	r0, #0
 8003fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fde:	f000 f87d 	bl	80040dc <__malloc_lock>
 8003fe2:	4921      	ldr	r1, [pc, #132]	; (8004068 <_malloc_r+0xac>)
 8003fe4:	680a      	ldr	r2, [r1, #0]
 8003fe6:	4614      	mov	r4, r2
 8003fe8:	b99c      	cbnz	r4, 8004012 <_malloc_r+0x56>
 8003fea:	4f20      	ldr	r7, [pc, #128]	; (800406c <_malloc_r+0xb0>)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	b923      	cbnz	r3, 8003ffa <_malloc_r+0x3e>
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f000 f862 	bl	80040bc <_sbrk_r>
 8003ff8:	6038      	str	r0, [r7, #0]
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 f85d 	bl	80040bc <_sbrk_r>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	d123      	bne.n	800404e <_malloc_r+0x92>
 8004006:	230c      	movs	r3, #12
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	4630      	mov	r0, r6
 800400c:	f000 f86c 	bl	80040e8 <__malloc_unlock>
 8004010:	e7e3      	b.n	8003fda <_malloc_r+0x1e>
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	1b5b      	subs	r3, r3, r5
 8004016:	d417      	bmi.n	8004048 <_malloc_r+0x8c>
 8004018:	2b0b      	cmp	r3, #11
 800401a:	d903      	bls.n	8004024 <_malloc_r+0x68>
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	441c      	add	r4, r3
 8004020:	6025      	str	r5, [r4, #0]
 8004022:	e004      	b.n	800402e <_malloc_r+0x72>
 8004024:	6863      	ldr	r3, [r4, #4]
 8004026:	42a2      	cmp	r2, r4
 8004028:	bf0c      	ite	eq
 800402a:	600b      	streq	r3, [r1, #0]
 800402c:	6053      	strne	r3, [r2, #4]
 800402e:	4630      	mov	r0, r6
 8004030:	f000 f85a 	bl	80040e8 <__malloc_unlock>
 8004034:	f104 000b 	add.w	r0, r4, #11
 8004038:	1d23      	adds	r3, r4, #4
 800403a:	f020 0007 	bic.w	r0, r0, #7
 800403e:	1ac2      	subs	r2, r0, r3
 8004040:	d0cc      	beq.n	8003fdc <_malloc_r+0x20>
 8004042:	1a1b      	subs	r3, r3, r0
 8004044:	50a3      	str	r3, [r4, r2]
 8004046:	e7c9      	b.n	8003fdc <_malloc_r+0x20>
 8004048:	4622      	mov	r2, r4
 800404a:	6864      	ldr	r4, [r4, #4]
 800404c:	e7cc      	b.n	8003fe8 <_malloc_r+0x2c>
 800404e:	1cc4      	adds	r4, r0, #3
 8004050:	f024 0403 	bic.w	r4, r4, #3
 8004054:	42a0      	cmp	r0, r4
 8004056:	d0e3      	beq.n	8004020 <_malloc_r+0x64>
 8004058:	1a21      	subs	r1, r4, r0
 800405a:	4630      	mov	r0, r6
 800405c:	f000 f82e 	bl	80040bc <_sbrk_r>
 8004060:	3001      	adds	r0, #1
 8004062:	d1dd      	bne.n	8004020 <_malloc_r+0x64>
 8004064:	e7cf      	b.n	8004006 <_malloc_r+0x4a>
 8004066:	bf00      	nop
 8004068:	20000098 	.word	0x20000098
 800406c:	2000009c 	.word	0x2000009c

08004070 <_realloc_r>:
 8004070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004072:	4607      	mov	r7, r0
 8004074:	4614      	mov	r4, r2
 8004076:	460e      	mov	r6, r1
 8004078:	b921      	cbnz	r1, 8004084 <_realloc_r+0x14>
 800407a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800407e:	4611      	mov	r1, r2
 8004080:	f7ff bf9c 	b.w	8003fbc <_malloc_r>
 8004084:	b922      	cbnz	r2, 8004090 <_realloc_r+0x20>
 8004086:	f7ff ff49 	bl	8003f1c <_free_r>
 800408a:	4625      	mov	r5, r4
 800408c:	4628      	mov	r0, r5
 800408e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004090:	f000 f830 	bl	80040f4 <_malloc_usable_size_r>
 8004094:	42a0      	cmp	r0, r4
 8004096:	d20f      	bcs.n	80040b8 <_realloc_r+0x48>
 8004098:	4621      	mov	r1, r4
 800409a:	4638      	mov	r0, r7
 800409c:	f7ff ff8e 	bl	8003fbc <_malloc_r>
 80040a0:	4605      	mov	r5, r0
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d0f2      	beq.n	800408c <_realloc_r+0x1c>
 80040a6:	4631      	mov	r1, r6
 80040a8:	4622      	mov	r2, r4
 80040aa:	f7ff ff0f 	bl	8003ecc <memcpy>
 80040ae:	4631      	mov	r1, r6
 80040b0:	4638      	mov	r0, r7
 80040b2:	f7ff ff33 	bl	8003f1c <_free_r>
 80040b6:	e7e9      	b.n	800408c <_realloc_r+0x1c>
 80040b8:	4635      	mov	r5, r6
 80040ba:	e7e7      	b.n	800408c <_realloc_r+0x1c>

080040bc <_sbrk_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4d06      	ldr	r5, [pc, #24]	; (80040d8 <_sbrk_r+0x1c>)
 80040c0:	2300      	movs	r3, #0
 80040c2:	4604      	mov	r4, r0
 80040c4:	4608      	mov	r0, r1
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	f7fc fe28 	bl	8000d1c <_sbrk>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d102      	bne.n	80040d6 <_sbrk_r+0x1a>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	b103      	cbz	r3, 80040d6 <_sbrk_r+0x1a>
 80040d4:	6023      	str	r3, [r4, #0]
 80040d6:	bd38      	pop	{r3, r4, r5, pc}
 80040d8:	200001d0 	.word	0x200001d0

080040dc <__malloc_lock>:
 80040dc:	4801      	ldr	r0, [pc, #4]	; (80040e4 <__malloc_lock+0x8>)
 80040de:	f000 b811 	b.w	8004104 <__retarget_lock_acquire_recursive>
 80040e2:	bf00      	nop
 80040e4:	200001d8 	.word	0x200001d8

080040e8 <__malloc_unlock>:
 80040e8:	4801      	ldr	r0, [pc, #4]	; (80040f0 <__malloc_unlock+0x8>)
 80040ea:	f000 b80c 	b.w	8004106 <__retarget_lock_release_recursive>
 80040ee:	bf00      	nop
 80040f0:	200001d8 	.word	0x200001d8

080040f4 <_malloc_usable_size_r>:
 80040f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f8:	1f18      	subs	r0, r3, #4
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	bfbc      	itt	lt
 80040fe:	580b      	ldrlt	r3, [r1, r0]
 8004100:	18c0      	addlt	r0, r0, r3
 8004102:	4770      	bx	lr

08004104 <__retarget_lock_acquire_recursive>:
 8004104:	4770      	bx	lr

08004106 <__retarget_lock_release_recursive>:
 8004106:	4770      	bx	lr

08004108 <_init>:
 8004108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410a:	bf00      	nop
 800410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410e:	bc08      	pop	{r3}
 8004110:	469e      	mov	lr, r3
 8004112:	4770      	bx	lr

08004114 <_fini>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	bf00      	nop
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr
