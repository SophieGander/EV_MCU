
CAN Test STM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002844  08002844  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800284c  0800284c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800284c  0800284c  0001284c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002850  08002850  00012850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000070  080028c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080028c4  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cb7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e0  00000000  00000000  00027d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  00029438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000560  00000000  00000000  00029a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f90  00000000  00000000  00029fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006aff  00000000  00000000  0004af40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c37fe  00000000  00000000  00051a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011523d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db0  00000000  00000000  00115290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002798 	.word	0x08002798

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002798 	.word	0x08002798

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fae0 	bl	8000a88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f808 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f8a4 	bl	8000618 <MX_GPIO_Init>
  MX_CAN1_Init();
 80004d0:	f000 f86e 	bl	80005b0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN1_Tx();
 80004d4:	f000 f918 	bl	8000708 <CAN1_Tx>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <main+0x18>
	...

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b094      	sub	sp, #80	; 0x50
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	f107 0320 	add.w	r3, r7, #32
 80004e6:	2230      	movs	r2, #48	; 0x30
 80004e8:	2100      	movs	r1, #0
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fc86 	bl	8001dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
 80004f8:	605a      	str	r2, [r3, #4]
 80004fa:	609a      	str	r2, [r3, #8]
 80004fc:	60da      	str	r2, [r3, #12]
 80004fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000500:	2300      	movs	r3, #0
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	4b28      	ldr	r3, [pc, #160]	; (80005a8 <SystemClock_Config+0xcc>)
 8000506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000508:	4a27      	ldr	r2, [pc, #156]	; (80005a8 <SystemClock_Config+0xcc>)
 800050a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050e:	6413      	str	r3, [r2, #64]	; 0x40
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <SystemClock_Config+0xcc>)
 8000512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000518:	60bb      	str	r3, [r7, #8]
 800051a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	4b22      	ldr	r3, [pc, #136]	; (80005ac <SystemClock_Config+0xd0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <SystemClock_Config+0xd0>)
 8000526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4b1f      	ldr	r3, [pc, #124]	; (80005ac <SystemClock_Config+0xd0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000538:	2301      	movs	r3, #1
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000542:	2302      	movs	r3, #2
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000546:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800054a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800054c:	2308      	movs	r3, #8
 800054e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000550:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000554:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000556:	2302      	movs	r3, #2
 8000558:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800055a:	2307      	movs	r3, #7
 800055c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	4618      	mov	r0, r3
 8000564:	f000 ffe8 	bl	8001538 <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800056e:	f000 f901 	bl	8000774 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000572:	230f      	movs	r3, #15
 8000574:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000576:	2302      	movs	r3, #2
 8000578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800057e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000582:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000588:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2105      	movs	r1, #5
 8000590:	4618      	mov	r0, r3
 8000592:	f001 fa41 	bl	8001a18 <HAL_RCC_ClockConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800059c:	f000 f8ea 	bl	8000774 <Error_Handler>
  }
}
 80005a0:	bf00      	nop
 80005a2:	3750      	adds	r7, #80	; 0x50
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40023800 	.word	0x40023800
 80005ac:	40007000 	.word	0x40007000

080005b0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_CAN1_Init+0x60>)
 80005b6:	4a17      	ldr	r2, [pc, #92]	; (8000614 <MX_CAN1_Init+0x64>)
 80005b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_CAN1_Init+0x60>)
 80005bc:	2210      	movs	r2, #16
 80005be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <MX_CAN1_Init+0x60>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_CAN1_Init+0x60>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <MX_CAN1_Init+0x60>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_CAN1_Init+0x60>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <MX_CAN1_Init+0x60>)
 80005da:	2200      	movs	r2, #0
 80005dc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_CAN1_Init+0x60>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_CAN1_Init+0x60>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_CAN1_Init+0x60>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_CAN1_Init+0x60>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_CAN1_Init+0x60>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_CAN1_Init+0x60>)
 80005fe:	f000 fab5 	bl	8000b6c <HAL_CAN_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000608:	f000 f8b4 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000098 	.word	0x20000098
 8000614:	40006400 	.word	0x40006400

08000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
 800062c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <MX_GPIO_Init+0xe0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a30      	ldr	r2, [pc, #192]	; (80006f8 <MX_GPIO_Init+0xe0>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <MX_GPIO_Init+0xe0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	613b      	str	r3, [r7, #16]
 8000648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <MX_GPIO_Init+0xe0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a29      	ldr	r2, [pc, #164]	; (80006f8 <MX_GPIO_Init+0xe0>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <MX_GPIO_Init+0xe0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	4b23      	ldr	r3, [pc, #140]	; (80006f8 <MX_GPIO_Init+0xe0>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a22      	ldr	r2, [pc, #136]	; (80006f8 <MX_GPIO_Init+0xe0>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_GPIO_Init+0xe0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_GPIO_Init+0xe0>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_GPIO_Init+0xe0>)
 800068c:	f043 0302 	orr.w	r3, r3, #2
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_GPIO_Init+0xe0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0302 	and.w	r3, r3, #2
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80006a4:	4815      	ldr	r0, [pc, #84]	; (80006fc <MX_GPIO_Init+0xe4>)
 80006a6:	f000 ff09 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006aa:	2301      	movs	r3, #1
 80006ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_GPIO_Init+0xe8>)
 80006b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	4811      	ldr	r0, [pc, #68]	; (8000704 <MX_GPIO_Init+0xec>)
 80006be:	f000 fd61 	bl	8001184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006c2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	2300      	movs	r3, #0
 80006d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4619      	mov	r1, r3
 80006da:	4808      	ldr	r0, [pc, #32]	; (80006fc <MX_GPIO_Init+0xe4>)
 80006dc:	f000 fd52 	bl	8001184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 1);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2100      	movs	r1, #0
 80006e4:	2006      	movs	r0, #6
 80006e6:	f000 fd16 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006ea:	2006      	movs	r0, #6
 80006ec:	f000 fd2f 	bl	800114e <HAL_NVIC_EnableIRQ>

}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020c00 	.word	0x40020c00
 8000700:	10110000 	.word	0x10110000
 8000704:	40020000 	.word	0x40020000

08000708 <CAN1_Tx>:

/* USER CODE BEGIN 4 */
void CAN1_Tx(void){
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0

		CAN_TxHeaderTypeDef TxHeader;

		uint32_t TxMailbox;

		uint8_t our_message[5] = {'H', 'E', 'L', 'L', 'O'};
 800070e:	4a16      	ldr	r2, [pc, #88]	; (8000768 <CAN1_Tx+0x60>)
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000716:	6018      	str	r0, [r3, #0]
 8000718:	3304      	adds	r3, #4
 800071a:	7019      	strb	r1, [r3, #0]

		TxHeader.DLC = 5;
 800071c:	2305      	movs	r3, #5
 800071e:	623b      	str	r3, [r7, #32]
		TxHeader.StdId = 0x65D;
 8000720:	f240 635d 	movw	r3, #1629	; 0x65d
 8000724:	613b      	str	r3, [r7, #16]
		TxHeader.IDE = CAN_ID_STD;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]

		if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, our_message, &TxMailbox) != HAL_OK){
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	1d3a      	adds	r2, r7, #4
 8000734:	f107 0110 	add.w	r1, r7, #16
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <CAN1_Tx+0x64>)
 800073a:	f000 fb12 	bl	8000d62 <HAL_CAN_AddTxMessage>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <CAN1_Tx+0x40>
			Error_Handler();
 8000744:	f000 f816 	bl	8000774 <Error_Handler>
		}

		// Currently trying polling, change to an interrupt method before practical use!
		while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 8000748:	bf00      	nop
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4619      	mov	r1, r3
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <CAN1_Tx+0x64>)
 8000750:	f000 fbe2 	bl	8000f18 <HAL_CAN_IsTxMessagePending>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1f7      	bne.n	800074a <CAN1_Tx+0x42>

		printf("Message Transmitted\r\n");
 800075a:	4805      	ldr	r0, [pc, #20]	; (8000770 <CAN1_Tx+0x68>)
 800075c:	f001 fbc4 	bl	8001ee8 <puts>


}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	080027c8 	.word	0x080027c8
 800076c:	20000098 	.word	0x20000098
 8000770:	080027b0 	.word	0x080027b0

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007be:	2007      	movs	r0, #7
 80007c0:	f000 fc9e 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <HAL_CAN_MspInit+0x84>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d12b      	bne.n	800084a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_CAN_MspInit+0x88>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_CAN_MspInit+0x88>)
 80007fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_CAN_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_CAN_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <HAL_CAN_MspInit+0x88>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_CAN_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800082a:	2303      	movs	r3, #3
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800083a:	2309      	movs	r3, #9
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_CAN_MspInit+0x8c>)
 8000846:	f000 fc9d 	bl	8001184 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40006400 	.word	0x40006400
 8000858:	40023800 	.word	0x40023800
 800085c:	40020c00 	.word	0x40020c00

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f93e 	bl	8000b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80008b8:	2001      	movs	r0, #1
 80008ba:	f000 fe19 	bl	80014f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	60f8      	str	r0, [r7, #12]
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	e00a      	b.n	80008ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008d4:	f3af 8000 	nop.w
 80008d8:	4601      	mov	r1, r0
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	60ba      	str	r2, [r7, #8]
 80008e0:	b2ca      	uxtb	r2, r1
 80008e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	3301      	adds	r3, #1
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	dbf0      	blt.n	80008d4 <_read+0x12>
	}

return len;
 80008f2:	687b      	ldr	r3, [r7, #4]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e009      	b.n	8000922 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	60ba      	str	r2, [r7, #8]
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	4618      	mov	r0, r3
 8000918:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	3301      	adds	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	429a      	cmp	r2, r3
 8000928:	dbf1      	blt.n	800090e <_write+0x12>
	}
	return len;
 800092a:	687b      	ldr	r3, [r7, #4]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <_close>:

int _close(int file)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	return -1;
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800095c:	605a      	str	r2, [r3, #4]
	return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_isatty>:

int _isatty(int file)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	return 1;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr

08000982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000982:	b480      	push	{r7}
 8000984:	b085      	sub	sp, #20
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
	return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a4:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <_sbrk+0x5c>)
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <_sbrk+0x60>)
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <_sbrk+0x64>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d102      	bne.n	80009be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <_sbrk+0x64>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <_sbrk+0x68>)
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d207      	bcs.n	80009dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009cc:	f001 f9ec 	bl	8001da8 <__errno>
 80009d0:	4603      	mov	r3, r0
 80009d2:	220c      	movs	r2, #12
 80009d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
 80009da:	e009      	b.n	80009f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <_sbrk+0x64>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <_sbrk+0x64>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4413      	add	r3, r2
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_sbrk+0x64>)
 80009ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ee:	68fb      	ldr	r3, [r7, #12]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20020000 	.word	0x20020000
 80009fc:	00000400 	.word	0x00000400
 8000a00:	2000008c 	.word	0x2000008c
 8000a04:	200000d8 	.word	0x200000d8

08000a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <SystemInit+0x28>)
 8000a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a12:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <SystemInit+0x28>)
 8000a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SystemInit+0x28>)
 8000a1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a22:	609a      	str	r2, [r3, #8]
#endif
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a3a:	e003      	b.n	8000a44 <LoopCopyDataInit>

08000a3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a42:	3104      	adds	r1, #4

08000a44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a4c:	d3f6      	bcc.n	8000a3c <CopyDataInit>
  ldr  r2, =_sbss
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	; (8000a7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a50:	e002      	b.n	8000a58 <LoopFillZerobss>

08000a52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a54:	f842 3b04 	str.w	r3, [r2], #4

08000a58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a5c:	d3f9      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a5e:	f7ff ffd3 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a62:	f001 f9a7 	bl	8001db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a66:	f7ff fd2b 	bl	80004c0 <main>
  bx  lr    
 8000a6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a70:	08002854 	.word	0x08002854
  ldr  r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a78:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000a7c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000a80:	200000d4 	.word	0x200000d4

08000a84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC_IRQHandler>
	...

08000a88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <HAL_Init+0x40>)
 8000a92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <HAL_Init+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_Init+0x40>)
 8000a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa4:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_Init+0x40>)
 8000aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f000 fb25 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f808 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000abc:	f7ff fe60 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023c00 	.word	0x40023c00

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <HAL_InitTick+0x54>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x58>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fb3d 	bl	800116a <HAL_SYSTICK_Config>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e00e      	b.n	8000b18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d80a      	bhi.n	8000b16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b00:	2200      	movs	r2, #0
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	f04f 30ff 	mov.w	r0, #4294967295
 8000b08:	f000 fb05 	bl	8001116 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b0c:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <HAL_InitTick+0x5c>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	e000      	b.n	8000b18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000004 	.word	0x20000004

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	200000c0 	.word	0x200000c0

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	200000c0 	.word	0x200000c0

08000b6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0ed      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff fe20 	bl	80007d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f022 0202 	bic.w	r2, r2, #2
 8000b9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ba0:	f7ff ffd8 	bl	8000b54 <HAL_GetTick>
 8000ba4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ba6:	e012      	b.n	8000bce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba8:	f7ff ffd4 	bl	8000b54 <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b0a      	cmp	r3, #10
 8000bb4:	d90b      	bls.n	8000bce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2205      	movs	r2, #5
 8000bc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e0c5      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1e5      	bne.n	8000ba8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f042 0201 	orr.w	r2, r2, #1
 8000bea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bec:	f7ff ffb2 	bl	8000b54 <HAL_GetTick>
 8000bf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000bf2:	e012      	b.n	8000c1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bf4:	f7ff ffae 	bl	8000b54 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b0a      	cmp	r3, #10
 8000c00:	d90b      	bls.n	8000c1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2205      	movs	r2, #5
 8000c12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e09f      	b.n	8000d5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0e5      	beq.n	8000bf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7e1b      	ldrb	r3, [r3, #24]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d108      	bne.n	8000c42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	e007      	b.n	8000c52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7e5b      	ldrb	r3, [r3, #25]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d108      	bne.n	8000c6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e007      	b.n	8000c7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	7e9b      	ldrb	r3, [r3, #26]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d108      	bne.n	8000c96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f042 0220 	orr.w	r2, r2, #32
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	e007      	b.n	8000ca6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0220 	bic.w	r2, r2, #32
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	7edb      	ldrb	r3, [r3, #27]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d108      	bne.n	8000cc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 0210 	bic.w	r2, r2, #16
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	e007      	b.n	8000cd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0210 	orr.w	r2, r2, #16
 8000cce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	7f1b      	ldrb	r3, [r3, #28]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d108      	bne.n	8000cea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f042 0208 	orr.w	r2, r2, #8
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	e007      	b.n	8000cfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f022 0208 	bic.w	r2, r2, #8
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7f5b      	ldrb	r3, [r3, #29]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d108      	bne.n	8000d14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0204 	orr.w	r2, r2, #4
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e007      	b.n	8000d24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0204 	bic.w	r2, r2, #4
 8000d22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	ea42 0103 	orr.w	r1, r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	1e5a      	subs	r2, r3, #1
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b089      	sub	sp, #36	; 0x24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d76:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d80:	7ffb      	ldrb	r3, [r7, #31]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d003      	beq.n	8000d8e <HAL_CAN_AddTxMessage+0x2c>
 8000d86:	7ffb      	ldrb	r3, [r7, #31]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	f040 80b8 	bne.w	8000efe <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10a      	bne.n	8000dae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d105      	bne.n	8000dae <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80a0 	beq.w	8000eee <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	0e1b      	lsrs	r3, r3, #24
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d907      	bls.n	8000dce <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e09e      	b.n	8000f0c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10d      	bne.n	8000dfc <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dea:	68f9      	ldr	r1, [r7, #12]
 8000dec:	6809      	ldr	r1, [r1, #0]
 8000dee:	431a      	orrs	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3318      	adds	r3, #24
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	440b      	add	r3, r1
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	e00f      	b.n	8000e1c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e06:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e0c:	68f9      	ldr	r1, [r7, #12]
 8000e0e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e10:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3318      	adds	r3, #24
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	440b      	add	r3, r1
 8000e1a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	6819      	ldr	r1, [r3, #0]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3318      	adds	r3, #24
 8000e28:	011b      	lsls	r3, r3, #4
 8000e2a:	440b      	add	r3, r1
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	7d1b      	ldrb	r3, [r3, #20]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d111      	bne.n	8000e5c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3318      	adds	r3, #24
 8000e40:	011b      	lsls	r3, r3, #4
 8000e42:	4413      	add	r3, r2
 8000e44:	3304      	adds	r3, #4
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	6811      	ldr	r1, [r2, #0]
 8000e4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3318      	adds	r3, #24
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	440b      	add	r3, r1
 8000e58:	3304      	adds	r3, #4
 8000e5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3307      	adds	r3, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	061a      	lsls	r2, r3, #24
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3306      	adds	r3, #6
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	041b      	lsls	r3, r3, #16
 8000e6c:	431a      	orrs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	3305      	adds	r3, #5
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	4313      	orrs	r3, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	3204      	adds	r2, #4
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	4610      	mov	r0, r2
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	6811      	ldr	r1, [r2, #0]
 8000e84:	ea43 0200 	orr.w	r2, r3, r0
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	440b      	add	r3, r1
 8000e8e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3303      	adds	r3, #3
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	061a      	lsls	r2, r3, #24
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3302      	adds	r3, #2
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	041b      	lsls	r3, r3, #16
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	6811      	ldr	r1, [r2, #0]
 8000eba:	ea43 0200 	orr.w	r2, r3, r0
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ec8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3318      	adds	r3, #24
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4413      	add	r3, r2
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	6811      	ldr	r1, [r2, #0]
 8000edc:	f043 0201 	orr.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3318      	adds	r3, #24
 8000ee4:	011b      	lsls	r3, r3, #4
 8000ee6:	440b      	add	r3, r1
 8000ee8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e00e      	b.n	8000f0c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e006      	b.n	8000f0c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
  }
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3724      	adds	r7, #36	; 0x24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f2c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d002      	beq.n	8000f3a <HAL_CAN_IsTxMessagePending+0x22>
 8000f34:	7afb      	ldrb	r3, [r7, #11]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d10b      	bne.n	8000f52 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	069b      	lsls	r3, r3, #26
 8000f44:	401a      	ands	r2, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	069b      	lsls	r3, r3, #26
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d001      	beq.n	8000f52 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000f52:	68fb      	ldr	r3, [r7, #12]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001128:	f7ff ff3e 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 800112c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68b9      	ldr	r1, [r7, #8]
 8001132:	6978      	ldr	r0, [r7, #20]
 8001134:	f7ff ff8e 	bl	8001054 <NVIC_EncodePriority>
 8001138:	4602      	mov	r2, r0
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff5d 	bl	8001000 <__NVIC_SetPriority>
}
 8001146:	bf00      	nop
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffa2 	bl	80010bc <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	e16b      	b.n	8001478 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	f040 815a 	bne.w	8001472 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d00b      	beq.n	80011de <HAL_GPIO_Init+0x5a>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d2:	2b11      	cmp	r3, #17
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b12      	cmp	r3, #18
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0xfc>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b12      	cmp	r3, #18
 800127e:	d123      	bne.n	80012c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	08da      	lsrs	r2, r3, #3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3208      	adds	r2, #8
 8001288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	220f      	movs	r2, #15
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	69b9      	ldr	r1, [r7, #24]
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f003 0203 	and.w	r2, r3, #3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001304:	2b00      	cmp	r3, #0
 8001306:	f000 80b4 	beq.w	8001472 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	4b60      	ldr	r3, [pc, #384]	; (8001490 <HAL_GPIO_Init+0x30c>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a5f      	ldr	r2, [pc, #380]	; (8001490 <HAL_GPIO_Init+0x30c>)
 8001314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b5d      	ldr	r3, [pc, #372]	; (8001490 <HAL_GPIO_Init+0x30c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a5b      	ldr	r2, [pc, #364]	; (8001494 <HAL_GPIO_Init+0x310>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a52      	ldr	r2, [pc, #328]	; (8001498 <HAL_GPIO_Init+0x314>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d02b      	beq.n	80013aa <HAL_GPIO_Init+0x226>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_GPIO_Init+0x318>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d025      	beq.n	80013a6 <HAL_GPIO_Init+0x222>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_GPIO_Init+0x31c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d01f      	beq.n	80013a2 <HAL_GPIO_Init+0x21e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x320>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x21a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x324>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x216>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x328>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x212>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x32c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x20e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x330>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x20a>
 800138a:	2307      	movs	r3, #7
 800138c:	e00e      	b.n	80013ac <HAL_GPIO_Init+0x228>
 800138e:	2308      	movs	r3, #8
 8001390:	e00c      	b.n	80013ac <HAL_GPIO_Init+0x228>
 8001392:	2306      	movs	r3, #6
 8001394:	e00a      	b.n	80013ac <HAL_GPIO_Init+0x228>
 8001396:	2305      	movs	r3, #5
 8001398:	e008      	b.n	80013ac <HAL_GPIO_Init+0x228>
 800139a:	2304      	movs	r3, #4
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x228>
 800139e:	2303      	movs	r3, #3
 80013a0:	e004      	b.n	80013ac <HAL_GPIO_Init+0x228>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e002      	b.n	80013ac <HAL_GPIO_Init+0x228>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <HAL_GPIO_Init+0x228>
 80013aa:	2300      	movs	r3, #0
 80013ac:	69fa      	ldr	r2, [r7, #28]
 80013ae:	f002 0203 	and.w	r2, r2, #3
 80013b2:	0092      	lsls	r2, r2, #2
 80013b4:	4093      	lsls	r3, r2
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013bc:	4935      	ldr	r1, [pc, #212]	; (8001494 <HAL_GPIO_Init+0x310>)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ca:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_GPIO_Init+0x334>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ee:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_GPIO_Init+0x334>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013f4:	4b30      	ldr	r3, [pc, #192]	; (80014b8 <HAL_GPIO_Init+0x334>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001418:	4a27      	ldr	r2, [pc, #156]	; (80014b8 <HAL_GPIO_Init+0x334>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_GPIO_Init+0x334>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	43db      	mvns	r3, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4013      	ands	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001442:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <HAL_GPIO_Init+0x334>)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <HAL_GPIO_Init+0x334>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <HAL_GPIO_Init+0x334>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3301      	adds	r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	f67f ae90 	bls.w	80011a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40013800 	.word	0x40013800
 8001498:	40020000 	.word	0x40020000
 800149c:	40020400 	.word	0x40020400
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40021400 	.word	0x40021400
 80014b0:	40021800 	.word	0x40021800
 80014b4:	40021c00 	.word	0x40021c00
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001506:	4a05      	ldr	r2, [pc, #20]	; (800151c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f806 	bl	8001520 <HAL_GPIO_EXTI_Callback>
  }
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40013c00 	.word	0x40013c00

08001520 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e25b      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d075      	beq.n	8001642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001556:	4ba3      	ldr	r3, [pc, #652]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d00c      	beq.n	800157c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001562:	4ba0      	ldr	r3, [pc, #640]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	2b08      	cmp	r3, #8
 800156c:	d112      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156e:	4b9d      	ldr	r3, [pc, #628]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800157a:	d10b      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	4b99      	ldr	r3, [pc, #612]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d05b      	beq.n	8001640 <HAL_RCC_OscConfig+0x108>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d157      	bne.n	8001640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e236      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x74>
 800159e:	4b91      	ldr	r3, [pc, #580]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a90      	ldr	r2, [pc, #576]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b8b      	ldr	r3, [pc, #556]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a8a      	ldr	r2, [pc, #552]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b88      	ldr	r3, [pc, #544]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a87      	ldr	r2, [pc, #540]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015d0:	4b84      	ldr	r3, [pc, #528]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a83      	ldr	r2, [pc, #524]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b81      	ldr	r3, [pc, #516]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a80      	ldr	r2, [pc, #512]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fab0 	bl	8000b54 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff faac 	bl	8000b54 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e1fb      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b76      	ldr	r3, [pc, #472]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xc0>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fa9c 	bl	8000b54 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fa98 	bl	8000b54 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1e7      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	4b6c      	ldr	r3, [pc, #432]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0xe8>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d063      	beq.n	8001716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164e:	4b65      	ldr	r3, [pc, #404]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b62      	ldr	r3, [pc, #392]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001662:	2b08      	cmp	r3, #8
 8001664:	d11c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001666:	4b5f      	ldr	r3, [pc, #380]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	4b5c      	ldr	r3, [pc, #368]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e1bb      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b56      	ldr	r3, [pc, #344]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4952      	ldr	r1, [pc, #328]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	e03a      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a8:	4b4f      	ldr	r3, [pc, #316]	; (80017e8 <HAL_RCC_OscConfig+0x2b0>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa51 	bl	8000b54 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fa4d 	bl	8000b54 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e19c      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b43      	ldr	r3, [pc, #268]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4940      	ldr	r1, [pc, #256]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	e015      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ea:	4b3f      	ldr	r3, [pc, #252]	; (80017e8 <HAL_RCC_OscConfig+0x2b0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fa30 	bl	8000b54 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fa2c 	bl	8000b54 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e17b      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	4b36      	ldr	r3, [pc, #216]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d030      	beq.n	8001784 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d016      	beq.n	8001758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_RCC_OscConfig+0x2b4>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fa10 	bl	8000b54 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fa0c 	bl	8000b54 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e15b      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	4b26      	ldr	r3, [pc, #152]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x200>
 8001756:	e015      	b.n	8001784 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <HAL_RCC_OscConfig+0x2b4>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff f9f9 	bl	8000b54 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff f9f5 	bl	8000b54 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e144      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a0 	beq.w	80018d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10f      	bne.n	80017c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x2b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d121      	bne.n	8001812 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_RCC_OscConfig+0x2b8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_RCC_OscConfig+0x2b8>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7ff f9bb 	bl	8000b54 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e011      	b.n	8001806 <HAL_RCC_OscConfig+0x2ce>
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	42470000 	.word	0x42470000
 80017ec:	42470e80 	.word	0x42470e80
 80017f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f4:	f7ff f9ae 	bl	8000b54 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0fd      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	4b81      	ldr	r3, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x4d4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d106      	bne.n	8001828 <HAL_RCC_OscConfig+0x2f0>
 800181a:	4b7d      	ldr	r3, [pc, #500]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	4a7c      	ldr	r2, [pc, #496]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
 8001826:	e01c      	b.n	8001862 <HAL_RCC_OscConfig+0x32a>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d10c      	bne.n	800184a <HAL_RCC_OscConfig+0x312>
 8001830:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	4a76      	ldr	r2, [pc, #472]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001836:	f043 0304 	orr.w	r3, r3, #4
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
 800183c:	4b74      	ldr	r3, [pc, #464]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	4a73      	ldr	r2, [pc, #460]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6713      	str	r3, [r2, #112]	; 0x70
 8001848:	e00b      	b.n	8001862 <HAL_RCC_OscConfig+0x32a>
 800184a:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a70      	ldr	r2, [pc, #448]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	4b6e      	ldr	r3, [pc, #440]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	4a6d      	ldr	r2, [pc, #436]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d015      	beq.n	8001896 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186a:	f7ff f973 	bl	8000b54 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001870:	e00a      	b.n	8001888 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7ff f96f 	bl	8000b54 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e0bc      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	4b61      	ldr	r3, [pc, #388]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 800188a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ee      	beq.n	8001872 <HAL_RCC_OscConfig+0x33a>
 8001894:	e014      	b.n	80018c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001896:	f7ff f95d 	bl	8000b54 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800189e:	f7ff f959 	bl	8000b54 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0a6      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b4:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 80018b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d105      	bne.n	80018d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c6:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	4a51      	ldr	r2, [pc, #324]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 80018cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 8092 	beq.w	8001a00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018dc:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
 80018e4:	2b08      	cmp	r3, #8
 80018e6:	d05c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d141      	bne.n	8001974 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f0:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <HAL_RCC_OscConfig+0x4dc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff f92d 	bl	8000b54 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fe:	f7ff f929 	bl	8000b54 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e078      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f0      	bne.n	80018fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69da      	ldr	r2, [r3, #28]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192a:	019b      	lsls	r3, r3, #6
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	041b      	lsls	r3, r3, #16
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	061b      	lsls	r3, r3, #24
 8001940:	4933      	ldr	r1, [pc, #204]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001942:	4313      	orrs	r3, r2
 8001944:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001946:	4b33      	ldr	r3, [pc, #204]	; (8001a14 <HAL_RCC_OscConfig+0x4dc>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff f902 	bl	8000b54 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f8fe 	bl	8000b54 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e04d      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001966:	4b2a      	ldr	r3, [pc, #168]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x41c>
 8001972:	e045      	b.n	8001a00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x4dc>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff f8eb 	bl	8000b54 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff f8e7 	bl	8000b54 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e036      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001994:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f0      	bne.n	8001982 <HAL_RCC_OscConfig+0x44a>
 80019a0:	e02e      	b.n	8001a00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e029      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_RCC_OscConfig+0x4d8>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d11c      	bne.n	80019fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d115      	bne.n	80019fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d6:	4013      	ands	r3, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019dc:	4293      	cmp	r3, r2
 80019de:	d10d      	bne.n	80019fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40007000 	.word	0x40007000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	42470060 	.word	0x42470060

08001a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0cc      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d90c      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b65      	ldr	r3, [pc, #404]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b63      	ldr	r3, [pc, #396]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0b8      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a6c:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a84:	4b53      	ldr	r3, [pc, #332]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4a52      	ldr	r2, [pc, #328]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b50      	ldr	r3, [pc, #320]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	494d      	ldr	r1, [pc, #308]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d044      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d107      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d119      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e07f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4b3b      	ldr	r3, [pc, #236]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e067      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4934      	ldr	r1, [pc, #208]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b08:	f7ff f824 	bl	8000b54 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff f820 	bl	8000b54 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e04f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d20c      	bcs.n	8001b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e032      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d008      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4916      	ldr	r1, [pc, #88]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d009      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	490e      	ldr	r1, [pc, #56]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b9e:	f000 f821 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	490a      	ldr	r1, [pc, #40]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	5ccb      	ldrb	r3, [r1, r3]
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe ff84 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023c00 	.word	0x40023c00
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	080027d0 	.word	0x080027d0
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bfc:	4b67      	ldr	r3, [pc, #412]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 030c 	and.w	r3, r3, #12
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d00d      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x40>
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	f200 80bd 	bhi.w	8001d88 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x34>
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d003      	beq.n	8001c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c16:	e0b7      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c18:	4b61      	ldr	r3, [pc, #388]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c1a:	60bb      	str	r3, [r7, #8]
       break;
 8001c1c:	e0b7      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c1e:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001c20:	60bb      	str	r3, [r7, #8]
      break;
 8001c22:	e0b4      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c24:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c2c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c2e:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04d      	beq.n	8001cd6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3a:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	099b      	lsrs	r3, r3, #6
 8001c40:	461a      	mov	r2, r3
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	ea02 0800 	and.w	r8, r2, r0
 8001c52:	ea03 0901 	and.w	r9, r3, r1
 8001c56:	4640      	mov	r0, r8
 8001c58:	4649      	mov	r1, r9
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	014b      	lsls	r3, r1, #5
 8001c64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c68:	0142      	lsls	r2, r0, #5
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	ebb0 0008 	subs.w	r0, r0, r8
 8001c72:	eb61 0109 	sbc.w	r1, r1, r9
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	018b      	lsls	r3, r1, #6
 8001c80:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c84:	0182      	lsls	r2, r0, #6
 8001c86:	1a12      	subs	r2, r2, r0
 8001c88:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8c:	f04f 0000 	mov.w	r0, #0
 8001c90:	f04f 0100 	mov.w	r1, #0
 8001c94:	00d9      	lsls	r1, r3, #3
 8001c96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c9a:	00d0      	lsls	r0, r2, #3
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	eb12 0208 	adds.w	r2, r2, r8
 8001ca4:	eb43 0309 	adc.w	r3, r3, r9
 8001ca8:	f04f 0000 	mov.w	r0, #0
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	0259      	lsls	r1, r3, #9
 8001cb2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001cb6:	0250      	lsls	r0, r2, #9
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	f7fe fa7e 	bl	80001c8 <__aeabi_uldivmod>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e04a      	b.n	8001d6c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	461a      	mov	r2, r3
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ce6:	f04f 0100 	mov.w	r1, #0
 8001cea:	ea02 0400 	and.w	r4, r2, r0
 8001cee:	ea03 0501 	and.w	r5, r3, r1
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	4629      	mov	r1, r5
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	014b      	lsls	r3, r1, #5
 8001d00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d04:	0142      	lsls	r2, r0, #5
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	1b00      	subs	r0, r0, r4
 8001d0c:	eb61 0105 	sbc.w	r1, r1, r5
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	018b      	lsls	r3, r1, #6
 8001d1a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d1e:	0182      	lsls	r2, r0, #6
 8001d20:	1a12      	subs	r2, r2, r0
 8001d22:	eb63 0301 	sbc.w	r3, r3, r1
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	00d9      	lsls	r1, r3, #3
 8001d30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d34:	00d0      	lsls	r0, r2, #3
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	1912      	adds	r2, r2, r4
 8001d3c:	eb45 0303 	adc.w	r3, r5, r3
 8001d40:	f04f 0000 	mov.w	r0, #0
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	0299      	lsls	r1, r3, #10
 8001d4a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d4e:	0290      	lsls	r0, r2, #10
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4610      	mov	r0, r2
 8001d56:	4619      	mov	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	f7fe fa32 	bl	80001c8 <__aeabi_uldivmod>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4613      	mov	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	0c1b      	lsrs	r3, r3, #16
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	3301      	adds	r3, #1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	60bb      	str	r3, [r7, #8]
      break;
 8001d86:	e002      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d8a:	60bb      	str	r3, [r7, #8]
      break;
 8001d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	00f42400 	.word	0x00f42400
 8001da4:	007a1200 	.word	0x007a1200

08001da8 <__errno>:
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <__errno+0x8>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	2000000c 	.word	0x2000000c

08001db4 <__libc_init_array>:
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	4d0d      	ldr	r5, [pc, #52]	; (8001dec <__libc_init_array+0x38>)
 8001db8:	4c0d      	ldr	r4, [pc, #52]	; (8001df0 <__libc_init_array+0x3c>)
 8001dba:	1b64      	subs	r4, r4, r5
 8001dbc:	10a4      	asrs	r4, r4, #2
 8001dbe:	2600      	movs	r6, #0
 8001dc0:	42a6      	cmp	r6, r4
 8001dc2:	d109      	bne.n	8001dd8 <__libc_init_array+0x24>
 8001dc4:	4d0b      	ldr	r5, [pc, #44]	; (8001df4 <__libc_init_array+0x40>)
 8001dc6:	4c0c      	ldr	r4, [pc, #48]	; (8001df8 <__libc_init_array+0x44>)
 8001dc8:	f000 fce6 	bl	8002798 <_init>
 8001dcc:	1b64      	subs	r4, r4, r5
 8001dce:	10a4      	asrs	r4, r4, #2
 8001dd0:	2600      	movs	r6, #0
 8001dd2:	42a6      	cmp	r6, r4
 8001dd4:	d105      	bne.n	8001de2 <__libc_init_array+0x2e>
 8001dd6:	bd70      	pop	{r4, r5, r6, pc}
 8001dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ddc:	4798      	blx	r3
 8001dde:	3601      	adds	r6, #1
 8001de0:	e7ee      	b.n	8001dc0 <__libc_init_array+0xc>
 8001de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001de6:	4798      	blx	r3
 8001de8:	3601      	adds	r6, #1
 8001dea:	e7f2      	b.n	8001dd2 <__libc_init_array+0x1e>
 8001dec:	0800284c 	.word	0x0800284c
 8001df0:	0800284c 	.word	0x0800284c
 8001df4:	0800284c 	.word	0x0800284c
 8001df8:	08002850 	.word	0x08002850

08001dfc <memset>:
 8001dfc:	4402      	add	r2, r0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d100      	bne.n	8001e06 <memset+0xa>
 8001e04:	4770      	bx	lr
 8001e06:	f803 1b01 	strb.w	r1, [r3], #1
 8001e0a:	e7f9      	b.n	8001e00 <memset+0x4>

08001e0c <_puts_r>:
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	460e      	mov	r6, r1
 8001e10:	4605      	mov	r5, r0
 8001e12:	b118      	cbz	r0, 8001e1c <_puts_r+0x10>
 8001e14:	6983      	ldr	r3, [r0, #24]
 8001e16:	b90b      	cbnz	r3, 8001e1c <_puts_r+0x10>
 8001e18:	f000 fa48 	bl	80022ac <__sinit>
 8001e1c:	69ab      	ldr	r3, [r5, #24]
 8001e1e:	68ac      	ldr	r4, [r5, #8]
 8001e20:	b913      	cbnz	r3, 8001e28 <_puts_r+0x1c>
 8001e22:	4628      	mov	r0, r5
 8001e24:	f000 fa42 	bl	80022ac <__sinit>
 8001e28:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <_puts_r+0xd0>)
 8001e2a:	429c      	cmp	r4, r3
 8001e2c:	d120      	bne.n	8001e70 <_puts_r+0x64>
 8001e2e:	686c      	ldr	r4, [r5, #4]
 8001e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e32:	07db      	lsls	r3, r3, #31
 8001e34:	d405      	bmi.n	8001e42 <_puts_r+0x36>
 8001e36:	89a3      	ldrh	r3, [r4, #12]
 8001e38:	0598      	lsls	r0, r3, #22
 8001e3a:	d402      	bmi.n	8001e42 <_puts_r+0x36>
 8001e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e3e:	f000 fad3 	bl	80023e8 <__retarget_lock_acquire_recursive>
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	0719      	lsls	r1, r3, #28
 8001e46:	d51d      	bpl.n	8001e84 <_puts_r+0x78>
 8001e48:	6923      	ldr	r3, [r4, #16]
 8001e4a:	b1db      	cbz	r3, 8001e84 <_puts_r+0x78>
 8001e4c:	3e01      	subs	r6, #1
 8001e4e:	68a3      	ldr	r3, [r4, #8]
 8001e50:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001e54:	3b01      	subs	r3, #1
 8001e56:	60a3      	str	r3, [r4, #8]
 8001e58:	bb39      	cbnz	r1, 8001eaa <_puts_r+0x9e>
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	da38      	bge.n	8001ed0 <_puts_r+0xc4>
 8001e5e:	4622      	mov	r2, r4
 8001e60:	210a      	movs	r1, #10
 8001e62:	4628      	mov	r0, r5
 8001e64:	f000 f848 	bl	8001ef8 <__swbuf_r>
 8001e68:	3001      	adds	r0, #1
 8001e6a:	d011      	beq.n	8001e90 <_puts_r+0x84>
 8001e6c:	250a      	movs	r5, #10
 8001e6e:	e011      	b.n	8001e94 <_puts_r+0x88>
 8001e70:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <_puts_r+0xd4>)
 8001e72:	429c      	cmp	r4, r3
 8001e74:	d101      	bne.n	8001e7a <_puts_r+0x6e>
 8001e76:	68ac      	ldr	r4, [r5, #8]
 8001e78:	e7da      	b.n	8001e30 <_puts_r+0x24>
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ee4 <_puts_r+0xd8>)
 8001e7c:	429c      	cmp	r4, r3
 8001e7e:	bf08      	it	eq
 8001e80:	68ec      	ldreq	r4, [r5, #12]
 8001e82:	e7d5      	b.n	8001e30 <_puts_r+0x24>
 8001e84:	4621      	mov	r1, r4
 8001e86:	4628      	mov	r0, r5
 8001e88:	f000 f888 	bl	8001f9c <__swsetup_r>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d0dd      	beq.n	8001e4c <_puts_r+0x40>
 8001e90:	f04f 35ff 	mov.w	r5, #4294967295
 8001e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e96:	07da      	lsls	r2, r3, #31
 8001e98:	d405      	bmi.n	8001ea6 <_puts_r+0x9a>
 8001e9a:	89a3      	ldrh	r3, [r4, #12]
 8001e9c:	059b      	lsls	r3, r3, #22
 8001e9e:	d402      	bmi.n	8001ea6 <_puts_r+0x9a>
 8001ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ea2:	f000 faa2 	bl	80023ea <__retarget_lock_release_recursive>
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	bd70      	pop	{r4, r5, r6, pc}
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	da04      	bge.n	8001eb8 <_puts_r+0xac>
 8001eae:	69a2      	ldr	r2, [r4, #24]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dc06      	bgt.n	8001ec2 <_puts_r+0xb6>
 8001eb4:	290a      	cmp	r1, #10
 8001eb6:	d004      	beq.n	8001ec2 <_puts_r+0xb6>
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	6022      	str	r2, [r4, #0]
 8001ebe:	7019      	strb	r1, [r3, #0]
 8001ec0:	e7c5      	b.n	8001e4e <_puts_r+0x42>
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	f000 f817 	bl	8001ef8 <__swbuf_r>
 8001eca:	3001      	adds	r0, #1
 8001ecc:	d1bf      	bne.n	8001e4e <_puts_r+0x42>
 8001ece:	e7df      	b.n	8001e90 <_puts_r+0x84>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	250a      	movs	r5, #10
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	6022      	str	r2, [r4, #0]
 8001ed8:	701d      	strb	r5, [r3, #0]
 8001eda:	e7db      	b.n	8001e94 <_puts_r+0x88>
 8001edc:	08002804 	.word	0x08002804
 8001ee0:	08002824 	.word	0x08002824
 8001ee4:	080027e4 	.word	0x080027e4

08001ee8 <puts>:
 8001ee8:	4b02      	ldr	r3, [pc, #8]	; (8001ef4 <puts+0xc>)
 8001eea:	4601      	mov	r1, r0
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	f7ff bf8d 	b.w	8001e0c <_puts_r>
 8001ef2:	bf00      	nop
 8001ef4:	2000000c 	.word	0x2000000c

08001ef8 <__swbuf_r>:
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	460e      	mov	r6, r1
 8001efc:	4614      	mov	r4, r2
 8001efe:	4605      	mov	r5, r0
 8001f00:	b118      	cbz	r0, 8001f0a <__swbuf_r+0x12>
 8001f02:	6983      	ldr	r3, [r0, #24]
 8001f04:	b90b      	cbnz	r3, 8001f0a <__swbuf_r+0x12>
 8001f06:	f000 f9d1 	bl	80022ac <__sinit>
 8001f0a:	4b21      	ldr	r3, [pc, #132]	; (8001f90 <__swbuf_r+0x98>)
 8001f0c:	429c      	cmp	r4, r3
 8001f0e:	d12b      	bne.n	8001f68 <__swbuf_r+0x70>
 8001f10:	686c      	ldr	r4, [r5, #4]
 8001f12:	69a3      	ldr	r3, [r4, #24]
 8001f14:	60a3      	str	r3, [r4, #8]
 8001f16:	89a3      	ldrh	r3, [r4, #12]
 8001f18:	071a      	lsls	r2, r3, #28
 8001f1a:	d52f      	bpl.n	8001f7c <__swbuf_r+0x84>
 8001f1c:	6923      	ldr	r3, [r4, #16]
 8001f1e:	b36b      	cbz	r3, 8001f7c <__swbuf_r+0x84>
 8001f20:	6923      	ldr	r3, [r4, #16]
 8001f22:	6820      	ldr	r0, [r4, #0]
 8001f24:	1ac0      	subs	r0, r0, r3
 8001f26:	6963      	ldr	r3, [r4, #20]
 8001f28:	b2f6      	uxtb	r6, r6
 8001f2a:	4283      	cmp	r3, r0
 8001f2c:	4637      	mov	r7, r6
 8001f2e:	dc04      	bgt.n	8001f3a <__swbuf_r+0x42>
 8001f30:	4621      	mov	r1, r4
 8001f32:	4628      	mov	r0, r5
 8001f34:	f000 f926 	bl	8002184 <_fflush_r>
 8001f38:	bb30      	cbnz	r0, 8001f88 <__swbuf_r+0x90>
 8001f3a:	68a3      	ldr	r3, [r4, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60a3      	str	r3, [r4, #8]
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	6022      	str	r2, [r4, #0]
 8001f46:	701e      	strb	r6, [r3, #0]
 8001f48:	6963      	ldr	r3, [r4, #20]
 8001f4a:	3001      	adds	r0, #1
 8001f4c:	4283      	cmp	r3, r0
 8001f4e:	d004      	beq.n	8001f5a <__swbuf_r+0x62>
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	07db      	lsls	r3, r3, #31
 8001f54:	d506      	bpl.n	8001f64 <__swbuf_r+0x6c>
 8001f56:	2e0a      	cmp	r6, #10
 8001f58:	d104      	bne.n	8001f64 <__swbuf_r+0x6c>
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	4628      	mov	r0, r5
 8001f5e:	f000 f911 	bl	8002184 <_fflush_r>
 8001f62:	b988      	cbnz	r0, 8001f88 <__swbuf_r+0x90>
 8001f64:	4638      	mov	r0, r7
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <__swbuf_r+0x9c>)
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	d101      	bne.n	8001f72 <__swbuf_r+0x7a>
 8001f6e:	68ac      	ldr	r4, [r5, #8]
 8001f70:	e7cf      	b.n	8001f12 <__swbuf_r+0x1a>
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <__swbuf_r+0xa0>)
 8001f74:	429c      	cmp	r4, r3
 8001f76:	bf08      	it	eq
 8001f78:	68ec      	ldreq	r4, [r5, #12]
 8001f7a:	e7ca      	b.n	8001f12 <__swbuf_r+0x1a>
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	4628      	mov	r0, r5
 8001f80:	f000 f80c 	bl	8001f9c <__swsetup_r>
 8001f84:	2800      	cmp	r0, #0
 8001f86:	d0cb      	beq.n	8001f20 <__swbuf_r+0x28>
 8001f88:	f04f 37ff 	mov.w	r7, #4294967295
 8001f8c:	e7ea      	b.n	8001f64 <__swbuf_r+0x6c>
 8001f8e:	bf00      	nop
 8001f90:	08002804 	.word	0x08002804
 8001f94:	08002824 	.word	0x08002824
 8001f98:	080027e4 	.word	0x080027e4

08001f9c <__swsetup_r>:
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <__swsetup_r+0xcc>)
 8001f9e:	b570      	push	{r4, r5, r6, lr}
 8001fa0:	681d      	ldr	r5, [r3, #0]
 8001fa2:	4606      	mov	r6, r0
 8001fa4:	460c      	mov	r4, r1
 8001fa6:	b125      	cbz	r5, 8001fb2 <__swsetup_r+0x16>
 8001fa8:	69ab      	ldr	r3, [r5, #24]
 8001faa:	b913      	cbnz	r3, 8001fb2 <__swsetup_r+0x16>
 8001fac:	4628      	mov	r0, r5
 8001fae:	f000 f97d 	bl	80022ac <__sinit>
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <__swsetup_r+0xd0>)
 8001fb4:	429c      	cmp	r4, r3
 8001fb6:	d10f      	bne.n	8001fd8 <__swsetup_r+0x3c>
 8001fb8:	686c      	ldr	r4, [r5, #4]
 8001fba:	89a3      	ldrh	r3, [r4, #12]
 8001fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001fc0:	0719      	lsls	r1, r3, #28
 8001fc2:	d42c      	bmi.n	800201e <__swsetup_r+0x82>
 8001fc4:	06dd      	lsls	r5, r3, #27
 8001fc6:	d411      	bmi.n	8001fec <__swsetup_r+0x50>
 8001fc8:	2309      	movs	r3, #9
 8001fca:	6033      	str	r3, [r6, #0]
 8001fcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001fd0:	81a3      	strh	r3, [r4, #12]
 8001fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd6:	e03e      	b.n	8002056 <__swsetup_r+0xba>
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <__swsetup_r+0xd4>)
 8001fda:	429c      	cmp	r4, r3
 8001fdc:	d101      	bne.n	8001fe2 <__swsetup_r+0x46>
 8001fde:	68ac      	ldr	r4, [r5, #8]
 8001fe0:	e7eb      	b.n	8001fba <__swsetup_r+0x1e>
 8001fe2:	4b24      	ldr	r3, [pc, #144]	; (8002074 <__swsetup_r+0xd8>)
 8001fe4:	429c      	cmp	r4, r3
 8001fe6:	bf08      	it	eq
 8001fe8:	68ec      	ldreq	r4, [r5, #12]
 8001fea:	e7e6      	b.n	8001fba <__swsetup_r+0x1e>
 8001fec:	0758      	lsls	r0, r3, #29
 8001fee:	d512      	bpl.n	8002016 <__swsetup_r+0x7a>
 8001ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ff2:	b141      	cbz	r1, 8002006 <__swsetup_r+0x6a>
 8001ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ff8:	4299      	cmp	r1, r3
 8001ffa:	d002      	beq.n	8002002 <__swsetup_r+0x66>
 8001ffc:	4630      	mov	r0, r6
 8001ffe:	f000 fa59 	bl	80024b4 <_free_r>
 8002002:	2300      	movs	r3, #0
 8002004:	6363      	str	r3, [r4, #52]	; 0x34
 8002006:	89a3      	ldrh	r3, [r4, #12]
 8002008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800200c:	81a3      	strh	r3, [r4, #12]
 800200e:	2300      	movs	r3, #0
 8002010:	6063      	str	r3, [r4, #4]
 8002012:	6923      	ldr	r3, [r4, #16]
 8002014:	6023      	str	r3, [r4, #0]
 8002016:	89a3      	ldrh	r3, [r4, #12]
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	81a3      	strh	r3, [r4, #12]
 800201e:	6923      	ldr	r3, [r4, #16]
 8002020:	b94b      	cbnz	r3, 8002036 <__swsetup_r+0x9a>
 8002022:	89a3      	ldrh	r3, [r4, #12]
 8002024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202c:	d003      	beq.n	8002036 <__swsetup_r+0x9a>
 800202e:	4621      	mov	r1, r4
 8002030:	4630      	mov	r0, r6
 8002032:	f000 f9ff 	bl	8002434 <__smakebuf_r>
 8002036:	89a0      	ldrh	r0, [r4, #12]
 8002038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800203c:	f010 0301 	ands.w	r3, r0, #1
 8002040:	d00a      	beq.n	8002058 <__swsetup_r+0xbc>
 8002042:	2300      	movs	r3, #0
 8002044:	60a3      	str	r3, [r4, #8]
 8002046:	6963      	ldr	r3, [r4, #20]
 8002048:	425b      	negs	r3, r3
 800204a:	61a3      	str	r3, [r4, #24]
 800204c:	6923      	ldr	r3, [r4, #16]
 800204e:	b943      	cbnz	r3, 8002062 <__swsetup_r+0xc6>
 8002050:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002054:	d1ba      	bne.n	8001fcc <__swsetup_r+0x30>
 8002056:	bd70      	pop	{r4, r5, r6, pc}
 8002058:	0781      	lsls	r1, r0, #30
 800205a:	bf58      	it	pl
 800205c:	6963      	ldrpl	r3, [r4, #20]
 800205e:	60a3      	str	r3, [r4, #8]
 8002060:	e7f4      	b.n	800204c <__swsetup_r+0xb0>
 8002062:	2000      	movs	r0, #0
 8002064:	e7f7      	b.n	8002056 <__swsetup_r+0xba>
 8002066:	bf00      	nop
 8002068:	2000000c 	.word	0x2000000c
 800206c:	08002804 	.word	0x08002804
 8002070:	08002824 	.word	0x08002824
 8002074:	080027e4 	.word	0x080027e4

08002078 <__sflush_r>:
 8002078:	898a      	ldrh	r2, [r1, #12]
 800207a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800207e:	4605      	mov	r5, r0
 8002080:	0710      	lsls	r0, r2, #28
 8002082:	460c      	mov	r4, r1
 8002084:	d458      	bmi.n	8002138 <__sflush_r+0xc0>
 8002086:	684b      	ldr	r3, [r1, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	dc05      	bgt.n	8002098 <__sflush_r+0x20>
 800208c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	dc02      	bgt.n	8002098 <__sflush_r+0x20>
 8002092:	2000      	movs	r0, #0
 8002094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800209a:	2e00      	cmp	r6, #0
 800209c:	d0f9      	beq.n	8002092 <__sflush_r+0x1a>
 800209e:	2300      	movs	r3, #0
 80020a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80020a4:	682f      	ldr	r7, [r5, #0]
 80020a6:	602b      	str	r3, [r5, #0]
 80020a8:	d032      	beq.n	8002110 <__sflush_r+0x98>
 80020aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80020ac:	89a3      	ldrh	r3, [r4, #12]
 80020ae:	075a      	lsls	r2, r3, #29
 80020b0:	d505      	bpl.n	80020be <__sflush_r+0x46>
 80020b2:	6863      	ldr	r3, [r4, #4]
 80020b4:	1ac0      	subs	r0, r0, r3
 80020b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020b8:	b10b      	cbz	r3, 80020be <__sflush_r+0x46>
 80020ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020bc:	1ac0      	subs	r0, r0, r3
 80020be:	2300      	movs	r3, #0
 80020c0:	4602      	mov	r2, r0
 80020c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80020c4:	6a21      	ldr	r1, [r4, #32]
 80020c6:	4628      	mov	r0, r5
 80020c8:	47b0      	blx	r6
 80020ca:	1c43      	adds	r3, r0, #1
 80020cc:	89a3      	ldrh	r3, [r4, #12]
 80020ce:	d106      	bne.n	80020de <__sflush_r+0x66>
 80020d0:	6829      	ldr	r1, [r5, #0]
 80020d2:	291d      	cmp	r1, #29
 80020d4:	d82c      	bhi.n	8002130 <__sflush_r+0xb8>
 80020d6:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <__sflush_r+0x108>)
 80020d8:	40ca      	lsrs	r2, r1
 80020da:	07d6      	lsls	r6, r2, #31
 80020dc:	d528      	bpl.n	8002130 <__sflush_r+0xb8>
 80020de:	2200      	movs	r2, #0
 80020e0:	6062      	str	r2, [r4, #4]
 80020e2:	04d9      	lsls	r1, r3, #19
 80020e4:	6922      	ldr	r2, [r4, #16]
 80020e6:	6022      	str	r2, [r4, #0]
 80020e8:	d504      	bpl.n	80020f4 <__sflush_r+0x7c>
 80020ea:	1c42      	adds	r2, r0, #1
 80020ec:	d101      	bne.n	80020f2 <__sflush_r+0x7a>
 80020ee:	682b      	ldr	r3, [r5, #0]
 80020f0:	b903      	cbnz	r3, 80020f4 <__sflush_r+0x7c>
 80020f2:	6560      	str	r0, [r4, #84]	; 0x54
 80020f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020f6:	602f      	str	r7, [r5, #0]
 80020f8:	2900      	cmp	r1, #0
 80020fa:	d0ca      	beq.n	8002092 <__sflush_r+0x1a>
 80020fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002100:	4299      	cmp	r1, r3
 8002102:	d002      	beq.n	800210a <__sflush_r+0x92>
 8002104:	4628      	mov	r0, r5
 8002106:	f000 f9d5 	bl	80024b4 <_free_r>
 800210a:	2000      	movs	r0, #0
 800210c:	6360      	str	r0, [r4, #52]	; 0x34
 800210e:	e7c1      	b.n	8002094 <__sflush_r+0x1c>
 8002110:	6a21      	ldr	r1, [r4, #32]
 8002112:	2301      	movs	r3, #1
 8002114:	4628      	mov	r0, r5
 8002116:	47b0      	blx	r6
 8002118:	1c41      	adds	r1, r0, #1
 800211a:	d1c7      	bne.n	80020ac <__sflush_r+0x34>
 800211c:	682b      	ldr	r3, [r5, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0c4      	beq.n	80020ac <__sflush_r+0x34>
 8002122:	2b1d      	cmp	r3, #29
 8002124:	d001      	beq.n	800212a <__sflush_r+0xb2>
 8002126:	2b16      	cmp	r3, #22
 8002128:	d101      	bne.n	800212e <__sflush_r+0xb6>
 800212a:	602f      	str	r7, [r5, #0]
 800212c:	e7b1      	b.n	8002092 <__sflush_r+0x1a>
 800212e:	89a3      	ldrh	r3, [r4, #12]
 8002130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	e7ad      	b.n	8002094 <__sflush_r+0x1c>
 8002138:	690f      	ldr	r7, [r1, #16]
 800213a:	2f00      	cmp	r7, #0
 800213c:	d0a9      	beq.n	8002092 <__sflush_r+0x1a>
 800213e:	0793      	lsls	r3, r2, #30
 8002140:	680e      	ldr	r6, [r1, #0]
 8002142:	bf08      	it	eq
 8002144:	694b      	ldreq	r3, [r1, #20]
 8002146:	600f      	str	r7, [r1, #0]
 8002148:	bf18      	it	ne
 800214a:	2300      	movne	r3, #0
 800214c:	eba6 0807 	sub.w	r8, r6, r7
 8002150:	608b      	str	r3, [r1, #8]
 8002152:	f1b8 0f00 	cmp.w	r8, #0
 8002156:	dd9c      	ble.n	8002092 <__sflush_r+0x1a>
 8002158:	6a21      	ldr	r1, [r4, #32]
 800215a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800215c:	4643      	mov	r3, r8
 800215e:	463a      	mov	r2, r7
 8002160:	4628      	mov	r0, r5
 8002162:	47b0      	blx	r6
 8002164:	2800      	cmp	r0, #0
 8002166:	dc06      	bgt.n	8002176 <__sflush_r+0xfe>
 8002168:	89a3      	ldrh	r3, [r4, #12]
 800216a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800216e:	81a3      	strh	r3, [r4, #12]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	e78e      	b.n	8002094 <__sflush_r+0x1c>
 8002176:	4407      	add	r7, r0
 8002178:	eba8 0800 	sub.w	r8, r8, r0
 800217c:	e7e9      	b.n	8002152 <__sflush_r+0xda>
 800217e:	bf00      	nop
 8002180:	20400001 	.word	0x20400001

08002184 <_fflush_r>:
 8002184:	b538      	push	{r3, r4, r5, lr}
 8002186:	690b      	ldr	r3, [r1, #16]
 8002188:	4605      	mov	r5, r0
 800218a:	460c      	mov	r4, r1
 800218c:	b913      	cbnz	r3, 8002194 <_fflush_r+0x10>
 800218e:	2500      	movs	r5, #0
 8002190:	4628      	mov	r0, r5
 8002192:	bd38      	pop	{r3, r4, r5, pc}
 8002194:	b118      	cbz	r0, 800219e <_fflush_r+0x1a>
 8002196:	6983      	ldr	r3, [r0, #24]
 8002198:	b90b      	cbnz	r3, 800219e <_fflush_r+0x1a>
 800219a:	f000 f887 	bl	80022ac <__sinit>
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <_fflush_r+0x6c>)
 80021a0:	429c      	cmp	r4, r3
 80021a2:	d11b      	bne.n	80021dc <_fflush_r+0x58>
 80021a4:	686c      	ldr	r4, [r5, #4]
 80021a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0ef      	beq.n	800218e <_fflush_r+0xa>
 80021ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021b0:	07d0      	lsls	r0, r2, #31
 80021b2:	d404      	bmi.n	80021be <_fflush_r+0x3a>
 80021b4:	0599      	lsls	r1, r3, #22
 80021b6:	d402      	bmi.n	80021be <_fflush_r+0x3a>
 80021b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021ba:	f000 f915 	bl	80023e8 <__retarget_lock_acquire_recursive>
 80021be:	4628      	mov	r0, r5
 80021c0:	4621      	mov	r1, r4
 80021c2:	f7ff ff59 	bl	8002078 <__sflush_r>
 80021c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80021c8:	07da      	lsls	r2, r3, #31
 80021ca:	4605      	mov	r5, r0
 80021cc:	d4e0      	bmi.n	8002190 <_fflush_r+0xc>
 80021ce:	89a3      	ldrh	r3, [r4, #12]
 80021d0:	059b      	lsls	r3, r3, #22
 80021d2:	d4dd      	bmi.n	8002190 <_fflush_r+0xc>
 80021d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80021d6:	f000 f908 	bl	80023ea <__retarget_lock_release_recursive>
 80021da:	e7d9      	b.n	8002190 <_fflush_r+0xc>
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <_fflush_r+0x70>)
 80021de:	429c      	cmp	r4, r3
 80021e0:	d101      	bne.n	80021e6 <_fflush_r+0x62>
 80021e2:	68ac      	ldr	r4, [r5, #8]
 80021e4:	e7df      	b.n	80021a6 <_fflush_r+0x22>
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <_fflush_r+0x74>)
 80021e8:	429c      	cmp	r4, r3
 80021ea:	bf08      	it	eq
 80021ec:	68ec      	ldreq	r4, [r5, #12]
 80021ee:	e7da      	b.n	80021a6 <_fflush_r+0x22>
 80021f0:	08002804 	.word	0x08002804
 80021f4:	08002824 	.word	0x08002824
 80021f8:	080027e4 	.word	0x080027e4

080021fc <std>:
 80021fc:	2300      	movs	r3, #0
 80021fe:	b510      	push	{r4, lr}
 8002200:	4604      	mov	r4, r0
 8002202:	e9c0 3300 	strd	r3, r3, [r0]
 8002206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800220a:	6083      	str	r3, [r0, #8]
 800220c:	8181      	strh	r1, [r0, #12]
 800220e:	6643      	str	r3, [r0, #100]	; 0x64
 8002210:	81c2      	strh	r2, [r0, #14]
 8002212:	6183      	str	r3, [r0, #24]
 8002214:	4619      	mov	r1, r3
 8002216:	2208      	movs	r2, #8
 8002218:	305c      	adds	r0, #92	; 0x5c
 800221a:	f7ff fdef 	bl	8001dfc <memset>
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <std+0x38>)
 8002220:	6263      	str	r3, [r4, #36]	; 0x24
 8002222:	4b05      	ldr	r3, [pc, #20]	; (8002238 <std+0x3c>)
 8002224:	62a3      	str	r3, [r4, #40]	; 0x28
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <std+0x40>)
 8002228:	62e3      	str	r3, [r4, #44]	; 0x2c
 800222a:	4b05      	ldr	r3, [pc, #20]	; (8002240 <std+0x44>)
 800222c:	6224      	str	r4, [r4, #32]
 800222e:	6323      	str	r3, [r4, #48]	; 0x30
 8002230:	bd10      	pop	{r4, pc}
 8002232:	bf00      	nop
 8002234:	08002629 	.word	0x08002629
 8002238:	0800264b 	.word	0x0800264b
 800223c:	08002683 	.word	0x08002683
 8002240:	080026a7 	.word	0x080026a7

08002244 <_cleanup_r>:
 8002244:	4901      	ldr	r1, [pc, #4]	; (800224c <_cleanup_r+0x8>)
 8002246:	f000 b8af 	b.w	80023a8 <_fwalk_reent>
 800224a:	bf00      	nop
 800224c:	08002185 	.word	0x08002185

08002250 <__sfmoreglue>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	1e4a      	subs	r2, r1, #1
 8002254:	2568      	movs	r5, #104	; 0x68
 8002256:	4355      	muls	r5, r2
 8002258:	460e      	mov	r6, r1
 800225a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800225e:	f000 f979 	bl	8002554 <_malloc_r>
 8002262:	4604      	mov	r4, r0
 8002264:	b140      	cbz	r0, 8002278 <__sfmoreglue+0x28>
 8002266:	2100      	movs	r1, #0
 8002268:	e9c0 1600 	strd	r1, r6, [r0]
 800226c:	300c      	adds	r0, #12
 800226e:	60a0      	str	r0, [r4, #8]
 8002270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002274:	f7ff fdc2 	bl	8001dfc <memset>
 8002278:	4620      	mov	r0, r4
 800227a:	bd70      	pop	{r4, r5, r6, pc}

0800227c <__sfp_lock_acquire>:
 800227c:	4801      	ldr	r0, [pc, #4]	; (8002284 <__sfp_lock_acquire+0x8>)
 800227e:	f000 b8b3 	b.w	80023e8 <__retarget_lock_acquire_recursive>
 8002282:	bf00      	nop
 8002284:	200000cc 	.word	0x200000cc

08002288 <__sfp_lock_release>:
 8002288:	4801      	ldr	r0, [pc, #4]	; (8002290 <__sfp_lock_release+0x8>)
 800228a:	f000 b8ae 	b.w	80023ea <__retarget_lock_release_recursive>
 800228e:	bf00      	nop
 8002290:	200000cc 	.word	0x200000cc

08002294 <__sinit_lock_acquire>:
 8002294:	4801      	ldr	r0, [pc, #4]	; (800229c <__sinit_lock_acquire+0x8>)
 8002296:	f000 b8a7 	b.w	80023e8 <__retarget_lock_acquire_recursive>
 800229a:	bf00      	nop
 800229c:	200000c7 	.word	0x200000c7

080022a0 <__sinit_lock_release>:
 80022a0:	4801      	ldr	r0, [pc, #4]	; (80022a8 <__sinit_lock_release+0x8>)
 80022a2:	f000 b8a2 	b.w	80023ea <__retarget_lock_release_recursive>
 80022a6:	bf00      	nop
 80022a8:	200000c7 	.word	0x200000c7

080022ac <__sinit>:
 80022ac:	b510      	push	{r4, lr}
 80022ae:	4604      	mov	r4, r0
 80022b0:	f7ff fff0 	bl	8002294 <__sinit_lock_acquire>
 80022b4:	69a3      	ldr	r3, [r4, #24]
 80022b6:	b11b      	cbz	r3, 80022c0 <__sinit+0x14>
 80022b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022bc:	f7ff bff0 	b.w	80022a0 <__sinit_lock_release>
 80022c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80022c4:	6523      	str	r3, [r4, #80]	; 0x50
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <__sinit+0x68>)
 80022c8:	4a13      	ldr	r2, [pc, #76]	; (8002318 <__sinit+0x6c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80022ce:	42a3      	cmp	r3, r4
 80022d0:	bf04      	itt	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	61a3      	streq	r3, [r4, #24]
 80022d6:	4620      	mov	r0, r4
 80022d8:	f000 f820 	bl	800231c <__sfp>
 80022dc:	6060      	str	r0, [r4, #4]
 80022de:	4620      	mov	r0, r4
 80022e0:	f000 f81c 	bl	800231c <__sfp>
 80022e4:	60a0      	str	r0, [r4, #8]
 80022e6:	4620      	mov	r0, r4
 80022e8:	f000 f818 	bl	800231c <__sfp>
 80022ec:	2200      	movs	r2, #0
 80022ee:	60e0      	str	r0, [r4, #12]
 80022f0:	2104      	movs	r1, #4
 80022f2:	6860      	ldr	r0, [r4, #4]
 80022f4:	f7ff ff82 	bl	80021fc <std>
 80022f8:	68a0      	ldr	r0, [r4, #8]
 80022fa:	2201      	movs	r2, #1
 80022fc:	2109      	movs	r1, #9
 80022fe:	f7ff ff7d 	bl	80021fc <std>
 8002302:	68e0      	ldr	r0, [r4, #12]
 8002304:	2202      	movs	r2, #2
 8002306:	2112      	movs	r1, #18
 8002308:	f7ff ff78 	bl	80021fc <std>
 800230c:	2301      	movs	r3, #1
 800230e:	61a3      	str	r3, [r4, #24]
 8002310:	e7d2      	b.n	80022b8 <__sinit+0xc>
 8002312:	bf00      	nop
 8002314:	080027e0 	.word	0x080027e0
 8002318:	08002245 	.word	0x08002245

0800231c <__sfp>:
 800231c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231e:	4607      	mov	r7, r0
 8002320:	f7ff ffac 	bl	800227c <__sfp_lock_acquire>
 8002324:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <__sfp+0x84>)
 8002326:	681e      	ldr	r6, [r3, #0]
 8002328:	69b3      	ldr	r3, [r6, #24]
 800232a:	b913      	cbnz	r3, 8002332 <__sfp+0x16>
 800232c:	4630      	mov	r0, r6
 800232e:	f7ff ffbd 	bl	80022ac <__sinit>
 8002332:	3648      	adds	r6, #72	; 0x48
 8002334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002338:	3b01      	subs	r3, #1
 800233a:	d503      	bpl.n	8002344 <__sfp+0x28>
 800233c:	6833      	ldr	r3, [r6, #0]
 800233e:	b30b      	cbz	r3, 8002384 <__sfp+0x68>
 8002340:	6836      	ldr	r6, [r6, #0]
 8002342:	e7f7      	b.n	8002334 <__sfp+0x18>
 8002344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002348:	b9d5      	cbnz	r5, 8002380 <__sfp+0x64>
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <__sfp+0x88>)
 800234c:	60e3      	str	r3, [r4, #12]
 800234e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002352:	6665      	str	r5, [r4, #100]	; 0x64
 8002354:	f000 f847 	bl	80023e6 <__retarget_lock_init_recursive>
 8002358:	f7ff ff96 	bl	8002288 <__sfp_lock_release>
 800235c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002360:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002364:	6025      	str	r5, [r4, #0]
 8002366:	61a5      	str	r5, [r4, #24]
 8002368:	2208      	movs	r2, #8
 800236a:	4629      	mov	r1, r5
 800236c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002370:	f7ff fd44 	bl	8001dfc <memset>
 8002374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800237c:	4620      	mov	r0, r4
 800237e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002380:	3468      	adds	r4, #104	; 0x68
 8002382:	e7d9      	b.n	8002338 <__sfp+0x1c>
 8002384:	2104      	movs	r1, #4
 8002386:	4638      	mov	r0, r7
 8002388:	f7ff ff62 	bl	8002250 <__sfmoreglue>
 800238c:	4604      	mov	r4, r0
 800238e:	6030      	str	r0, [r6, #0]
 8002390:	2800      	cmp	r0, #0
 8002392:	d1d5      	bne.n	8002340 <__sfp+0x24>
 8002394:	f7ff ff78 	bl	8002288 <__sfp_lock_release>
 8002398:	230c      	movs	r3, #12
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	e7ee      	b.n	800237c <__sfp+0x60>
 800239e:	bf00      	nop
 80023a0:	080027e0 	.word	0x080027e0
 80023a4:	ffff0001 	.word	0xffff0001

080023a8 <_fwalk_reent>:
 80023a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023ac:	4606      	mov	r6, r0
 80023ae:	4688      	mov	r8, r1
 80023b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023b4:	2700      	movs	r7, #0
 80023b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023ba:	f1b9 0901 	subs.w	r9, r9, #1
 80023be:	d505      	bpl.n	80023cc <_fwalk_reent+0x24>
 80023c0:	6824      	ldr	r4, [r4, #0]
 80023c2:	2c00      	cmp	r4, #0
 80023c4:	d1f7      	bne.n	80023b6 <_fwalk_reent+0xe>
 80023c6:	4638      	mov	r0, r7
 80023c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023cc:	89ab      	ldrh	r3, [r5, #12]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d907      	bls.n	80023e2 <_fwalk_reent+0x3a>
 80023d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023d6:	3301      	adds	r3, #1
 80023d8:	d003      	beq.n	80023e2 <_fwalk_reent+0x3a>
 80023da:	4629      	mov	r1, r5
 80023dc:	4630      	mov	r0, r6
 80023de:	47c0      	blx	r8
 80023e0:	4307      	orrs	r7, r0
 80023e2:	3568      	adds	r5, #104	; 0x68
 80023e4:	e7e9      	b.n	80023ba <_fwalk_reent+0x12>

080023e6 <__retarget_lock_init_recursive>:
 80023e6:	4770      	bx	lr

080023e8 <__retarget_lock_acquire_recursive>:
 80023e8:	4770      	bx	lr

080023ea <__retarget_lock_release_recursive>:
 80023ea:	4770      	bx	lr

080023ec <__swhatbuf_r>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	460e      	mov	r6, r1
 80023f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023f4:	2900      	cmp	r1, #0
 80023f6:	b096      	sub	sp, #88	; 0x58
 80023f8:	4614      	mov	r4, r2
 80023fa:	461d      	mov	r5, r3
 80023fc:	da07      	bge.n	800240e <__swhatbuf_r+0x22>
 80023fe:	2300      	movs	r3, #0
 8002400:	602b      	str	r3, [r5, #0]
 8002402:	89b3      	ldrh	r3, [r6, #12]
 8002404:	061a      	lsls	r2, r3, #24
 8002406:	d410      	bmi.n	800242a <__swhatbuf_r+0x3e>
 8002408:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800240c:	e00e      	b.n	800242c <__swhatbuf_r+0x40>
 800240e:	466a      	mov	r2, sp
 8002410:	f000 f970 	bl	80026f4 <_fstat_r>
 8002414:	2800      	cmp	r0, #0
 8002416:	dbf2      	blt.n	80023fe <__swhatbuf_r+0x12>
 8002418:	9a01      	ldr	r2, [sp, #4]
 800241a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800241e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002422:	425a      	negs	r2, r3
 8002424:	415a      	adcs	r2, r3
 8002426:	602a      	str	r2, [r5, #0]
 8002428:	e7ee      	b.n	8002408 <__swhatbuf_r+0x1c>
 800242a:	2340      	movs	r3, #64	; 0x40
 800242c:	2000      	movs	r0, #0
 800242e:	6023      	str	r3, [r4, #0]
 8002430:	b016      	add	sp, #88	; 0x58
 8002432:	bd70      	pop	{r4, r5, r6, pc}

08002434 <__smakebuf_r>:
 8002434:	898b      	ldrh	r3, [r1, #12]
 8002436:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002438:	079d      	lsls	r5, r3, #30
 800243a:	4606      	mov	r6, r0
 800243c:	460c      	mov	r4, r1
 800243e:	d507      	bpl.n	8002450 <__smakebuf_r+0x1c>
 8002440:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002444:	6023      	str	r3, [r4, #0]
 8002446:	6123      	str	r3, [r4, #16]
 8002448:	2301      	movs	r3, #1
 800244a:	6163      	str	r3, [r4, #20]
 800244c:	b002      	add	sp, #8
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	ab01      	add	r3, sp, #4
 8002452:	466a      	mov	r2, sp
 8002454:	f7ff ffca 	bl	80023ec <__swhatbuf_r>
 8002458:	9900      	ldr	r1, [sp, #0]
 800245a:	4605      	mov	r5, r0
 800245c:	4630      	mov	r0, r6
 800245e:	f000 f879 	bl	8002554 <_malloc_r>
 8002462:	b948      	cbnz	r0, 8002478 <__smakebuf_r+0x44>
 8002464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002468:	059a      	lsls	r2, r3, #22
 800246a:	d4ef      	bmi.n	800244c <__smakebuf_r+0x18>
 800246c:	f023 0303 	bic.w	r3, r3, #3
 8002470:	f043 0302 	orr.w	r3, r3, #2
 8002474:	81a3      	strh	r3, [r4, #12]
 8002476:	e7e3      	b.n	8002440 <__smakebuf_r+0xc>
 8002478:	4b0d      	ldr	r3, [pc, #52]	; (80024b0 <__smakebuf_r+0x7c>)
 800247a:	62b3      	str	r3, [r6, #40]	; 0x28
 800247c:	89a3      	ldrh	r3, [r4, #12]
 800247e:	6020      	str	r0, [r4, #0]
 8002480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002484:	81a3      	strh	r3, [r4, #12]
 8002486:	9b00      	ldr	r3, [sp, #0]
 8002488:	6163      	str	r3, [r4, #20]
 800248a:	9b01      	ldr	r3, [sp, #4]
 800248c:	6120      	str	r0, [r4, #16]
 800248e:	b15b      	cbz	r3, 80024a8 <__smakebuf_r+0x74>
 8002490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002494:	4630      	mov	r0, r6
 8002496:	f000 f93f 	bl	8002718 <_isatty_r>
 800249a:	b128      	cbz	r0, 80024a8 <__smakebuf_r+0x74>
 800249c:	89a3      	ldrh	r3, [r4, #12]
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	81a3      	strh	r3, [r4, #12]
 80024a8:	89a0      	ldrh	r0, [r4, #12]
 80024aa:	4305      	orrs	r5, r0
 80024ac:	81a5      	strh	r5, [r4, #12]
 80024ae:	e7cd      	b.n	800244c <__smakebuf_r+0x18>
 80024b0:	08002245 	.word	0x08002245

080024b4 <_free_r>:
 80024b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024b6:	2900      	cmp	r1, #0
 80024b8:	d048      	beq.n	800254c <_free_r+0x98>
 80024ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024be:	9001      	str	r0, [sp, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f1a1 0404 	sub.w	r4, r1, #4
 80024c6:	bfb8      	it	lt
 80024c8:	18e4      	addlt	r4, r4, r3
 80024ca:	f000 f947 	bl	800275c <__malloc_lock>
 80024ce:	4a20      	ldr	r2, [pc, #128]	; (8002550 <_free_r+0x9c>)
 80024d0:	9801      	ldr	r0, [sp, #4]
 80024d2:	6813      	ldr	r3, [r2, #0]
 80024d4:	4615      	mov	r5, r2
 80024d6:	b933      	cbnz	r3, 80024e6 <_free_r+0x32>
 80024d8:	6063      	str	r3, [r4, #4]
 80024da:	6014      	str	r4, [r2, #0]
 80024dc:	b003      	add	sp, #12
 80024de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024e2:	f000 b941 	b.w	8002768 <__malloc_unlock>
 80024e6:	42a3      	cmp	r3, r4
 80024e8:	d90b      	bls.n	8002502 <_free_r+0x4e>
 80024ea:	6821      	ldr	r1, [r4, #0]
 80024ec:	1862      	adds	r2, r4, r1
 80024ee:	4293      	cmp	r3, r2
 80024f0:	bf04      	itt	eq
 80024f2:	681a      	ldreq	r2, [r3, #0]
 80024f4:	685b      	ldreq	r3, [r3, #4]
 80024f6:	6063      	str	r3, [r4, #4]
 80024f8:	bf04      	itt	eq
 80024fa:	1852      	addeq	r2, r2, r1
 80024fc:	6022      	streq	r2, [r4, #0]
 80024fe:	602c      	str	r4, [r5, #0]
 8002500:	e7ec      	b.n	80024dc <_free_r+0x28>
 8002502:	461a      	mov	r2, r3
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	b10b      	cbz	r3, 800250c <_free_r+0x58>
 8002508:	42a3      	cmp	r3, r4
 800250a:	d9fa      	bls.n	8002502 <_free_r+0x4e>
 800250c:	6811      	ldr	r1, [r2, #0]
 800250e:	1855      	adds	r5, r2, r1
 8002510:	42a5      	cmp	r5, r4
 8002512:	d10b      	bne.n	800252c <_free_r+0x78>
 8002514:	6824      	ldr	r4, [r4, #0]
 8002516:	4421      	add	r1, r4
 8002518:	1854      	adds	r4, r2, r1
 800251a:	42a3      	cmp	r3, r4
 800251c:	6011      	str	r1, [r2, #0]
 800251e:	d1dd      	bne.n	80024dc <_free_r+0x28>
 8002520:	681c      	ldr	r4, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	6053      	str	r3, [r2, #4]
 8002526:	4421      	add	r1, r4
 8002528:	6011      	str	r1, [r2, #0]
 800252a:	e7d7      	b.n	80024dc <_free_r+0x28>
 800252c:	d902      	bls.n	8002534 <_free_r+0x80>
 800252e:	230c      	movs	r3, #12
 8002530:	6003      	str	r3, [r0, #0]
 8002532:	e7d3      	b.n	80024dc <_free_r+0x28>
 8002534:	6825      	ldr	r5, [r4, #0]
 8002536:	1961      	adds	r1, r4, r5
 8002538:	428b      	cmp	r3, r1
 800253a:	bf04      	itt	eq
 800253c:	6819      	ldreq	r1, [r3, #0]
 800253e:	685b      	ldreq	r3, [r3, #4]
 8002540:	6063      	str	r3, [r4, #4]
 8002542:	bf04      	itt	eq
 8002544:	1949      	addeq	r1, r1, r5
 8002546:	6021      	streq	r1, [r4, #0]
 8002548:	6054      	str	r4, [r2, #4]
 800254a:	e7c7      	b.n	80024dc <_free_r+0x28>
 800254c:	b003      	add	sp, #12
 800254e:	bd30      	pop	{r4, r5, pc}
 8002550:	20000090 	.word	0x20000090

08002554 <_malloc_r>:
 8002554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002556:	1ccd      	adds	r5, r1, #3
 8002558:	f025 0503 	bic.w	r5, r5, #3
 800255c:	3508      	adds	r5, #8
 800255e:	2d0c      	cmp	r5, #12
 8002560:	bf38      	it	cc
 8002562:	250c      	movcc	r5, #12
 8002564:	2d00      	cmp	r5, #0
 8002566:	4606      	mov	r6, r0
 8002568:	db01      	blt.n	800256e <_malloc_r+0x1a>
 800256a:	42a9      	cmp	r1, r5
 800256c:	d903      	bls.n	8002576 <_malloc_r+0x22>
 800256e:	230c      	movs	r3, #12
 8002570:	6033      	str	r3, [r6, #0]
 8002572:	2000      	movs	r0, #0
 8002574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002576:	f000 f8f1 	bl	800275c <__malloc_lock>
 800257a:	4921      	ldr	r1, [pc, #132]	; (8002600 <_malloc_r+0xac>)
 800257c:	680a      	ldr	r2, [r1, #0]
 800257e:	4614      	mov	r4, r2
 8002580:	b99c      	cbnz	r4, 80025aa <_malloc_r+0x56>
 8002582:	4f20      	ldr	r7, [pc, #128]	; (8002604 <_malloc_r+0xb0>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	b923      	cbnz	r3, 8002592 <_malloc_r+0x3e>
 8002588:	4621      	mov	r1, r4
 800258a:	4630      	mov	r0, r6
 800258c:	f000 f83c 	bl	8002608 <_sbrk_r>
 8002590:	6038      	str	r0, [r7, #0]
 8002592:	4629      	mov	r1, r5
 8002594:	4630      	mov	r0, r6
 8002596:	f000 f837 	bl	8002608 <_sbrk_r>
 800259a:	1c43      	adds	r3, r0, #1
 800259c:	d123      	bne.n	80025e6 <_malloc_r+0x92>
 800259e:	230c      	movs	r3, #12
 80025a0:	6033      	str	r3, [r6, #0]
 80025a2:	4630      	mov	r0, r6
 80025a4:	f000 f8e0 	bl	8002768 <__malloc_unlock>
 80025a8:	e7e3      	b.n	8002572 <_malloc_r+0x1e>
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	1b5b      	subs	r3, r3, r5
 80025ae:	d417      	bmi.n	80025e0 <_malloc_r+0x8c>
 80025b0:	2b0b      	cmp	r3, #11
 80025b2:	d903      	bls.n	80025bc <_malloc_r+0x68>
 80025b4:	6023      	str	r3, [r4, #0]
 80025b6:	441c      	add	r4, r3
 80025b8:	6025      	str	r5, [r4, #0]
 80025ba:	e004      	b.n	80025c6 <_malloc_r+0x72>
 80025bc:	6863      	ldr	r3, [r4, #4]
 80025be:	42a2      	cmp	r2, r4
 80025c0:	bf0c      	ite	eq
 80025c2:	600b      	streq	r3, [r1, #0]
 80025c4:	6053      	strne	r3, [r2, #4]
 80025c6:	4630      	mov	r0, r6
 80025c8:	f000 f8ce 	bl	8002768 <__malloc_unlock>
 80025cc:	f104 000b 	add.w	r0, r4, #11
 80025d0:	1d23      	adds	r3, r4, #4
 80025d2:	f020 0007 	bic.w	r0, r0, #7
 80025d6:	1ac2      	subs	r2, r0, r3
 80025d8:	d0cc      	beq.n	8002574 <_malloc_r+0x20>
 80025da:	1a1b      	subs	r3, r3, r0
 80025dc:	50a3      	str	r3, [r4, r2]
 80025de:	e7c9      	b.n	8002574 <_malloc_r+0x20>
 80025e0:	4622      	mov	r2, r4
 80025e2:	6864      	ldr	r4, [r4, #4]
 80025e4:	e7cc      	b.n	8002580 <_malloc_r+0x2c>
 80025e6:	1cc4      	adds	r4, r0, #3
 80025e8:	f024 0403 	bic.w	r4, r4, #3
 80025ec:	42a0      	cmp	r0, r4
 80025ee:	d0e3      	beq.n	80025b8 <_malloc_r+0x64>
 80025f0:	1a21      	subs	r1, r4, r0
 80025f2:	4630      	mov	r0, r6
 80025f4:	f000 f808 	bl	8002608 <_sbrk_r>
 80025f8:	3001      	adds	r0, #1
 80025fa:	d1dd      	bne.n	80025b8 <_malloc_r+0x64>
 80025fc:	e7cf      	b.n	800259e <_malloc_r+0x4a>
 80025fe:	bf00      	nop
 8002600:	20000090 	.word	0x20000090
 8002604:	20000094 	.word	0x20000094

08002608 <_sbrk_r>:
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	4d06      	ldr	r5, [pc, #24]	; (8002624 <_sbrk_r+0x1c>)
 800260c:	2300      	movs	r3, #0
 800260e:	4604      	mov	r4, r0
 8002610:	4608      	mov	r0, r1
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	f7fe f9c2 	bl	800099c <_sbrk>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d102      	bne.n	8002622 <_sbrk_r+0x1a>
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	b103      	cbz	r3, 8002622 <_sbrk_r+0x1a>
 8002620:	6023      	str	r3, [r4, #0]
 8002622:	bd38      	pop	{r3, r4, r5, pc}
 8002624:	200000d0 	.word	0x200000d0

08002628 <__sread>:
 8002628:	b510      	push	{r4, lr}
 800262a:	460c      	mov	r4, r1
 800262c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002630:	f000 f8a0 	bl	8002774 <_read_r>
 8002634:	2800      	cmp	r0, #0
 8002636:	bfab      	itete	ge
 8002638:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800263a:	89a3      	ldrhlt	r3, [r4, #12]
 800263c:	181b      	addge	r3, r3, r0
 800263e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002642:	bfac      	ite	ge
 8002644:	6563      	strge	r3, [r4, #84]	; 0x54
 8002646:	81a3      	strhlt	r3, [r4, #12]
 8002648:	bd10      	pop	{r4, pc}

0800264a <__swrite>:
 800264a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800264e:	461f      	mov	r7, r3
 8002650:	898b      	ldrh	r3, [r1, #12]
 8002652:	05db      	lsls	r3, r3, #23
 8002654:	4605      	mov	r5, r0
 8002656:	460c      	mov	r4, r1
 8002658:	4616      	mov	r6, r2
 800265a:	d505      	bpl.n	8002668 <__swrite+0x1e>
 800265c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002660:	2302      	movs	r3, #2
 8002662:	2200      	movs	r2, #0
 8002664:	f000 f868 	bl	8002738 <_lseek_r>
 8002668:	89a3      	ldrh	r3, [r4, #12]
 800266a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800266e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002672:	81a3      	strh	r3, [r4, #12]
 8002674:	4632      	mov	r2, r6
 8002676:	463b      	mov	r3, r7
 8002678:	4628      	mov	r0, r5
 800267a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800267e:	f000 b817 	b.w	80026b0 <_write_r>

08002682 <__sseek>:
 8002682:	b510      	push	{r4, lr}
 8002684:	460c      	mov	r4, r1
 8002686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800268a:	f000 f855 	bl	8002738 <_lseek_r>
 800268e:	1c43      	adds	r3, r0, #1
 8002690:	89a3      	ldrh	r3, [r4, #12]
 8002692:	bf15      	itete	ne
 8002694:	6560      	strne	r0, [r4, #84]	; 0x54
 8002696:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800269a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800269e:	81a3      	strheq	r3, [r4, #12]
 80026a0:	bf18      	it	ne
 80026a2:	81a3      	strhne	r3, [r4, #12]
 80026a4:	bd10      	pop	{r4, pc}

080026a6 <__sclose>:
 80026a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026aa:	f000 b813 	b.w	80026d4 <_close_r>
	...

080026b0 <_write_r>:
 80026b0:	b538      	push	{r3, r4, r5, lr}
 80026b2:	4d07      	ldr	r5, [pc, #28]	; (80026d0 <_write_r+0x20>)
 80026b4:	4604      	mov	r4, r0
 80026b6:	4608      	mov	r0, r1
 80026b8:	4611      	mov	r1, r2
 80026ba:	2200      	movs	r2, #0
 80026bc:	602a      	str	r2, [r5, #0]
 80026be:	461a      	mov	r2, r3
 80026c0:	f7fe f91c 	bl	80008fc <_write>
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	d102      	bne.n	80026ce <_write_r+0x1e>
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	b103      	cbz	r3, 80026ce <_write_r+0x1e>
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	bd38      	pop	{r3, r4, r5, pc}
 80026d0:	200000d0 	.word	0x200000d0

080026d4 <_close_r>:
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4d06      	ldr	r5, [pc, #24]	; (80026f0 <_close_r+0x1c>)
 80026d8:	2300      	movs	r3, #0
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	602b      	str	r3, [r5, #0]
 80026e0:	f7fe f928 	bl	8000934 <_close>
 80026e4:	1c43      	adds	r3, r0, #1
 80026e6:	d102      	bne.n	80026ee <_close_r+0x1a>
 80026e8:	682b      	ldr	r3, [r5, #0]
 80026ea:	b103      	cbz	r3, 80026ee <_close_r+0x1a>
 80026ec:	6023      	str	r3, [r4, #0]
 80026ee:	bd38      	pop	{r3, r4, r5, pc}
 80026f0:	200000d0 	.word	0x200000d0

080026f4 <_fstat_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4d07      	ldr	r5, [pc, #28]	; (8002714 <_fstat_r+0x20>)
 80026f8:	2300      	movs	r3, #0
 80026fa:	4604      	mov	r4, r0
 80026fc:	4608      	mov	r0, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	602b      	str	r3, [r5, #0]
 8002702:	f7fe f923 	bl	800094c <_fstat>
 8002706:	1c43      	adds	r3, r0, #1
 8002708:	d102      	bne.n	8002710 <_fstat_r+0x1c>
 800270a:	682b      	ldr	r3, [r5, #0]
 800270c:	b103      	cbz	r3, 8002710 <_fstat_r+0x1c>
 800270e:	6023      	str	r3, [r4, #0]
 8002710:	bd38      	pop	{r3, r4, r5, pc}
 8002712:	bf00      	nop
 8002714:	200000d0 	.word	0x200000d0

08002718 <_isatty_r>:
 8002718:	b538      	push	{r3, r4, r5, lr}
 800271a:	4d06      	ldr	r5, [pc, #24]	; (8002734 <_isatty_r+0x1c>)
 800271c:	2300      	movs	r3, #0
 800271e:	4604      	mov	r4, r0
 8002720:	4608      	mov	r0, r1
 8002722:	602b      	str	r3, [r5, #0]
 8002724:	f7fe f922 	bl	800096c <_isatty>
 8002728:	1c43      	adds	r3, r0, #1
 800272a:	d102      	bne.n	8002732 <_isatty_r+0x1a>
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	b103      	cbz	r3, 8002732 <_isatty_r+0x1a>
 8002730:	6023      	str	r3, [r4, #0]
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	200000d0 	.word	0x200000d0

08002738 <_lseek_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4d07      	ldr	r5, [pc, #28]	; (8002758 <_lseek_r+0x20>)
 800273c:	4604      	mov	r4, r0
 800273e:	4608      	mov	r0, r1
 8002740:	4611      	mov	r1, r2
 8002742:	2200      	movs	r2, #0
 8002744:	602a      	str	r2, [r5, #0]
 8002746:	461a      	mov	r2, r3
 8002748:	f7fe f91b 	bl	8000982 <_lseek>
 800274c:	1c43      	adds	r3, r0, #1
 800274e:	d102      	bne.n	8002756 <_lseek_r+0x1e>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	b103      	cbz	r3, 8002756 <_lseek_r+0x1e>
 8002754:	6023      	str	r3, [r4, #0]
 8002756:	bd38      	pop	{r3, r4, r5, pc}
 8002758:	200000d0 	.word	0x200000d0

0800275c <__malloc_lock>:
 800275c:	4801      	ldr	r0, [pc, #4]	; (8002764 <__malloc_lock+0x8>)
 800275e:	f7ff be43 	b.w	80023e8 <__retarget_lock_acquire_recursive>
 8002762:	bf00      	nop
 8002764:	200000c8 	.word	0x200000c8

08002768 <__malloc_unlock>:
 8002768:	4801      	ldr	r0, [pc, #4]	; (8002770 <__malloc_unlock+0x8>)
 800276a:	f7ff be3e 	b.w	80023ea <__retarget_lock_release_recursive>
 800276e:	bf00      	nop
 8002770:	200000c8 	.word	0x200000c8

08002774 <_read_r>:
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4d07      	ldr	r5, [pc, #28]	; (8002794 <_read_r+0x20>)
 8002778:	4604      	mov	r4, r0
 800277a:	4608      	mov	r0, r1
 800277c:	4611      	mov	r1, r2
 800277e:	2200      	movs	r2, #0
 8002780:	602a      	str	r2, [r5, #0]
 8002782:	461a      	mov	r2, r3
 8002784:	f7fe f89d 	bl	80008c2 <_read>
 8002788:	1c43      	adds	r3, r0, #1
 800278a:	d102      	bne.n	8002792 <_read_r+0x1e>
 800278c:	682b      	ldr	r3, [r5, #0]
 800278e:	b103      	cbz	r3, 8002792 <_read_r+0x1e>
 8002790:	6023      	str	r3, [r4, #0]
 8002792:	bd38      	pop	{r3, r4, r5, pc}
 8002794:	200000d0 	.word	0x200000d0

08002798 <_init>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	bf00      	nop
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr

080027a4 <_fini>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr
